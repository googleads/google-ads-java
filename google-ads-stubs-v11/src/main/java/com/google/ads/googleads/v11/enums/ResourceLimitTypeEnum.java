// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/googleads/v11/enums/resource_limit_type.proto

package com.google.ads.googleads.v11.enums;

/**
 * <pre>
 * Container for enum describing possible resource limit types.
 * </pre>
 *
 * Protobuf type {@code google.ads.googleads.v11.enums.ResourceLimitTypeEnum}
 */
public final class ResourceLimitTypeEnum extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.ads.googleads.v11.enums.ResourceLimitTypeEnum)
    ResourceLimitTypeEnumOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ResourceLimitTypeEnum.newBuilder() to construct.
  private ResourceLimitTypeEnum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ResourceLimitTypeEnum() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ResourceLimitTypeEnum();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ResourceLimitTypeEnum(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.ads.googleads.v11.enums.ResourceLimitTypeProto.internal_static_google_ads_googleads_v11_enums_ResourceLimitTypeEnum_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.ads.googleads.v11.enums.ResourceLimitTypeProto.internal_static_google_ads_googleads_v11_enums_ResourceLimitTypeEnum_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.class, com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.Builder.class);
  }

  /**
   * <pre>
   * Resource limit type.
   * </pre>
   *
   * Protobuf enum {@code google.ads.googleads.v11.enums.ResourceLimitTypeEnum.ResourceLimitType}
   */
  public enum ResourceLimitType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * No value has been specified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * Used for return value only. Represents an unclassified operation unknown
     * in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    UNKNOWN(1),
    /**
     * <pre>
     * Number of ENABLED and PAUSED campaigns per customer.
     * </pre>
     *
     * <code>CAMPAIGNS_PER_CUSTOMER = 2;</code>
     */
    CAMPAIGNS_PER_CUSTOMER(2),
    /**
     * <pre>
     * Number of ENABLED and PAUSED base campaigns per customer.
     * </pre>
     *
     * <code>BASE_CAMPAIGNS_PER_CUSTOMER = 3;</code>
     */
    BASE_CAMPAIGNS_PER_CUSTOMER(3),
    /**
     * <pre>
     * Number of ENABLED and PAUSED experiment campaigns per customer.
     * </pre>
     *
     * <code>EXPERIMENT_CAMPAIGNS_PER_CUSTOMER = 105;</code>
     */
    EXPERIMENT_CAMPAIGNS_PER_CUSTOMER(105),
    /**
     * <pre>
     * Number of ENABLED and PAUSED Hotel campaigns per customer.
     * </pre>
     *
     * <code>HOTEL_CAMPAIGNS_PER_CUSTOMER = 4;</code>
     */
    HOTEL_CAMPAIGNS_PER_CUSTOMER(4),
    /**
     * <pre>
     * Number of ENABLED and PAUSED Smart Shopping campaigns per customer.
     * </pre>
     *
     * <code>SMART_SHOPPING_CAMPAIGNS_PER_CUSTOMER = 5;</code>
     */
    SMART_SHOPPING_CAMPAIGNS_PER_CUSTOMER(5),
    /**
     * <pre>
     * Number of ENABLED ad groups per campaign.
     * </pre>
     *
     * <code>AD_GROUPS_PER_CAMPAIGN = 6;</code>
     */
    AD_GROUPS_PER_CAMPAIGN(6),
    /**
     * <pre>
     * Number of ENABLED ad groups per Shopping campaign.
     * </pre>
     *
     * <code>AD_GROUPS_PER_SHOPPING_CAMPAIGN = 8;</code>
     */
    AD_GROUPS_PER_SHOPPING_CAMPAIGN(8),
    /**
     * <pre>
     * Number of ENABLED ad groups per Hotel campaign.
     * </pre>
     *
     * <code>AD_GROUPS_PER_HOTEL_CAMPAIGN = 9;</code>
     */
    AD_GROUPS_PER_HOTEL_CAMPAIGN(9),
    /**
     * <pre>
     * Number of ENABLED reporting ad groups per local campaign.
     * </pre>
     *
     * <code>REPORTING_AD_GROUPS_PER_LOCAL_CAMPAIGN = 10;</code>
     */
    REPORTING_AD_GROUPS_PER_LOCAL_CAMPAIGN(10),
    /**
     * <pre>
     * Number of ENABLED reporting ad groups per App campaign. It includes app
     * campaign and app campaign for engagement.
     * </pre>
     *
     * <code>REPORTING_AD_GROUPS_PER_APP_CAMPAIGN = 11;</code>
     */
    REPORTING_AD_GROUPS_PER_APP_CAMPAIGN(11),
    /**
     * <pre>
     * Number of ENABLED managed ad groups per smart campaign.
     * </pre>
     *
     * <code>MANAGED_AD_GROUPS_PER_SMART_CAMPAIGN = 52;</code>
     */
    MANAGED_AD_GROUPS_PER_SMART_CAMPAIGN(52),
    /**
     * <pre>
     * Number of ENABLED ad group criteria per customer.
     * An ad group criterion is considered as ENABLED if:
     * 1. it's not REMOVED
     * 2. its ad group is not REMOVED
     * 3. its campaign is not REMOVED.
     * </pre>
     *
     * <code>AD_GROUP_CRITERIA_PER_CUSTOMER = 12;</code>
     */
    AD_GROUP_CRITERIA_PER_CUSTOMER(12),
    /**
     * <pre>
     * Number of ad group criteria across all base campaigns for a customer.
     * </pre>
     *
     * <code>BASE_AD_GROUP_CRITERIA_PER_CUSTOMER = 13;</code>
     */
    BASE_AD_GROUP_CRITERIA_PER_CUSTOMER(13),
    /**
     * <pre>
     * Number of ad group criteria across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_AD_GROUP_CRITERIA_PER_CUSTOMER = 107;</code>
     */
    EXPERIMENT_AD_GROUP_CRITERIA_PER_CUSTOMER(107),
    /**
     * <pre>
     * Number of ENABLED ad group criteria per campaign.
     * An ad group criterion is considered as ENABLED if:
     * 1. it's not REMOVED
     * 2. its ad group is not REMOVED.
     * </pre>
     *
     * <code>AD_GROUP_CRITERIA_PER_CAMPAIGN = 14;</code>
     */
    AD_GROUP_CRITERIA_PER_CAMPAIGN(14),
    /**
     * <pre>
     * Number of ENABLED campaign criteria per customer.
     * </pre>
     *
     * <code>CAMPAIGN_CRITERIA_PER_CUSTOMER = 15;</code>
     */
    CAMPAIGN_CRITERIA_PER_CUSTOMER(15),
    /**
     * <pre>
     * Number of ENABLED campaign criteria across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_CAMPAIGN_CRITERIA_PER_CUSTOMER = 16;</code>
     */
    BASE_CAMPAIGN_CRITERIA_PER_CUSTOMER(16),
    /**
     * <pre>
     * Number of ENABLED campaign criteria across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_CAMPAIGN_CRITERIA_PER_CUSTOMER = 108;</code>
     */
    EXPERIMENT_CAMPAIGN_CRITERIA_PER_CUSTOMER(108),
    /**
     * <pre>
     * Number of ENABLED webpage criteria per customer, including
     * campaign level and ad group level.
     * </pre>
     *
     * <code>WEBPAGE_CRITERIA_PER_CUSTOMER = 17;</code>
     */
    WEBPAGE_CRITERIA_PER_CUSTOMER(17),
    /**
     * <pre>
     * Number of ENABLED webpage criteria across all base campaigns for
     * a customer.
     * </pre>
     *
     * <code>BASE_WEBPAGE_CRITERIA_PER_CUSTOMER = 18;</code>
     */
    BASE_WEBPAGE_CRITERIA_PER_CUSTOMER(18),
    /**
     * <pre>
     * Meximum number of ENABLED webpage criteria across all experiment
     * campaigns for a customer.
     * </pre>
     *
     * <code>EXPERIMENT_WEBPAGE_CRITERIA_PER_CUSTOMER = 19;</code>
     */
    EXPERIMENT_WEBPAGE_CRITERIA_PER_CUSTOMER(19),
    /**
     * <pre>
     * Number of combined audience criteria per ad group.
     * </pre>
     *
     * <code>COMBINED_AUDIENCE_CRITERIA_PER_AD_GROUP = 20;</code>
     */
    COMBINED_AUDIENCE_CRITERIA_PER_AD_GROUP(20),
    /**
     * <pre>
     * Limit for placement criterion type group in customer negative criterion.
     * </pre>
     *
     * <code>CUSTOMER_NEGATIVE_PLACEMENT_CRITERIA_PER_CUSTOMER = 21;</code>
     */
    CUSTOMER_NEGATIVE_PLACEMENT_CRITERIA_PER_CUSTOMER(21),
    /**
     * <pre>
     * Limit for YouTube TV channels in customer negative criterion.
     * </pre>
     *
     * <code>CUSTOMER_NEGATIVE_YOUTUBE_CHANNEL_CRITERIA_PER_CUSTOMER = 22;</code>
     */
    CUSTOMER_NEGATIVE_YOUTUBE_CHANNEL_CRITERIA_PER_CUSTOMER(22),
    /**
     * <pre>
     * Number of ENABLED criteria per ad group.
     * </pre>
     *
     * <code>CRITERIA_PER_AD_GROUP = 23;</code>
     */
    CRITERIA_PER_AD_GROUP(23),
    /**
     * <pre>
     * Number of listing group criteria per ad group.
     * </pre>
     *
     * <code>LISTING_GROUPS_PER_AD_GROUP = 24;</code>
     */
    LISTING_GROUPS_PER_AD_GROUP(24),
    /**
     * <pre>
     * Number of ENABLED explicitly shared budgets per customer.
     * </pre>
     *
     * <code>EXPLICITLY_SHARED_BUDGETS_PER_CUSTOMER = 25;</code>
     */
    EXPLICITLY_SHARED_BUDGETS_PER_CUSTOMER(25),
    /**
     * <pre>
     * Number of ENABLED implicitly shared budgets per customer.
     * </pre>
     *
     * <code>IMPLICITLY_SHARED_BUDGETS_PER_CUSTOMER = 26;</code>
     */
    IMPLICITLY_SHARED_BUDGETS_PER_CUSTOMER(26),
    /**
     * <pre>
     * Number of combined audience criteria per campaign.
     * </pre>
     *
     * <code>COMBINED_AUDIENCE_CRITERIA_PER_CAMPAIGN = 27;</code>
     */
    COMBINED_AUDIENCE_CRITERIA_PER_CAMPAIGN(27),
    /**
     * <pre>
     * Number of negative keywords per campaign.
     * </pre>
     *
     * <code>NEGATIVE_KEYWORDS_PER_CAMPAIGN = 28;</code>
     */
    NEGATIVE_KEYWORDS_PER_CAMPAIGN(28),
    /**
     * <pre>
     * Number of excluded campaign criteria in placement dimension, e.g.
     * placement, mobile application, YouTube channel, etc. The API criterion
     * type is NOT limited to placement only, and this does not include
     * exclusions at the ad group or other levels.
     * </pre>
     *
     * <code>NEGATIVE_PLACEMENTS_PER_CAMPAIGN = 29;</code>
     */
    NEGATIVE_PLACEMENTS_PER_CAMPAIGN(29),
    /**
     * <pre>
     * Number of geo targets per campaign.
     * </pre>
     *
     * <code>GEO_TARGETS_PER_CAMPAIGN = 30;</code>
     */
    GEO_TARGETS_PER_CAMPAIGN(30),
    /**
     * <pre>
     * Number of negative IP blocks per campaign.
     * </pre>
     *
     * <code>NEGATIVE_IP_BLOCKS_PER_CAMPAIGN = 32;</code>
     */
    NEGATIVE_IP_BLOCKS_PER_CAMPAIGN(32),
    /**
     * <pre>
     * Number of proximity targets per campaign.
     * </pre>
     *
     * <code>PROXIMITIES_PER_CAMPAIGN = 33;</code>
     */
    PROXIMITIES_PER_CAMPAIGN(33),
    /**
     * <pre>
     * Number of listing scopes per Shopping campaign.
     * </pre>
     *
     * <code>LISTING_SCOPES_PER_SHOPPING_CAMPAIGN = 34;</code>
     */
    LISTING_SCOPES_PER_SHOPPING_CAMPAIGN(34),
    /**
     * <pre>
     * Number of listing scopes per non-Shopping campaign.
     * </pre>
     *
     * <code>LISTING_SCOPES_PER_NON_SHOPPING_CAMPAIGN = 35;</code>
     */
    LISTING_SCOPES_PER_NON_SHOPPING_CAMPAIGN(35),
    /**
     * <pre>
     * Number of criteria per negative keyword shared set.
     * </pre>
     *
     * <code>NEGATIVE_KEYWORDS_PER_SHARED_SET = 36;</code>
     */
    NEGATIVE_KEYWORDS_PER_SHARED_SET(36),
    /**
     * <pre>
     * Number of criteria per negative placement shared set.
     * </pre>
     *
     * <code>NEGATIVE_PLACEMENTS_PER_SHARED_SET = 37;</code>
     */
    NEGATIVE_PLACEMENTS_PER_SHARED_SET(37),
    /**
     * <pre>
     * Default number of shared sets allowed per type per customer.
     * </pre>
     *
     * <code>SHARED_SETS_PER_CUSTOMER_FOR_TYPE_DEFAULT = 40;</code>
     */
    SHARED_SETS_PER_CUSTOMER_FOR_TYPE_DEFAULT(40),
    /**
     * <pre>
     * Number of shared sets of negative placement list type for a
     * manager customer.
     * </pre>
     *
     * <code>SHARED_SETS_PER_CUSTOMER_FOR_NEGATIVE_PLACEMENT_LIST_LOWER = 41;</code>
     */
    SHARED_SETS_PER_CUSTOMER_FOR_NEGATIVE_PLACEMENT_LIST_LOWER(41),
    /**
     * <pre>
     * Number of hotel_advance_booking_window bid modifiers per ad group.
     * </pre>
     *
     * <code>HOTEL_ADVANCE_BOOKING_WINDOW_BID_MODIFIERS_PER_AD_GROUP = 44;</code>
     */
    HOTEL_ADVANCE_BOOKING_WINDOW_BID_MODIFIERS_PER_AD_GROUP(44),
    /**
     * <pre>
     * Number of ENABLED shared bidding strategies per customer.
     * </pre>
     *
     * <code>BIDDING_STRATEGIES_PER_CUSTOMER = 45;</code>
     */
    BIDDING_STRATEGIES_PER_CUSTOMER(45),
    /**
     * <pre>
     * Number of open basic user lists per customer.
     * </pre>
     *
     * <code>BASIC_USER_LISTS_PER_CUSTOMER = 47;</code>
     */
    BASIC_USER_LISTS_PER_CUSTOMER(47),
    /**
     * <pre>
     * Number of open logical user lists per customer.
     * </pre>
     *
     * <code>LOGICAL_USER_LISTS_PER_CUSTOMER = 48;</code>
     */
    LOGICAL_USER_LISTS_PER_CUSTOMER(48),
    /**
     * <pre>
     * Number of open rule based user lists per customer.
     * </pre>
     *
     * <code>RULE_BASED_USER_LISTS_PER_CUSTOMER = 153;</code>
     */
    RULE_BASED_USER_LISTS_PER_CUSTOMER(153),
    /**
     * <pre>
     * Number of ENABLED and PAUSED ad group ads across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_AD_GROUP_ADS_PER_CUSTOMER = 53;</code>
     */
    BASE_AD_GROUP_ADS_PER_CUSTOMER(53),
    /**
     * <pre>
     * Number of ENABLED and PAUSED ad group ads across all experiment campaigns
     * for a customer.
     * </pre>
     *
     * <code>EXPERIMENT_AD_GROUP_ADS_PER_CUSTOMER = 54;</code>
     */
    EXPERIMENT_AD_GROUP_ADS_PER_CUSTOMER(54),
    /**
     * <pre>
     * Number of ENABLED and PAUSED ad group ads per campaign.
     * </pre>
     *
     * <code>AD_GROUP_ADS_PER_CAMPAIGN = 55;</code>
     */
    AD_GROUP_ADS_PER_CAMPAIGN(55),
    /**
     * <pre>
     * Number of ENABLED ads per ad group that do not fall in to other buckets.
     * Includes text and many other types.
     * </pre>
     *
     * <code>TEXT_AND_OTHER_ADS_PER_AD_GROUP = 56;</code>
     */
    TEXT_AND_OTHER_ADS_PER_AD_GROUP(56),
    /**
     * <pre>
     * Number of ENABLED image ads per ad group.
     * </pre>
     *
     * <code>IMAGE_ADS_PER_AD_GROUP = 57;</code>
     */
    IMAGE_ADS_PER_AD_GROUP(57),
    /**
     * <pre>
     * Number of ENABLED shopping smart ads per ad group.
     * </pre>
     *
     * <code>SHOPPING_SMART_ADS_PER_AD_GROUP = 58;</code>
     */
    SHOPPING_SMART_ADS_PER_AD_GROUP(58),
    /**
     * <pre>
     * Number of ENABLED responsive search ads per ad group.
     * </pre>
     *
     * <code>RESPONSIVE_SEARCH_ADS_PER_AD_GROUP = 59;</code>
     */
    RESPONSIVE_SEARCH_ADS_PER_AD_GROUP(59),
    /**
     * <pre>
     * Number of ENABLED app ads per ad group.
     * </pre>
     *
     * <code>APP_ADS_PER_AD_GROUP = 60;</code>
     */
    APP_ADS_PER_AD_GROUP(60),
    /**
     * <pre>
     * Number of ENABLED app engagement ads per ad group.
     * </pre>
     *
     * <code>APP_ENGAGEMENT_ADS_PER_AD_GROUP = 61;</code>
     */
    APP_ENGAGEMENT_ADS_PER_AD_GROUP(61),
    /**
     * <pre>
     * Number of ENABLED local ads per ad group.
     * </pre>
     *
     * <code>LOCAL_ADS_PER_AD_GROUP = 62;</code>
     */
    LOCAL_ADS_PER_AD_GROUP(62),
    /**
     * <pre>
     * Number of ENABLED video ads per ad group.
     * </pre>
     *
     * <code>VIDEO_ADS_PER_AD_GROUP = 63;</code>
     */
    VIDEO_ADS_PER_AD_GROUP(63),
    /**
     * <pre>
     * Number of ENABLED lead form CampaignAssets per campaign.
     * </pre>
     *
     * <code>LEAD_FORM_CAMPAIGN_ASSETS_PER_CAMPAIGN = 143;</code>
     */
    LEAD_FORM_CAMPAIGN_ASSETS_PER_CAMPAIGN(143),
    /**
     * <pre>
     * Number of ENABLED promotion CustomerAssets per customer.
     * </pre>
     *
     * <code>PROMOTION_CUSTOMER_ASSETS_PER_CUSTOMER = 79;</code>
     */
    PROMOTION_CUSTOMER_ASSETS_PER_CUSTOMER(79),
    /**
     * <pre>
     * Number of ENABLED promotion CampaignAssets per campaign.
     * </pre>
     *
     * <code>PROMOTION_CAMPAIGN_ASSETS_PER_CAMPAIGN = 80;</code>
     */
    PROMOTION_CAMPAIGN_ASSETS_PER_CAMPAIGN(80),
    /**
     * <pre>
     * Number of ENABLED promotion AdGroupAssets per ad group.
     * </pre>
     *
     * <code>PROMOTION_AD_GROUP_ASSETS_PER_AD_GROUP = 81;</code>
     */
    PROMOTION_AD_GROUP_ASSETS_PER_AD_GROUP(81),
    /**
     * <pre>
     * Number of ENABLED callout CustomerAssets per customer.
     * </pre>
     *
     * <code>CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER = 134;</code>
     */
    CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER(134),
    /**
     * <pre>
     * Number of ENABLED callout CampaignAssets per campaign.
     * </pre>
     *
     * <code>CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN = 135;</code>
     */
    CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN(135),
    /**
     * <pre>
     * Number of ENABLED callout AdGroupAssets per ad group.
     * </pre>
     *
     * <code>CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP = 136;</code>
     */
    CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP(136),
    /**
     * <pre>
     * Number of ENABLED sitelink CustomerAssets per customer.
     * </pre>
     *
     * <code>SITELINK_CUSTOMER_ASSETS_PER_CUSTOMER = 137;</code>
     */
    SITELINK_CUSTOMER_ASSETS_PER_CUSTOMER(137),
    /**
     * <pre>
     * Number of ENABLED sitelink CampaignAssets per campaign.
     * </pre>
     *
     * <code>SITELINK_CAMPAIGN_ASSETS_PER_CAMPAIGN = 138;</code>
     */
    SITELINK_CAMPAIGN_ASSETS_PER_CAMPAIGN(138),
    /**
     * <pre>
     * Number of ENABLED sitelink AdGroupAssets per ad group.
     * </pre>
     *
     * <code>SITELINK_AD_GROUP_ASSETS_PER_AD_GROUP = 139;</code>
     */
    SITELINK_AD_GROUP_ASSETS_PER_AD_GROUP(139),
    /**
     * <pre>
     * Number of ENABLED structured snippet CustomerAssets per customer.
     * </pre>
     *
     * <code>STRUCTURED_SNIPPET_CUSTOMER_ASSETS_PER_CUSTOMER = 140;</code>
     */
    STRUCTURED_SNIPPET_CUSTOMER_ASSETS_PER_CUSTOMER(140),
    /**
     * <pre>
     * Number of ENABLED structured snippet CampaignAssets per campaign.
     * </pre>
     *
     * <code>STRUCTURED_SNIPPET_CAMPAIGN_ASSETS_PER_CAMPAIGN = 141;</code>
     */
    STRUCTURED_SNIPPET_CAMPAIGN_ASSETS_PER_CAMPAIGN(141),
    /**
     * <pre>
     * Number of ENABLED structured snippet AdGroupAssets per ad group.
     * </pre>
     *
     * <code>STRUCTURED_SNIPPET_AD_GROUP_ASSETS_PER_AD_GROUP = 142;</code>
     */
    STRUCTURED_SNIPPET_AD_GROUP_ASSETS_PER_AD_GROUP(142),
    /**
     * <pre>
     * Number of ENABLED mobile app CustomerAssets per customer.
     * </pre>
     *
     * <code>MOBILE_APP_CUSTOMER_ASSETS_PER_CUSTOMER = 144;</code>
     */
    MOBILE_APP_CUSTOMER_ASSETS_PER_CUSTOMER(144),
    /**
     * <pre>
     * Number of ENABLED mobile app CampaignAssets per campaign.
     * </pre>
     *
     * <code>MOBILE_APP_CAMPAIGN_ASSETS_PER_CAMPAIGN = 145;</code>
     */
    MOBILE_APP_CAMPAIGN_ASSETS_PER_CAMPAIGN(145),
    /**
     * <pre>
     * Number of ENABLED mobile app AdGroupAssets per ad group.
     * </pre>
     *
     * <code>MOBILE_APP_AD_GROUP_ASSETS_PER_AD_GROUP = 146;</code>
     */
    MOBILE_APP_AD_GROUP_ASSETS_PER_AD_GROUP(146),
    /**
     * <pre>
     * Number of ENABLED hotel callout CustomerAssets per customer.
     * </pre>
     *
     * <code>HOTEL_CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER = 147;</code>
     */
    HOTEL_CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER(147),
    /**
     * <pre>
     * Number of ENABLED hotel callout CampaignAssets per campaign.
     * </pre>
     *
     * <code>HOTEL_CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN = 148;</code>
     */
    HOTEL_CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN(148),
    /**
     * <pre>
     * Number of ENABLED hotel callout AdGroupAssets per ad group.
     * </pre>
     *
     * <code>HOTEL_CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP = 149;</code>
     */
    HOTEL_CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP(149),
    /**
     * <pre>
     * Number of ENABLED call CustomerAssets per customer.
     * </pre>
     *
     * <code>CALL_CUSTOMER_ASSETS_PER_CUSTOMER = 150;</code>
     */
    CALL_CUSTOMER_ASSETS_PER_CUSTOMER(150),
    /**
     * <pre>
     * Number of ENABLED call CampaignAssets per campaign.
     * </pre>
     *
     * <code>CALL_CAMPAIGN_ASSETS_PER_CAMPAIGN = 151;</code>
     */
    CALL_CAMPAIGN_ASSETS_PER_CAMPAIGN(151),
    /**
     * <pre>
     * Number of ENABLED call AdGroupAssets per ad group.
     * </pre>
     *
     * <code>CALL_AD_GROUP_ASSETS_PER_AD_GROUP = 152;</code>
     */
    CALL_AD_GROUP_ASSETS_PER_AD_GROUP(152),
    /**
     * <pre>
     * Number of ENABLED price CustomerAssets per customer.
     * </pre>
     *
     * <code>PRICE_CUSTOMER_ASSETS_PER_CUSTOMER = 154;</code>
     */
    PRICE_CUSTOMER_ASSETS_PER_CUSTOMER(154),
    /**
     * <pre>
     * Number of ENABLED price CampaignAssets per campaign.
     * </pre>
     *
     * <code>PRICE_CAMPAIGN_ASSETS_PER_CAMPAIGN = 155;</code>
     */
    PRICE_CAMPAIGN_ASSETS_PER_CAMPAIGN(155),
    /**
     * <pre>
     * Number of ENABLED price AdGroupAssets per ad group.
     * </pre>
     *
     * <code>PRICE_AD_GROUP_ASSETS_PER_AD_GROUP = 156;</code>
     */
    PRICE_AD_GROUP_ASSETS_PER_AD_GROUP(156),
    /**
     * <pre>
     * Number of ENABLED page feed asset sets per customer.
     * </pre>
     *
     * <code>PAGE_FEED_ASSET_SETS_PER_CUSTOMER = 157;</code>
     */
    PAGE_FEED_ASSET_SETS_PER_CUSTOMER(157),
    /**
     * <pre>
     * Number of ENABLED dynamic education feed asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_EDUCATION_FEED_ASSET_SETS_PER_CUSTOMER = 158;</code>
     */
    DYNAMIC_EDUCATION_FEED_ASSET_SETS_PER_CUSTOMER(158),
    /**
     * <pre>
     * Number of ENABLED assets per page feed asset set.
     * </pre>
     *
     * <code>ASSETS_PER_PAGE_FEED_ASSET_SET = 159;</code>
     */
    ASSETS_PER_PAGE_FEED_ASSET_SET(159),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic education asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_EDUCATION_FEED_ASSET_SET = 160;</code>
     */
    ASSETS_PER_DYNAMIC_EDUCATION_FEED_ASSET_SET(160),
    /**
     * <pre>
     * Number of ENABLED dynamic real estate asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_REAL_ESTATE_ASSET_SETS_PER_CUSTOMER = 161;</code>
     */
    DYNAMIC_REAL_ESTATE_ASSET_SETS_PER_CUSTOMER(161),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic real estate asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_REAL_ESTATE_ASSET_SET = 162;</code>
     */
    ASSETS_PER_DYNAMIC_REAL_ESTATE_ASSET_SET(162),
    /**
     * <pre>
     * Number of ENABLED dynamic custom asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_CUSTOM_ASSET_SETS_PER_CUSTOMER = 163;</code>
     */
    DYNAMIC_CUSTOM_ASSET_SETS_PER_CUSTOMER(163),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic custom asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_CUSTOM_ASSET_SET = 164;</code>
     */
    ASSETS_PER_DYNAMIC_CUSTOM_ASSET_SET(164),
    /**
     * <pre>
     * Number of ENABLED dynamic hotels and rentals asset sets per
     * customer.
     * </pre>
     *
     * <code>DYNAMIC_HOTELS_AND_RENTALS_ASSET_SETS_PER_CUSTOMER = 165;</code>
     */
    DYNAMIC_HOTELS_AND_RENTALS_ASSET_SETS_PER_CUSTOMER(165),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic hotels and rentals asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_HOTELS_AND_RENTALS_ASSET_SET = 166;</code>
     */
    ASSETS_PER_DYNAMIC_HOTELS_AND_RENTALS_ASSET_SET(166),
    /**
     * <pre>
     * Number of ENABLED dynamic local asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_LOCAL_ASSET_SETS_PER_CUSTOMER = 167;</code>
     */
    DYNAMIC_LOCAL_ASSET_SETS_PER_CUSTOMER(167),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic local asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_LOCAL_ASSET_SET = 168;</code>
     */
    ASSETS_PER_DYNAMIC_LOCAL_ASSET_SET(168),
    /**
     * <pre>
     * Number of ENABLED dynamic flights asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_FLIGHTS_ASSET_SETS_PER_CUSTOMER = 169;</code>
     */
    DYNAMIC_FLIGHTS_ASSET_SETS_PER_CUSTOMER(169),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic flights asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_FLIGHTS_ASSET_SET = 170;</code>
     */
    ASSETS_PER_DYNAMIC_FLIGHTS_ASSET_SET(170),
    /**
     * <pre>
     * Number of ENABLED dynamic travel asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_TRAVEL_ASSET_SETS_PER_CUSTOMER = 171;</code>
     */
    DYNAMIC_TRAVEL_ASSET_SETS_PER_CUSTOMER(171),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic travel asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_TRAVEL_ASSET_SET = 172;</code>
     */
    ASSETS_PER_DYNAMIC_TRAVEL_ASSET_SET(172),
    /**
     * <pre>
     * Number of ENABLED dynamic jobs asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_JOBS_ASSET_SETS_PER_CUSTOMER = 173;</code>
     */
    DYNAMIC_JOBS_ASSET_SETS_PER_CUSTOMER(173),
    /**
     * <pre>
     * Number of ENABLED assets per dynamic jobs asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_JOBS_ASSET_SET = 174;</code>
     */
    ASSETS_PER_DYNAMIC_JOBS_ASSET_SET(174),
    /**
     * <pre>
     * Number of versions per ad.
     * </pre>
     *
     * <code>VERSIONS_PER_AD = 82;</code>
     */
    VERSIONS_PER_AD(82),
    /**
     * <pre>
     * Number of ENABLED user feeds per customer.
     * </pre>
     *
     * <code>USER_FEEDS_PER_CUSTOMER = 90;</code>
     */
    USER_FEEDS_PER_CUSTOMER(90),
    /**
     * <pre>
     * Number of ENABLED system feeds per customer.
     * </pre>
     *
     * <code>SYSTEM_FEEDS_PER_CUSTOMER = 91;</code>
     */
    SYSTEM_FEEDS_PER_CUSTOMER(91),
    /**
     * <pre>
     * Number of feed attributes per feed.
     * </pre>
     *
     * <code>FEED_ATTRIBUTES_PER_FEED = 92;</code>
     */
    FEED_ATTRIBUTES_PER_FEED(92),
    /**
     * <pre>
     * Number of ENABLED feed items per customer.
     * </pre>
     *
     * <code>FEED_ITEMS_PER_CUSTOMER = 94;</code>
     */
    FEED_ITEMS_PER_CUSTOMER(94),
    /**
     * <pre>
     * Number of ENABLED campaign feeds per customer.
     * </pre>
     *
     * <code>CAMPAIGN_FEEDS_PER_CUSTOMER = 95;</code>
     */
    CAMPAIGN_FEEDS_PER_CUSTOMER(95),
    /**
     * <pre>
     * Number of ENABLED campaign feeds across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_CAMPAIGN_FEEDS_PER_CUSTOMER = 96;</code>
     */
    BASE_CAMPAIGN_FEEDS_PER_CUSTOMER(96),
    /**
     * <pre>
     * Number of ENABLED campaign feeds across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_CAMPAIGN_FEEDS_PER_CUSTOMER = 109;</code>
     */
    EXPERIMENT_CAMPAIGN_FEEDS_PER_CUSTOMER(109),
    /**
     * <pre>
     * Number of ENABLED ad group feeds per customer.
     * </pre>
     *
     * <code>AD_GROUP_FEEDS_PER_CUSTOMER = 97;</code>
     */
    AD_GROUP_FEEDS_PER_CUSTOMER(97),
    /**
     * <pre>
     * Number of ENABLED ad group feeds across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_AD_GROUP_FEEDS_PER_CUSTOMER = 98;</code>
     */
    BASE_AD_GROUP_FEEDS_PER_CUSTOMER(98),
    /**
     * <pre>
     * Number of ENABLED ad group feeds across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_AD_GROUP_FEEDS_PER_CUSTOMER = 110;</code>
     */
    EXPERIMENT_AD_GROUP_FEEDS_PER_CUSTOMER(110),
    /**
     * <pre>
     * Number of ENABLED ad group feeds per campaign.
     * </pre>
     *
     * <code>AD_GROUP_FEEDS_PER_CAMPAIGN = 99;</code>
     */
    AD_GROUP_FEEDS_PER_CAMPAIGN(99),
    /**
     * <pre>
     * Number of ENABLED feed items per customer.
     * </pre>
     *
     * <code>FEED_ITEM_SETS_PER_CUSTOMER = 100;</code>
     */
    FEED_ITEM_SETS_PER_CUSTOMER(100),
    /**
     * <pre>
     * Number of feed items per feed item set.
     * </pre>
     *
     * <code>FEED_ITEMS_PER_FEED_ITEM_SET = 101;</code>
     */
    FEED_ITEMS_PER_FEED_ITEM_SET(101),
    /**
     * <pre>
     * Number of ENABLED campaign experiments per customer.
     * </pre>
     *
     * <code>CAMPAIGN_EXPERIMENTS_PER_CUSTOMER = 112;</code>
     */
    CAMPAIGN_EXPERIMENTS_PER_CUSTOMER(112),
    /**
     * <pre>
     * Number of video experiment arms per experiment.
     * </pre>
     *
     * <code>EXPERIMENT_ARMS_PER_VIDEO_EXPERIMENT = 113;</code>
     */
    EXPERIMENT_ARMS_PER_VIDEO_EXPERIMENT(113),
    /**
     * <pre>
     * Number of owned labels per customer.
     * </pre>
     *
     * <code>OWNED_LABELS_PER_CUSTOMER = 115;</code>
     */
    OWNED_LABELS_PER_CUSTOMER(115),
    /**
     * <pre>
     * Number of applied labels per campaign.
     * </pre>
     *
     * <code>LABELS_PER_CAMPAIGN = 117;</code>
     */
    LABELS_PER_CAMPAIGN(117),
    /**
     * <pre>
     * Number of applied labels per ad group.
     * </pre>
     *
     * <code>LABELS_PER_AD_GROUP = 118;</code>
     */
    LABELS_PER_AD_GROUP(118),
    /**
     * <pre>
     * Number of applied labels per ad group ad.
     * </pre>
     *
     * <code>LABELS_PER_AD_GROUP_AD = 119;</code>
     */
    LABELS_PER_AD_GROUP_AD(119),
    /**
     * <pre>
     * Number of applied labels per ad group criterion.
     * </pre>
     *
     * <code>LABELS_PER_AD_GROUP_CRITERION = 120;</code>
     */
    LABELS_PER_AD_GROUP_CRITERION(120),
    /**
     * <pre>
     * Number of customers with a single label applied.
     * </pre>
     *
     * <code>TARGET_CUSTOMERS_PER_LABEL = 121;</code>
     */
    TARGET_CUSTOMERS_PER_LABEL(121),
    /**
     * <pre>
     * Number of ENABLED keyword plans per user per customer.
     * The limit is applied per &lt;user, customer&gt; pair because by default a plan
     * is private to a user of a customer. Each user of a customer has his or
     * her own independent limit.
     * </pre>
     *
     * <code>KEYWORD_PLANS_PER_USER_PER_CUSTOMER = 122;</code>
     */
    KEYWORD_PLANS_PER_USER_PER_CUSTOMER(122),
    /**
     * <pre>
     * Number of keyword plan ad group keywords per keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_AD_GROUP_KEYWORDS_PER_KEYWORD_PLAN = 123;</code>
     */
    KEYWORD_PLAN_AD_GROUP_KEYWORDS_PER_KEYWORD_PLAN(123),
    /**
     * <pre>
     * Number of keyword plan ad groups per keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_AD_GROUPS_PER_KEYWORD_PLAN = 124;</code>
     */
    KEYWORD_PLAN_AD_GROUPS_PER_KEYWORD_PLAN(124),
    /**
     * <pre>
     * Number of keyword plan negative keywords (both campaign and ad group) per
     * keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_NEGATIVE_KEYWORDS_PER_KEYWORD_PLAN = 125;</code>
     */
    KEYWORD_PLAN_NEGATIVE_KEYWORDS_PER_KEYWORD_PLAN(125),
    /**
     * <pre>
     * Number of keyword plan campaigns per keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_CAMPAIGNS_PER_KEYWORD_PLAN = 126;</code>
     */
    KEYWORD_PLAN_CAMPAIGNS_PER_KEYWORD_PLAN(126),
    /**
     * <pre>
     * Number of ENABLED conversion actions per customer.
     * </pre>
     *
     * <code>CONVERSION_ACTIONS_PER_CUSTOMER = 128;</code>
     */
    CONVERSION_ACTIONS_PER_CUSTOMER(128),
    /**
     * <pre>
     * Number of operations in a single batch job.
     * </pre>
     *
     * <code>BATCH_JOB_OPERATIONS_PER_JOB = 130;</code>
     */
    BATCH_JOB_OPERATIONS_PER_JOB(130),
    /**
     * <pre>
     * Number of PENDING or ENABLED batch jobs per customer.
     * </pre>
     *
     * <code>BATCH_JOBS_PER_CUSTOMER = 131;</code>
     */
    BATCH_JOBS_PER_CUSTOMER(131),
    /**
     * <pre>
     * Number of hotel check-in date range bid modifiers per ad agroup.
     * </pre>
     *
     * <code>HOTEL_CHECK_IN_DATE_RANGE_BID_MODIFIERS_PER_AD_GROUP = 132;</code>
     */
    HOTEL_CHECK_IN_DATE_RANGE_BID_MODIFIERS_PER_AD_GROUP(132),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * No value has been specified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Used for return value only. Represents an unclassified operation unknown
     * in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    public static final int UNKNOWN_VALUE = 1;
    /**
     * <pre>
     * Number of ENABLED and PAUSED campaigns per customer.
     * </pre>
     *
     * <code>CAMPAIGNS_PER_CUSTOMER = 2;</code>
     */
    public static final int CAMPAIGNS_PER_CUSTOMER_VALUE = 2;
    /**
     * <pre>
     * Number of ENABLED and PAUSED base campaigns per customer.
     * </pre>
     *
     * <code>BASE_CAMPAIGNS_PER_CUSTOMER = 3;</code>
     */
    public static final int BASE_CAMPAIGNS_PER_CUSTOMER_VALUE = 3;
    /**
     * <pre>
     * Number of ENABLED and PAUSED experiment campaigns per customer.
     * </pre>
     *
     * <code>EXPERIMENT_CAMPAIGNS_PER_CUSTOMER = 105;</code>
     */
    public static final int EXPERIMENT_CAMPAIGNS_PER_CUSTOMER_VALUE = 105;
    /**
     * <pre>
     * Number of ENABLED and PAUSED Hotel campaigns per customer.
     * </pre>
     *
     * <code>HOTEL_CAMPAIGNS_PER_CUSTOMER = 4;</code>
     */
    public static final int HOTEL_CAMPAIGNS_PER_CUSTOMER_VALUE = 4;
    /**
     * <pre>
     * Number of ENABLED and PAUSED Smart Shopping campaigns per customer.
     * </pre>
     *
     * <code>SMART_SHOPPING_CAMPAIGNS_PER_CUSTOMER = 5;</code>
     */
    public static final int SMART_SHOPPING_CAMPAIGNS_PER_CUSTOMER_VALUE = 5;
    /**
     * <pre>
     * Number of ENABLED ad groups per campaign.
     * </pre>
     *
     * <code>AD_GROUPS_PER_CAMPAIGN = 6;</code>
     */
    public static final int AD_GROUPS_PER_CAMPAIGN_VALUE = 6;
    /**
     * <pre>
     * Number of ENABLED ad groups per Shopping campaign.
     * </pre>
     *
     * <code>AD_GROUPS_PER_SHOPPING_CAMPAIGN = 8;</code>
     */
    public static final int AD_GROUPS_PER_SHOPPING_CAMPAIGN_VALUE = 8;
    /**
     * <pre>
     * Number of ENABLED ad groups per Hotel campaign.
     * </pre>
     *
     * <code>AD_GROUPS_PER_HOTEL_CAMPAIGN = 9;</code>
     */
    public static final int AD_GROUPS_PER_HOTEL_CAMPAIGN_VALUE = 9;
    /**
     * <pre>
     * Number of ENABLED reporting ad groups per local campaign.
     * </pre>
     *
     * <code>REPORTING_AD_GROUPS_PER_LOCAL_CAMPAIGN = 10;</code>
     */
    public static final int REPORTING_AD_GROUPS_PER_LOCAL_CAMPAIGN_VALUE = 10;
    /**
     * <pre>
     * Number of ENABLED reporting ad groups per App campaign. It includes app
     * campaign and app campaign for engagement.
     * </pre>
     *
     * <code>REPORTING_AD_GROUPS_PER_APP_CAMPAIGN = 11;</code>
     */
    public static final int REPORTING_AD_GROUPS_PER_APP_CAMPAIGN_VALUE = 11;
    /**
     * <pre>
     * Number of ENABLED managed ad groups per smart campaign.
     * </pre>
     *
     * <code>MANAGED_AD_GROUPS_PER_SMART_CAMPAIGN = 52;</code>
     */
    public static final int MANAGED_AD_GROUPS_PER_SMART_CAMPAIGN_VALUE = 52;
    /**
     * <pre>
     * Number of ENABLED ad group criteria per customer.
     * An ad group criterion is considered as ENABLED if:
     * 1. it's not REMOVED
     * 2. its ad group is not REMOVED
     * 3. its campaign is not REMOVED.
     * </pre>
     *
     * <code>AD_GROUP_CRITERIA_PER_CUSTOMER = 12;</code>
     */
    public static final int AD_GROUP_CRITERIA_PER_CUSTOMER_VALUE = 12;
    /**
     * <pre>
     * Number of ad group criteria across all base campaigns for a customer.
     * </pre>
     *
     * <code>BASE_AD_GROUP_CRITERIA_PER_CUSTOMER = 13;</code>
     */
    public static final int BASE_AD_GROUP_CRITERIA_PER_CUSTOMER_VALUE = 13;
    /**
     * <pre>
     * Number of ad group criteria across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_AD_GROUP_CRITERIA_PER_CUSTOMER = 107;</code>
     */
    public static final int EXPERIMENT_AD_GROUP_CRITERIA_PER_CUSTOMER_VALUE = 107;
    /**
     * <pre>
     * Number of ENABLED ad group criteria per campaign.
     * An ad group criterion is considered as ENABLED if:
     * 1. it's not REMOVED
     * 2. its ad group is not REMOVED.
     * </pre>
     *
     * <code>AD_GROUP_CRITERIA_PER_CAMPAIGN = 14;</code>
     */
    public static final int AD_GROUP_CRITERIA_PER_CAMPAIGN_VALUE = 14;
    /**
     * <pre>
     * Number of ENABLED campaign criteria per customer.
     * </pre>
     *
     * <code>CAMPAIGN_CRITERIA_PER_CUSTOMER = 15;</code>
     */
    public static final int CAMPAIGN_CRITERIA_PER_CUSTOMER_VALUE = 15;
    /**
     * <pre>
     * Number of ENABLED campaign criteria across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_CAMPAIGN_CRITERIA_PER_CUSTOMER = 16;</code>
     */
    public static final int BASE_CAMPAIGN_CRITERIA_PER_CUSTOMER_VALUE = 16;
    /**
     * <pre>
     * Number of ENABLED campaign criteria across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_CAMPAIGN_CRITERIA_PER_CUSTOMER = 108;</code>
     */
    public static final int EXPERIMENT_CAMPAIGN_CRITERIA_PER_CUSTOMER_VALUE = 108;
    /**
     * <pre>
     * Number of ENABLED webpage criteria per customer, including
     * campaign level and ad group level.
     * </pre>
     *
     * <code>WEBPAGE_CRITERIA_PER_CUSTOMER = 17;</code>
     */
    public static final int WEBPAGE_CRITERIA_PER_CUSTOMER_VALUE = 17;
    /**
     * <pre>
     * Number of ENABLED webpage criteria across all base campaigns for
     * a customer.
     * </pre>
     *
     * <code>BASE_WEBPAGE_CRITERIA_PER_CUSTOMER = 18;</code>
     */
    public static final int BASE_WEBPAGE_CRITERIA_PER_CUSTOMER_VALUE = 18;
    /**
     * <pre>
     * Meximum number of ENABLED webpage criteria across all experiment
     * campaigns for a customer.
     * </pre>
     *
     * <code>EXPERIMENT_WEBPAGE_CRITERIA_PER_CUSTOMER = 19;</code>
     */
    public static final int EXPERIMENT_WEBPAGE_CRITERIA_PER_CUSTOMER_VALUE = 19;
    /**
     * <pre>
     * Number of combined audience criteria per ad group.
     * </pre>
     *
     * <code>COMBINED_AUDIENCE_CRITERIA_PER_AD_GROUP = 20;</code>
     */
    public static final int COMBINED_AUDIENCE_CRITERIA_PER_AD_GROUP_VALUE = 20;
    /**
     * <pre>
     * Limit for placement criterion type group in customer negative criterion.
     * </pre>
     *
     * <code>CUSTOMER_NEGATIVE_PLACEMENT_CRITERIA_PER_CUSTOMER = 21;</code>
     */
    public static final int CUSTOMER_NEGATIVE_PLACEMENT_CRITERIA_PER_CUSTOMER_VALUE = 21;
    /**
     * <pre>
     * Limit for YouTube TV channels in customer negative criterion.
     * </pre>
     *
     * <code>CUSTOMER_NEGATIVE_YOUTUBE_CHANNEL_CRITERIA_PER_CUSTOMER = 22;</code>
     */
    public static final int CUSTOMER_NEGATIVE_YOUTUBE_CHANNEL_CRITERIA_PER_CUSTOMER_VALUE = 22;
    /**
     * <pre>
     * Number of ENABLED criteria per ad group.
     * </pre>
     *
     * <code>CRITERIA_PER_AD_GROUP = 23;</code>
     */
    public static final int CRITERIA_PER_AD_GROUP_VALUE = 23;
    /**
     * <pre>
     * Number of listing group criteria per ad group.
     * </pre>
     *
     * <code>LISTING_GROUPS_PER_AD_GROUP = 24;</code>
     */
    public static final int LISTING_GROUPS_PER_AD_GROUP_VALUE = 24;
    /**
     * <pre>
     * Number of ENABLED explicitly shared budgets per customer.
     * </pre>
     *
     * <code>EXPLICITLY_SHARED_BUDGETS_PER_CUSTOMER = 25;</code>
     */
    public static final int EXPLICITLY_SHARED_BUDGETS_PER_CUSTOMER_VALUE = 25;
    /**
     * <pre>
     * Number of ENABLED implicitly shared budgets per customer.
     * </pre>
     *
     * <code>IMPLICITLY_SHARED_BUDGETS_PER_CUSTOMER = 26;</code>
     */
    public static final int IMPLICITLY_SHARED_BUDGETS_PER_CUSTOMER_VALUE = 26;
    /**
     * <pre>
     * Number of combined audience criteria per campaign.
     * </pre>
     *
     * <code>COMBINED_AUDIENCE_CRITERIA_PER_CAMPAIGN = 27;</code>
     */
    public static final int COMBINED_AUDIENCE_CRITERIA_PER_CAMPAIGN_VALUE = 27;
    /**
     * <pre>
     * Number of negative keywords per campaign.
     * </pre>
     *
     * <code>NEGATIVE_KEYWORDS_PER_CAMPAIGN = 28;</code>
     */
    public static final int NEGATIVE_KEYWORDS_PER_CAMPAIGN_VALUE = 28;
    /**
     * <pre>
     * Number of excluded campaign criteria in placement dimension, e.g.
     * placement, mobile application, YouTube channel, etc. The API criterion
     * type is NOT limited to placement only, and this does not include
     * exclusions at the ad group or other levels.
     * </pre>
     *
     * <code>NEGATIVE_PLACEMENTS_PER_CAMPAIGN = 29;</code>
     */
    public static final int NEGATIVE_PLACEMENTS_PER_CAMPAIGN_VALUE = 29;
    /**
     * <pre>
     * Number of geo targets per campaign.
     * </pre>
     *
     * <code>GEO_TARGETS_PER_CAMPAIGN = 30;</code>
     */
    public static final int GEO_TARGETS_PER_CAMPAIGN_VALUE = 30;
    /**
     * <pre>
     * Number of negative IP blocks per campaign.
     * </pre>
     *
     * <code>NEGATIVE_IP_BLOCKS_PER_CAMPAIGN = 32;</code>
     */
    public static final int NEGATIVE_IP_BLOCKS_PER_CAMPAIGN_VALUE = 32;
    /**
     * <pre>
     * Number of proximity targets per campaign.
     * </pre>
     *
     * <code>PROXIMITIES_PER_CAMPAIGN = 33;</code>
     */
    public static final int PROXIMITIES_PER_CAMPAIGN_VALUE = 33;
    /**
     * <pre>
     * Number of listing scopes per Shopping campaign.
     * </pre>
     *
     * <code>LISTING_SCOPES_PER_SHOPPING_CAMPAIGN = 34;</code>
     */
    public static final int LISTING_SCOPES_PER_SHOPPING_CAMPAIGN_VALUE = 34;
    /**
     * <pre>
     * Number of listing scopes per non-Shopping campaign.
     * </pre>
     *
     * <code>LISTING_SCOPES_PER_NON_SHOPPING_CAMPAIGN = 35;</code>
     */
    public static final int LISTING_SCOPES_PER_NON_SHOPPING_CAMPAIGN_VALUE = 35;
    /**
     * <pre>
     * Number of criteria per negative keyword shared set.
     * </pre>
     *
     * <code>NEGATIVE_KEYWORDS_PER_SHARED_SET = 36;</code>
     */
    public static final int NEGATIVE_KEYWORDS_PER_SHARED_SET_VALUE = 36;
    /**
     * <pre>
     * Number of criteria per negative placement shared set.
     * </pre>
     *
     * <code>NEGATIVE_PLACEMENTS_PER_SHARED_SET = 37;</code>
     */
    public static final int NEGATIVE_PLACEMENTS_PER_SHARED_SET_VALUE = 37;
    /**
     * <pre>
     * Default number of shared sets allowed per type per customer.
     * </pre>
     *
     * <code>SHARED_SETS_PER_CUSTOMER_FOR_TYPE_DEFAULT = 40;</code>
     */
    public static final int SHARED_SETS_PER_CUSTOMER_FOR_TYPE_DEFAULT_VALUE = 40;
    /**
     * <pre>
     * Number of shared sets of negative placement list type for a
     * manager customer.
     * </pre>
     *
     * <code>SHARED_SETS_PER_CUSTOMER_FOR_NEGATIVE_PLACEMENT_LIST_LOWER = 41;</code>
     */
    public static final int SHARED_SETS_PER_CUSTOMER_FOR_NEGATIVE_PLACEMENT_LIST_LOWER_VALUE = 41;
    /**
     * <pre>
     * Number of hotel_advance_booking_window bid modifiers per ad group.
     * </pre>
     *
     * <code>HOTEL_ADVANCE_BOOKING_WINDOW_BID_MODIFIERS_PER_AD_GROUP = 44;</code>
     */
    public static final int HOTEL_ADVANCE_BOOKING_WINDOW_BID_MODIFIERS_PER_AD_GROUP_VALUE = 44;
    /**
     * <pre>
     * Number of ENABLED shared bidding strategies per customer.
     * </pre>
     *
     * <code>BIDDING_STRATEGIES_PER_CUSTOMER = 45;</code>
     */
    public static final int BIDDING_STRATEGIES_PER_CUSTOMER_VALUE = 45;
    /**
     * <pre>
     * Number of open basic user lists per customer.
     * </pre>
     *
     * <code>BASIC_USER_LISTS_PER_CUSTOMER = 47;</code>
     */
    public static final int BASIC_USER_LISTS_PER_CUSTOMER_VALUE = 47;
    /**
     * <pre>
     * Number of open logical user lists per customer.
     * </pre>
     *
     * <code>LOGICAL_USER_LISTS_PER_CUSTOMER = 48;</code>
     */
    public static final int LOGICAL_USER_LISTS_PER_CUSTOMER_VALUE = 48;
    /**
     * <pre>
     * Number of open rule based user lists per customer.
     * </pre>
     *
     * <code>RULE_BASED_USER_LISTS_PER_CUSTOMER = 153;</code>
     */
    public static final int RULE_BASED_USER_LISTS_PER_CUSTOMER_VALUE = 153;
    /**
     * <pre>
     * Number of ENABLED and PAUSED ad group ads across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_AD_GROUP_ADS_PER_CUSTOMER = 53;</code>
     */
    public static final int BASE_AD_GROUP_ADS_PER_CUSTOMER_VALUE = 53;
    /**
     * <pre>
     * Number of ENABLED and PAUSED ad group ads across all experiment campaigns
     * for a customer.
     * </pre>
     *
     * <code>EXPERIMENT_AD_GROUP_ADS_PER_CUSTOMER = 54;</code>
     */
    public static final int EXPERIMENT_AD_GROUP_ADS_PER_CUSTOMER_VALUE = 54;
    /**
     * <pre>
     * Number of ENABLED and PAUSED ad group ads per campaign.
     * </pre>
     *
     * <code>AD_GROUP_ADS_PER_CAMPAIGN = 55;</code>
     */
    public static final int AD_GROUP_ADS_PER_CAMPAIGN_VALUE = 55;
    /**
     * <pre>
     * Number of ENABLED ads per ad group that do not fall in to other buckets.
     * Includes text and many other types.
     * </pre>
     *
     * <code>TEXT_AND_OTHER_ADS_PER_AD_GROUP = 56;</code>
     */
    public static final int TEXT_AND_OTHER_ADS_PER_AD_GROUP_VALUE = 56;
    /**
     * <pre>
     * Number of ENABLED image ads per ad group.
     * </pre>
     *
     * <code>IMAGE_ADS_PER_AD_GROUP = 57;</code>
     */
    public static final int IMAGE_ADS_PER_AD_GROUP_VALUE = 57;
    /**
     * <pre>
     * Number of ENABLED shopping smart ads per ad group.
     * </pre>
     *
     * <code>SHOPPING_SMART_ADS_PER_AD_GROUP = 58;</code>
     */
    public static final int SHOPPING_SMART_ADS_PER_AD_GROUP_VALUE = 58;
    /**
     * <pre>
     * Number of ENABLED responsive search ads per ad group.
     * </pre>
     *
     * <code>RESPONSIVE_SEARCH_ADS_PER_AD_GROUP = 59;</code>
     */
    public static final int RESPONSIVE_SEARCH_ADS_PER_AD_GROUP_VALUE = 59;
    /**
     * <pre>
     * Number of ENABLED app ads per ad group.
     * </pre>
     *
     * <code>APP_ADS_PER_AD_GROUP = 60;</code>
     */
    public static final int APP_ADS_PER_AD_GROUP_VALUE = 60;
    /**
     * <pre>
     * Number of ENABLED app engagement ads per ad group.
     * </pre>
     *
     * <code>APP_ENGAGEMENT_ADS_PER_AD_GROUP = 61;</code>
     */
    public static final int APP_ENGAGEMENT_ADS_PER_AD_GROUP_VALUE = 61;
    /**
     * <pre>
     * Number of ENABLED local ads per ad group.
     * </pre>
     *
     * <code>LOCAL_ADS_PER_AD_GROUP = 62;</code>
     */
    public static final int LOCAL_ADS_PER_AD_GROUP_VALUE = 62;
    /**
     * <pre>
     * Number of ENABLED video ads per ad group.
     * </pre>
     *
     * <code>VIDEO_ADS_PER_AD_GROUP = 63;</code>
     */
    public static final int VIDEO_ADS_PER_AD_GROUP_VALUE = 63;
    /**
     * <pre>
     * Number of ENABLED lead form CampaignAssets per campaign.
     * </pre>
     *
     * <code>LEAD_FORM_CAMPAIGN_ASSETS_PER_CAMPAIGN = 143;</code>
     */
    public static final int LEAD_FORM_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 143;
    /**
     * <pre>
     * Number of ENABLED promotion CustomerAssets per customer.
     * </pre>
     *
     * <code>PROMOTION_CUSTOMER_ASSETS_PER_CUSTOMER = 79;</code>
     */
    public static final int PROMOTION_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 79;
    /**
     * <pre>
     * Number of ENABLED promotion CampaignAssets per campaign.
     * </pre>
     *
     * <code>PROMOTION_CAMPAIGN_ASSETS_PER_CAMPAIGN = 80;</code>
     */
    public static final int PROMOTION_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 80;
    /**
     * <pre>
     * Number of ENABLED promotion AdGroupAssets per ad group.
     * </pre>
     *
     * <code>PROMOTION_AD_GROUP_ASSETS_PER_AD_GROUP = 81;</code>
     */
    public static final int PROMOTION_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 81;
    /**
     * <pre>
     * Number of ENABLED callout CustomerAssets per customer.
     * </pre>
     *
     * <code>CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER = 134;</code>
     */
    public static final int CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 134;
    /**
     * <pre>
     * Number of ENABLED callout CampaignAssets per campaign.
     * </pre>
     *
     * <code>CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN = 135;</code>
     */
    public static final int CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 135;
    /**
     * <pre>
     * Number of ENABLED callout AdGroupAssets per ad group.
     * </pre>
     *
     * <code>CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP = 136;</code>
     */
    public static final int CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 136;
    /**
     * <pre>
     * Number of ENABLED sitelink CustomerAssets per customer.
     * </pre>
     *
     * <code>SITELINK_CUSTOMER_ASSETS_PER_CUSTOMER = 137;</code>
     */
    public static final int SITELINK_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 137;
    /**
     * <pre>
     * Number of ENABLED sitelink CampaignAssets per campaign.
     * </pre>
     *
     * <code>SITELINK_CAMPAIGN_ASSETS_PER_CAMPAIGN = 138;</code>
     */
    public static final int SITELINK_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 138;
    /**
     * <pre>
     * Number of ENABLED sitelink AdGroupAssets per ad group.
     * </pre>
     *
     * <code>SITELINK_AD_GROUP_ASSETS_PER_AD_GROUP = 139;</code>
     */
    public static final int SITELINK_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 139;
    /**
     * <pre>
     * Number of ENABLED structured snippet CustomerAssets per customer.
     * </pre>
     *
     * <code>STRUCTURED_SNIPPET_CUSTOMER_ASSETS_PER_CUSTOMER = 140;</code>
     */
    public static final int STRUCTURED_SNIPPET_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 140;
    /**
     * <pre>
     * Number of ENABLED structured snippet CampaignAssets per campaign.
     * </pre>
     *
     * <code>STRUCTURED_SNIPPET_CAMPAIGN_ASSETS_PER_CAMPAIGN = 141;</code>
     */
    public static final int STRUCTURED_SNIPPET_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 141;
    /**
     * <pre>
     * Number of ENABLED structured snippet AdGroupAssets per ad group.
     * </pre>
     *
     * <code>STRUCTURED_SNIPPET_AD_GROUP_ASSETS_PER_AD_GROUP = 142;</code>
     */
    public static final int STRUCTURED_SNIPPET_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 142;
    /**
     * <pre>
     * Number of ENABLED mobile app CustomerAssets per customer.
     * </pre>
     *
     * <code>MOBILE_APP_CUSTOMER_ASSETS_PER_CUSTOMER = 144;</code>
     */
    public static final int MOBILE_APP_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 144;
    /**
     * <pre>
     * Number of ENABLED mobile app CampaignAssets per campaign.
     * </pre>
     *
     * <code>MOBILE_APP_CAMPAIGN_ASSETS_PER_CAMPAIGN = 145;</code>
     */
    public static final int MOBILE_APP_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 145;
    /**
     * <pre>
     * Number of ENABLED mobile app AdGroupAssets per ad group.
     * </pre>
     *
     * <code>MOBILE_APP_AD_GROUP_ASSETS_PER_AD_GROUP = 146;</code>
     */
    public static final int MOBILE_APP_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 146;
    /**
     * <pre>
     * Number of ENABLED hotel callout CustomerAssets per customer.
     * </pre>
     *
     * <code>HOTEL_CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER = 147;</code>
     */
    public static final int HOTEL_CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 147;
    /**
     * <pre>
     * Number of ENABLED hotel callout CampaignAssets per campaign.
     * </pre>
     *
     * <code>HOTEL_CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN = 148;</code>
     */
    public static final int HOTEL_CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 148;
    /**
     * <pre>
     * Number of ENABLED hotel callout AdGroupAssets per ad group.
     * </pre>
     *
     * <code>HOTEL_CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP = 149;</code>
     */
    public static final int HOTEL_CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 149;
    /**
     * <pre>
     * Number of ENABLED call CustomerAssets per customer.
     * </pre>
     *
     * <code>CALL_CUSTOMER_ASSETS_PER_CUSTOMER = 150;</code>
     */
    public static final int CALL_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 150;
    /**
     * <pre>
     * Number of ENABLED call CampaignAssets per campaign.
     * </pre>
     *
     * <code>CALL_CAMPAIGN_ASSETS_PER_CAMPAIGN = 151;</code>
     */
    public static final int CALL_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 151;
    /**
     * <pre>
     * Number of ENABLED call AdGroupAssets per ad group.
     * </pre>
     *
     * <code>CALL_AD_GROUP_ASSETS_PER_AD_GROUP = 152;</code>
     */
    public static final int CALL_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 152;
    /**
     * <pre>
     * Number of ENABLED price CustomerAssets per customer.
     * </pre>
     *
     * <code>PRICE_CUSTOMER_ASSETS_PER_CUSTOMER = 154;</code>
     */
    public static final int PRICE_CUSTOMER_ASSETS_PER_CUSTOMER_VALUE = 154;
    /**
     * <pre>
     * Number of ENABLED price CampaignAssets per campaign.
     * </pre>
     *
     * <code>PRICE_CAMPAIGN_ASSETS_PER_CAMPAIGN = 155;</code>
     */
    public static final int PRICE_CAMPAIGN_ASSETS_PER_CAMPAIGN_VALUE = 155;
    /**
     * <pre>
     * Number of ENABLED price AdGroupAssets per ad group.
     * </pre>
     *
     * <code>PRICE_AD_GROUP_ASSETS_PER_AD_GROUP = 156;</code>
     */
    public static final int PRICE_AD_GROUP_ASSETS_PER_AD_GROUP_VALUE = 156;
    /**
     * <pre>
     * Number of ENABLED page feed asset sets per customer.
     * </pre>
     *
     * <code>PAGE_FEED_ASSET_SETS_PER_CUSTOMER = 157;</code>
     */
    public static final int PAGE_FEED_ASSET_SETS_PER_CUSTOMER_VALUE = 157;
    /**
     * <pre>
     * Number of ENABLED dynamic education feed asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_EDUCATION_FEED_ASSET_SETS_PER_CUSTOMER = 158;</code>
     */
    public static final int DYNAMIC_EDUCATION_FEED_ASSET_SETS_PER_CUSTOMER_VALUE = 158;
    /**
     * <pre>
     * Number of ENABLED assets per page feed asset set.
     * </pre>
     *
     * <code>ASSETS_PER_PAGE_FEED_ASSET_SET = 159;</code>
     */
    public static final int ASSETS_PER_PAGE_FEED_ASSET_SET_VALUE = 159;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic education asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_EDUCATION_FEED_ASSET_SET = 160;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_EDUCATION_FEED_ASSET_SET_VALUE = 160;
    /**
     * <pre>
     * Number of ENABLED dynamic real estate asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_REAL_ESTATE_ASSET_SETS_PER_CUSTOMER = 161;</code>
     */
    public static final int DYNAMIC_REAL_ESTATE_ASSET_SETS_PER_CUSTOMER_VALUE = 161;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic real estate asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_REAL_ESTATE_ASSET_SET = 162;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_REAL_ESTATE_ASSET_SET_VALUE = 162;
    /**
     * <pre>
     * Number of ENABLED dynamic custom asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_CUSTOM_ASSET_SETS_PER_CUSTOMER = 163;</code>
     */
    public static final int DYNAMIC_CUSTOM_ASSET_SETS_PER_CUSTOMER_VALUE = 163;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic custom asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_CUSTOM_ASSET_SET = 164;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_CUSTOM_ASSET_SET_VALUE = 164;
    /**
     * <pre>
     * Number of ENABLED dynamic hotels and rentals asset sets per
     * customer.
     * </pre>
     *
     * <code>DYNAMIC_HOTELS_AND_RENTALS_ASSET_SETS_PER_CUSTOMER = 165;</code>
     */
    public static final int DYNAMIC_HOTELS_AND_RENTALS_ASSET_SETS_PER_CUSTOMER_VALUE = 165;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic hotels and rentals asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_HOTELS_AND_RENTALS_ASSET_SET = 166;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_HOTELS_AND_RENTALS_ASSET_SET_VALUE = 166;
    /**
     * <pre>
     * Number of ENABLED dynamic local asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_LOCAL_ASSET_SETS_PER_CUSTOMER = 167;</code>
     */
    public static final int DYNAMIC_LOCAL_ASSET_SETS_PER_CUSTOMER_VALUE = 167;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic local asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_LOCAL_ASSET_SET = 168;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_LOCAL_ASSET_SET_VALUE = 168;
    /**
     * <pre>
     * Number of ENABLED dynamic flights asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_FLIGHTS_ASSET_SETS_PER_CUSTOMER = 169;</code>
     */
    public static final int DYNAMIC_FLIGHTS_ASSET_SETS_PER_CUSTOMER_VALUE = 169;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic flights asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_FLIGHTS_ASSET_SET = 170;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_FLIGHTS_ASSET_SET_VALUE = 170;
    /**
     * <pre>
     * Number of ENABLED dynamic travel asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_TRAVEL_ASSET_SETS_PER_CUSTOMER = 171;</code>
     */
    public static final int DYNAMIC_TRAVEL_ASSET_SETS_PER_CUSTOMER_VALUE = 171;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic travel asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_TRAVEL_ASSET_SET = 172;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_TRAVEL_ASSET_SET_VALUE = 172;
    /**
     * <pre>
     * Number of ENABLED dynamic jobs asset sets per customer.
     * </pre>
     *
     * <code>DYNAMIC_JOBS_ASSET_SETS_PER_CUSTOMER = 173;</code>
     */
    public static final int DYNAMIC_JOBS_ASSET_SETS_PER_CUSTOMER_VALUE = 173;
    /**
     * <pre>
     * Number of ENABLED assets per dynamic jobs asset set.
     * </pre>
     *
     * <code>ASSETS_PER_DYNAMIC_JOBS_ASSET_SET = 174;</code>
     */
    public static final int ASSETS_PER_DYNAMIC_JOBS_ASSET_SET_VALUE = 174;
    /**
     * <pre>
     * Number of versions per ad.
     * </pre>
     *
     * <code>VERSIONS_PER_AD = 82;</code>
     */
    public static final int VERSIONS_PER_AD_VALUE = 82;
    /**
     * <pre>
     * Number of ENABLED user feeds per customer.
     * </pre>
     *
     * <code>USER_FEEDS_PER_CUSTOMER = 90;</code>
     */
    public static final int USER_FEEDS_PER_CUSTOMER_VALUE = 90;
    /**
     * <pre>
     * Number of ENABLED system feeds per customer.
     * </pre>
     *
     * <code>SYSTEM_FEEDS_PER_CUSTOMER = 91;</code>
     */
    public static final int SYSTEM_FEEDS_PER_CUSTOMER_VALUE = 91;
    /**
     * <pre>
     * Number of feed attributes per feed.
     * </pre>
     *
     * <code>FEED_ATTRIBUTES_PER_FEED = 92;</code>
     */
    public static final int FEED_ATTRIBUTES_PER_FEED_VALUE = 92;
    /**
     * <pre>
     * Number of ENABLED feed items per customer.
     * </pre>
     *
     * <code>FEED_ITEMS_PER_CUSTOMER = 94;</code>
     */
    public static final int FEED_ITEMS_PER_CUSTOMER_VALUE = 94;
    /**
     * <pre>
     * Number of ENABLED campaign feeds per customer.
     * </pre>
     *
     * <code>CAMPAIGN_FEEDS_PER_CUSTOMER = 95;</code>
     */
    public static final int CAMPAIGN_FEEDS_PER_CUSTOMER_VALUE = 95;
    /**
     * <pre>
     * Number of ENABLED campaign feeds across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_CAMPAIGN_FEEDS_PER_CUSTOMER = 96;</code>
     */
    public static final int BASE_CAMPAIGN_FEEDS_PER_CUSTOMER_VALUE = 96;
    /**
     * <pre>
     * Number of ENABLED campaign feeds across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_CAMPAIGN_FEEDS_PER_CUSTOMER = 109;</code>
     */
    public static final int EXPERIMENT_CAMPAIGN_FEEDS_PER_CUSTOMER_VALUE = 109;
    /**
     * <pre>
     * Number of ENABLED ad group feeds per customer.
     * </pre>
     *
     * <code>AD_GROUP_FEEDS_PER_CUSTOMER = 97;</code>
     */
    public static final int AD_GROUP_FEEDS_PER_CUSTOMER_VALUE = 97;
    /**
     * <pre>
     * Number of ENABLED ad group feeds across all base campaigns for a
     * customer.
     * </pre>
     *
     * <code>BASE_AD_GROUP_FEEDS_PER_CUSTOMER = 98;</code>
     */
    public static final int BASE_AD_GROUP_FEEDS_PER_CUSTOMER_VALUE = 98;
    /**
     * <pre>
     * Number of ENABLED ad group feeds across all experiment campaigns for a
     * customer.
     * </pre>
     *
     * <code>EXPERIMENT_AD_GROUP_FEEDS_PER_CUSTOMER = 110;</code>
     */
    public static final int EXPERIMENT_AD_GROUP_FEEDS_PER_CUSTOMER_VALUE = 110;
    /**
     * <pre>
     * Number of ENABLED ad group feeds per campaign.
     * </pre>
     *
     * <code>AD_GROUP_FEEDS_PER_CAMPAIGN = 99;</code>
     */
    public static final int AD_GROUP_FEEDS_PER_CAMPAIGN_VALUE = 99;
    /**
     * <pre>
     * Number of ENABLED feed items per customer.
     * </pre>
     *
     * <code>FEED_ITEM_SETS_PER_CUSTOMER = 100;</code>
     */
    public static final int FEED_ITEM_SETS_PER_CUSTOMER_VALUE = 100;
    /**
     * <pre>
     * Number of feed items per feed item set.
     * </pre>
     *
     * <code>FEED_ITEMS_PER_FEED_ITEM_SET = 101;</code>
     */
    public static final int FEED_ITEMS_PER_FEED_ITEM_SET_VALUE = 101;
    /**
     * <pre>
     * Number of ENABLED campaign experiments per customer.
     * </pre>
     *
     * <code>CAMPAIGN_EXPERIMENTS_PER_CUSTOMER = 112;</code>
     */
    public static final int CAMPAIGN_EXPERIMENTS_PER_CUSTOMER_VALUE = 112;
    /**
     * <pre>
     * Number of video experiment arms per experiment.
     * </pre>
     *
     * <code>EXPERIMENT_ARMS_PER_VIDEO_EXPERIMENT = 113;</code>
     */
    public static final int EXPERIMENT_ARMS_PER_VIDEO_EXPERIMENT_VALUE = 113;
    /**
     * <pre>
     * Number of owned labels per customer.
     * </pre>
     *
     * <code>OWNED_LABELS_PER_CUSTOMER = 115;</code>
     */
    public static final int OWNED_LABELS_PER_CUSTOMER_VALUE = 115;
    /**
     * <pre>
     * Number of applied labels per campaign.
     * </pre>
     *
     * <code>LABELS_PER_CAMPAIGN = 117;</code>
     */
    public static final int LABELS_PER_CAMPAIGN_VALUE = 117;
    /**
     * <pre>
     * Number of applied labels per ad group.
     * </pre>
     *
     * <code>LABELS_PER_AD_GROUP = 118;</code>
     */
    public static final int LABELS_PER_AD_GROUP_VALUE = 118;
    /**
     * <pre>
     * Number of applied labels per ad group ad.
     * </pre>
     *
     * <code>LABELS_PER_AD_GROUP_AD = 119;</code>
     */
    public static final int LABELS_PER_AD_GROUP_AD_VALUE = 119;
    /**
     * <pre>
     * Number of applied labels per ad group criterion.
     * </pre>
     *
     * <code>LABELS_PER_AD_GROUP_CRITERION = 120;</code>
     */
    public static final int LABELS_PER_AD_GROUP_CRITERION_VALUE = 120;
    /**
     * <pre>
     * Number of customers with a single label applied.
     * </pre>
     *
     * <code>TARGET_CUSTOMERS_PER_LABEL = 121;</code>
     */
    public static final int TARGET_CUSTOMERS_PER_LABEL_VALUE = 121;
    /**
     * <pre>
     * Number of ENABLED keyword plans per user per customer.
     * The limit is applied per &lt;user, customer&gt; pair because by default a plan
     * is private to a user of a customer. Each user of a customer has his or
     * her own independent limit.
     * </pre>
     *
     * <code>KEYWORD_PLANS_PER_USER_PER_CUSTOMER = 122;</code>
     */
    public static final int KEYWORD_PLANS_PER_USER_PER_CUSTOMER_VALUE = 122;
    /**
     * <pre>
     * Number of keyword plan ad group keywords per keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_AD_GROUP_KEYWORDS_PER_KEYWORD_PLAN = 123;</code>
     */
    public static final int KEYWORD_PLAN_AD_GROUP_KEYWORDS_PER_KEYWORD_PLAN_VALUE = 123;
    /**
     * <pre>
     * Number of keyword plan ad groups per keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_AD_GROUPS_PER_KEYWORD_PLAN = 124;</code>
     */
    public static final int KEYWORD_PLAN_AD_GROUPS_PER_KEYWORD_PLAN_VALUE = 124;
    /**
     * <pre>
     * Number of keyword plan negative keywords (both campaign and ad group) per
     * keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_NEGATIVE_KEYWORDS_PER_KEYWORD_PLAN = 125;</code>
     */
    public static final int KEYWORD_PLAN_NEGATIVE_KEYWORDS_PER_KEYWORD_PLAN_VALUE = 125;
    /**
     * <pre>
     * Number of keyword plan campaigns per keyword plan.
     * </pre>
     *
     * <code>KEYWORD_PLAN_CAMPAIGNS_PER_KEYWORD_PLAN = 126;</code>
     */
    public static final int KEYWORD_PLAN_CAMPAIGNS_PER_KEYWORD_PLAN_VALUE = 126;
    /**
     * <pre>
     * Number of ENABLED conversion actions per customer.
     * </pre>
     *
     * <code>CONVERSION_ACTIONS_PER_CUSTOMER = 128;</code>
     */
    public static final int CONVERSION_ACTIONS_PER_CUSTOMER_VALUE = 128;
    /**
     * <pre>
     * Number of operations in a single batch job.
     * </pre>
     *
     * <code>BATCH_JOB_OPERATIONS_PER_JOB = 130;</code>
     */
    public static final int BATCH_JOB_OPERATIONS_PER_JOB_VALUE = 130;
    /**
     * <pre>
     * Number of PENDING or ENABLED batch jobs per customer.
     * </pre>
     *
     * <code>BATCH_JOBS_PER_CUSTOMER = 131;</code>
     */
    public static final int BATCH_JOBS_PER_CUSTOMER_VALUE = 131;
    /**
     * <pre>
     * Number of hotel check-in date range bid modifiers per ad agroup.
     * </pre>
     *
     * <code>HOTEL_CHECK_IN_DATE_RANGE_BID_MODIFIERS_PER_AD_GROUP = 132;</code>
     */
    public static final int HOTEL_CHECK_IN_DATE_RANGE_BID_MODIFIERS_PER_AD_GROUP_VALUE = 132;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ResourceLimitType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ResourceLimitType forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return UNKNOWN;
        case 2: return CAMPAIGNS_PER_CUSTOMER;
        case 3: return BASE_CAMPAIGNS_PER_CUSTOMER;
        case 105: return EXPERIMENT_CAMPAIGNS_PER_CUSTOMER;
        case 4: return HOTEL_CAMPAIGNS_PER_CUSTOMER;
        case 5: return SMART_SHOPPING_CAMPAIGNS_PER_CUSTOMER;
        case 6: return AD_GROUPS_PER_CAMPAIGN;
        case 8: return AD_GROUPS_PER_SHOPPING_CAMPAIGN;
        case 9: return AD_GROUPS_PER_HOTEL_CAMPAIGN;
        case 10: return REPORTING_AD_GROUPS_PER_LOCAL_CAMPAIGN;
        case 11: return REPORTING_AD_GROUPS_PER_APP_CAMPAIGN;
        case 52: return MANAGED_AD_GROUPS_PER_SMART_CAMPAIGN;
        case 12: return AD_GROUP_CRITERIA_PER_CUSTOMER;
        case 13: return BASE_AD_GROUP_CRITERIA_PER_CUSTOMER;
        case 107: return EXPERIMENT_AD_GROUP_CRITERIA_PER_CUSTOMER;
        case 14: return AD_GROUP_CRITERIA_PER_CAMPAIGN;
        case 15: return CAMPAIGN_CRITERIA_PER_CUSTOMER;
        case 16: return BASE_CAMPAIGN_CRITERIA_PER_CUSTOMER;
        case 108: return EXPERIMENT_CAMPAIGN_CRITERIA_PER_CUSTOMER;
        case 17: return WEBPAGE_CRITERIA_PER_CUSTOMER;
        case 18: return BASE_WEBPAGE_CRITERIA_PER_CUSTOMER;
        case 19: return EXPERIMENT_WEBPAGE_CRITERIA_PER_CUSTOMER;
        case 20: return COMBINED_AUDIENCE_CRITERIA_PER_AD_GROUP;
        case 21: return CUSTOMER_NEGATIVE_PLACEMENT_CRITERIA_PER_CUSTOMER;
        case 22: return CUSTOMER_NEGATIVE_YOUTUBE_CHANNEL_CRITERIA_PER_CUSTOMER;
        case 23: return CRITERIA_PER_AD_GROUP;
        case 24: return LISTING_GROUPS_PER_AD_GROUP;
        case 25: return EXPLICITLY_SHARED_BUDGETS_PER_CUSTOMER;
        case 26: return IMPLICITLY_SHARED_BUDGETS_PER_CUSTOMER;
        case 27: return COMBINED_AUDIENCE_CRITERIA_PER_CAMPAIGN;
        case 28: return NEGATIVE_KEYWORDS_PER_CAMPAIGN;
        case 29: return NEGATIVE_PLACEMENTS_PER_CAMPAIGN;
        case 30: return GEO_TARGETS_PER_CAMPAIGN;
        case 32: return NEGATIVE_IP_BLOCKS_PER_CAMPAIGN;
        case 33: return PROXIMITIES_PER_CAMPAIGN;
        case 34: return LISTING_SCOPES_PER_SHOPPING_CAMPAIGN;
        case 35: return LISTING_SCOPES_PER_NON_SHOPPING_CAMPAIGN;
        case 36: return NEGATIVE_KEYWORDS_PER_SHARED_SET;
        case 37: return NEGATIVE_PLACEMENTS_PER_SHARED_SET;
        case 40: return SHARED_SETS_PER_CUSTOMER_FOR_TYPE_DEFAULT;
        case 41: return SHARED_SETS_PER_CUSTOMER_FOR_NEGATIVE_PLACEMENT_LIST_LOWER;
        case 44: return HOTEL_ADVANCE_BOOKING_WINDOW_BID_MODIFIERS_PER_AD_GROUP;
        case 45: return BIDDING_STRATEGIES_PER_CUSTOMER;
        case 47: return BASIC_USER_LISTS_PER_CUSTOMER;
        case 48: return LOGICAL_USER_LISTS_PER_CUSTOMER;
        case 153: return RULE_BASED_USER_LISTS_PER_CUSTOMER;
        case 53: return BASE_AD_GROUP_ADS_PER_CUSTOMER;
        case 54: return EXPERIMENT_AD_GROUP_ADS_PER_CUSTOMER;
        case 55: return AD_GROUP_ADS_PER_CAMPAIGN;
        case 56: return TEXT_AND_OTHER_ADS_PER_AD_GROUP;
        case 57: return IMAGE_ADS_PER_AD_GROUP;
        case 58: return SHOPPING_SMART_ADS_PER_AD_GROUP;
        case 59: return RESPONSIVE_SEARCH_ADS_PER_AD_GROUP;
        case 60: return APP_ADS_PER_AD_GROUP;
        case 61: return APP_ENGAGEMENT_ADS_PER_AD_GROUP;
        case 62: return LOCAL_ADS_PER_AD_GROUP;
        case 63: return VIDEO_ADS_PER_AD_GROUP;
        case 143: return LEAD_FORM_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 79: return PROMOTION_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 80: return PROMOTION_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 81: return PROMOTION_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 134: return CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 135: return CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 136: return CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 137: return SITELINK_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 138: return SITELINK_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 139: return SITELINK_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 140: return STRUCTURED_SNIPPET_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 141: return STRUCTURED_SNIPPET_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 142: return STRUCTURED_SNIPPET_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 144: return MOBILE_APP_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 145: return MOBILE_APP_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 146: return MOBILE_APP_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 147: return HOTEL_CALLOUT_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 148: return HOTEL_CALLOUT_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 149: return HOTEL_CALLOUT_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 150: return CALL_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 151: return CALL_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 152: return CALL_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 154: return PRICE_CUSTOMER_ASSETS_PER_CUSTOMER;
        case 155: return PRICE_CAMPAIGN_ASSETS_PER_CAMPAIGN;
        case 156: return PRICE_AD_GROUP_ASSETS_PER_AD_GROUP;
        case 157: return PAGE_FEED_ASSET_SETS_PER_CUSTOMER;
        case 158: return DYNAMIC_EDUCATION_FEED_ASSET_SETS_PER_CUSTOMER;
        case 159: return ASSETS_PER_PAGE_FEED_ASSET_SET;
        case 160: return ASSETS_PER_DYNAMIC_EDUCATION_FEED_ASSET_SET;
        case 161: return DYNAMIC_REAL_ESTATE_ASSET_SETS_PER_CUSTOMER;
        case 162: return ASSETS_PER_DYNAMIC_REAL_ESTATE_ASSET_SET;
        case 163: return DYNAMIC_CUSTOM_ASSET_SETS_PER_CUSTOMER;
        case 164: return ASSETS_PER_DYNAMIC_CUSTOM_ASSET_SET;
        case 165: return DYNAMIC_HOTELS_AND_RENTALS_ASSET_SETS_PER_CUSTOMER;
        case 166: return ASSETS_PER_DYNAMIC_HOTELS_AND_RENTALS_ASSET_SET;
        case 167: return DYNAMIC_LOCAL_ASSET_SETS_PER_CUSTOMER;
        case 168: return ASSETS_PER_DYNAMIC_LOCAL_ASSET_SET;
        case 169: return DYNAMIC_FLIGHTS_ASSET_SETS_PER_CUSTOMER;
        case 170: return ASSETS_PER_DYNAMIC_FLIGHTS_ASSET_SET;
        case 171: return DYNAMIC_TRAVEL_ASSET_SETS_PER_CUSTOMER;
        case 172: return ASSETS_PER_DYNAMIC_TRAVEL_ASSET_SET;
        case 173: return DYNAMIC_JOBS_ASSET_SETS_PER_CUSTOMER;
        case 174: return ASSETS_PER_DYNAMIC_JOBS_ASSET_SET;
        case 82: return VERSIONS_PER_AD;
        case 90: return USER_FEEDS_PER_CUSTOMER;
        case 91: return SYSTEM_FEEDS_PER_CUSTOMER;
        case 92: return FEED_ATTRIBUTES_PER_FEED;
        case 94: return FEED_ITEMS_PER_CUSTOMER;
        case 95: return CAMPAIGN_FEEDS_PER_CUSTOMER;
        case 96: return BASE_CAMPAIGN_FEEDS_PER_CUSTOMER;
        case 109: return EXPERIMENT_CAMPAIGN_FEEDS_PER_CUSTOMER;
        case 97: return AD_GROUP_FEEDS_PER_CUSTOMER;
        case 98: return BASE_AD_GROUP_FEEDS_PER_CUSTOMER;
        case 110: return EXPERIMENT_AD_GROUP_FEEDS_PER_CUSTOMER;
        case 99: return AD_GROUP_FEEDS_PER_CAMPAIGN;
        case 100: return FEED_ITEM_SETS_PER_CUSTOMER;
        case 101: return FEED_ITEMS_PER_FEED_ITEM_SET;
        case 112: return CAMPAIGN_EXPERIMENTS_PER_CUSTOMER;
        case 113: return EXPERIMENT_ARMS_PER_VIDEO_EXPERIMENT;
        case 115: return OWNED_LABELS_PER_CUSTOMER;
        case 117: return LABELS_PER_CAMPAIGN;
        case 118: return LABELS_PER_AD_GROUP;
        case 119: return LABELS_PER_AD_GROUP_AD;
        case 120: return LABELS_PER_AD_GROUP_CRITERION;
        case 121: return TARGET_CUSTOMERS_PER_LABEL;
        case 122: return KEYWORD_PLANS_PER_USER_PER_CUSTOMER;
        case 123: return KEYWORD_PLAN_AD_GROUP_KEYWORDS_PER_KEYWORD_PLAN;
        case 124: return KEYWORD_PLAN_AD_GROUPS_PER_KEYWORD_PLAN;
        case 125: return KEYWORD_PLAN_NEGATIVE_KEYWORDS_PER_KEYWORD_PLAN;
        case 126: return KEYWORD_PLAN_CAMPAIGNS_PER_KEYWORD_PLAN;
        case 128: return CONVERSION_ACTIONS_PER_CUSTOMER;
        case 130: return BATCH_JOB_OPERATIONS_PER_JOB;
        case 131: return BATCH_JOBS_PER_CUSTOMER;
        case 132: return HOTEL_CHECK_IN_DATE_RANGE_BID_MODIFIERS_PER_AD_GROUP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ResourceLimitType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ResourceLimitType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ResourceLimitType>() {
            public ResourceLimitType findValueByNumber(int number) {
              return ResourceLimitType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final ResourceLimitType[] VALUES = values();

    public static ResourceLimitType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ResourceLimitType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.googleads.v11.enums.ResourceLimitTypeEnum.ResourceLimitType)
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum)) {
      return super.equals(obj);
    }
    com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum other = (com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum) obj;

    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Container for enum describing possible resource limit types.
   * </pre>
   *
   * Protobuf type {@code google.ads.googleads.v11.enums.ResourceLimitTypeEnum}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.ads.googleads.v11.enums.ResourceLimitTypeEnum)
      com.google.ads.googleads.v11.enums.ResourceLimitTypeEnumOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.ads.googleads.v11.enums.ResourceLimitTypeProto.internal_static_google_ads_googleads_v11_enums_ResourceLimitTypeEnum_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.googleads.v11.enums.ResourceLimitTypeProto.internal_static_google_ads_googleads_v11_enums_ResourceLimitTypeEnum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.class, com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.Builder.class);
    }

    // Construct using com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.ads.googleads.v11.enums.ResourceLimitTypeProto.internal_static_google_ads_googleads_v11_enums_ResourceLimitTypeEnum_descriptor;
    }

    @java.lang.Override
    public com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum getDefaultInstanceForType() {
      return com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum build() {
      com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum buildPartial() {
      com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum result = new com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum(this);
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum) {
        return mergeFrom((com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum other) {
      if (other == com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum.getDefaultInstance()) return this;
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.ads.googleads.v11.enums.ResourceLimitTypeEnum)
  }

  // @@protoc_insertion_point(class_scope:google.ads.googleads.v11.enums.ResourceLimitTypeEnum)
  private static final com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum();
  }

  public static com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ResourceLimitTypeEnum>
      PARSER = new com.google.protobuf.AbstractParser<ResourceLimitTypeEnum>() {
    @java.lang.Override
    public ResourceLimitTypeEnum parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ResourceLimitTypeEnum(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ResourceLimitTypeEnum> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ResourceLimitTypeEnum> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.ads.googleads.v11.enums.ResourceLimitTypeEnum getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

