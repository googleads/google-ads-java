// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/googleads/v16/errors/conversion_upload_error.proto

// Protobuf Java Version: 3.25.3
package com.google.ads.googleads.v16.errors;

/**
 * <pre>
 * Container for enum describing possible conversion upload errors.
 * </pre>
 *
 * Protobuf type {@code google.ads.googleads.v16.errors.ConversionUploadErrorEnum}
 */
public final class ConversionUploadErrorEnum extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.ads.googleads.v16.errors.ConversionUploadErrorEnum)
    ConversionUploadErrorEnumOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConversionUploadErrorEnum.newBuilder() to construct.
  private ConversionUploadErrorEnum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConversionUploadErrorEnum() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConversionUploadErrorEnum();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.ads.googleads.v16.errors.ConversionUploadErrorProto.internal_static_google_ads_googleads_v16_errors_ConversionUploadErrorEnum_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.ads.googleads.v16.errors.ConversionUploadErrorProto.internal_static_google_ads_googleads_v16_errors_ConversionUploadErrorEnum_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.class, com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.Builder.class);
  }

  /**
   * <pre>
   * Enum describing possible conversion upload errors.
   * </pre>
   *
   * Protobuf enum {@code google.ads.googleads.v16.errors.ConversionUploadErrorEnum.ConversionUploadError}
   */
  public enum ConversionUploadError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Enum unspecified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * Used for return value only. Represents value unknown in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    UNKNOWN(1),
    /**
     * <pre>
     * Upload fewer than 2001 events in a single request.
     * </pre>
     *
     * <code>TOO_MANY_CONVERSIONS_IN_REQUEST = 2;</code>
     */
    TOO_MANY_CONVERSIONS_IN_REQUEST(2),
    /**
     * <pre>
     * The imported gclid could not be decoded. Make sure you have not modified
     * the click IDs.
     * </pre>
     *
     * <code>UNPARSEABLE_GCLID = 3;</code>
     */
    UNPARSEABLE_GCLID(3),
    /**
     * <pre>
     * The imported event has a `conversion_date_time` that precedes the click.
     * Make sure your `conversion_date_time` is correct and try again.
     * </pre>
     *
     * <code>CONVERSION_PRECEDES_EVENT = 42;</code>
     */
    CONVERSION_PRECEDES_EVENT(42),
    /**
     * <pre>
     * The imported event can't be recorded because its click occurred before
     * this conversion's click-through window. Make sure you import the most
     * recent data.
     * </pre>
     *
     * <code>EXPIRED_EVENT = 43;</code>
     */
    EXPIRED_EVENT(43),
    /**
     * <pre>
     * The click associated with the given identifier or iOS URL parameter
     * occurred less than 6 hours ago. Retry after 6 hours have passed.
     * </pre>
     *
     * <code>TOO_RECENT_EVENT = 44;</code>
     */
    TOO_RECENT_EVENT(44),
    /**
     * <pre>
     * The imported event could not be attributed to a click. This may be
     * because the event did not come from a Google Ads campaign.
     * </pre>
     *
     * <code>EVENT_NOT_FOUND = 45;</code>
     */
    EVENT_NOT_FOUND(45),
    /**
     * <pre>
     * The click ID or call is associated with an Ads account you don't have
     * access to. Make sure you import conversions for accounts managed by your
     * manager account.
     * </pre>
     *
     * <code>UNAUTHORIZED_CUSTOMER = 8;</code>
     */
    UNAUTHORIZED_CUSTOMER(8),
    /**
     * <pre>
     * Can't import events to a conversion action that was just created. Try
     * importing again in 6 hours.
     * </pre>
     *
     * <code>TOO_RECENT_CONVERSION_ACTION = 10;</code>
     */
    TOO_RECENT_CONVERSION_ACTION(10),
    /**
     * <pre>
     * At the time of the click, conversion tracking was not enabled in the
     * effective conversion account of the click's Google Ads account.
     * </pre>
     *
     * <code>CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME = 11;</code>
     */
    CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME(11),
    /**
     * <pre>
     * The imported event includes external attribution data, but the conversion
     * action isn't set up to use an external attribution model. Make sure the
     * conversion action is correctly configured and try again.
     * </pre>
     *
     * <code>EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = 12;</code>
     */
    EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION(12),
    /**
     * <pre>
     * The conversion action is set up to use an external attribution model, but
     * the imported event is missing data. Make sure imported events include the
     * external attribution credit and all necessary fields.
     * </pre>
     *
     * <code>EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = 13;</code>
     */
    EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION(13),
    /**
     * <pre>
     * Order IDs can't be used for a conversion measured with an external
     * attribution model. Make sure the conversion is correctly configured and
     * imported events include only necessary data and try again.
     * </pre>
     *
     * <code>ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = 14;</code>
     */
    ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION(14),
    /**
     * <pre>
     * The imported event includes an order ID that was previously recorded, so
     * the event was not processed.
     * </pre>
     *
     * <code>ORDER_ID_ALREADY_IN_USE = 15;</code>
     */
    ORDER_ID_ALREADY_IN_USE(15),
    /**
     * <pre>
     * Imported events include multiple conversions with the same order ID and
     * were not processed.  Make sure order IDs are unique and try again.
     * </pre>
     *
     * <code>DUPLICATE_ORDER_ID = 16;</code>
     */
    DUPLICATE_ORDER_ID(16),
    /**
     * <pre>
     * Can't import calls that occurred less than 6 hours ago. Try uploading
     * again in 6 hours.
     * </pre>
     *
     * <code>TOO_RECENT_CALL = 17;</code>
     */
    TOO_RECENT_CALL(17),
    /**
     * <pre>
     * The call can't be recorded because it occurred before this conversion
     * action's lookback window. Make sure your import is configured to get the
     * most recent data.
     * </pre>
     *
     * <code>EXPIRED_CALL = 18;</code>
     */
    EXPIRED_CALL(18),
    /**
     * <pre>
     * The call or click leading to the imported event can't be found. Make sure
     * your data source is set up to include correct identifiers.
     * </pre>
     *
     * <code>CALL_NOT_FOUND = 19;</code>
     */
    CALL_NOT_FOUND(19),
    /**
     * <pre>
     * The call has a `conversion_date_time` that precedes the associated click.
     * Make sure your `conversion_date_time` is correct.
     * </pre>
     *
     * <code>CONVERSION_PRECEDES_CALL = 20;</code>
     */
    CONVERSION_PRECEDES_CALL(20),
    /**
     * <pre>
     * At the time of the imported call, conversion tracking was not enabled in
     * the effective conversion account of the click's Google Ads account.
     * </pre>
     *
     * <code>CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME = 21;</code>
     */
    CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME(21),
    /**
     * <pre>
     * Make sure phone numbers are formatted as E.164 (+16502531234),
     * International (+64 3-331 6005), or US national number (6502531234).
     * </pre>
     *
     * <code>UNPARSEABLE_CALLERS_PHONE_NUMBER = 22;</code>
     */
    UNPARSEABLE_CALLERS_PHONE_NUMBER(22),
    /**
     * <pre>
     * The imported event has the same click and `conversion_date_time` as an
     * existing conversion. Use a unique `conversion_date_time` or order ID for
     * each unique event and try again.
     * </pre>
     *
     * <code>CLICK_CONVERSION_ALREADY_EXISTS = 23;</code>
     */
    CLICK_CONVERSION_ALREADY_EXISTS(23),
    /**
     * <pre>
     * The imported call has the same `conversion_date_time` as an existing
     * conversion. Make sure your `conversion_date_time` correctly configured
     * and try again.
     * </pre>
     *
     * <code>CALL_CONVERSION_ALREADY_EXISTS = 24;</code>
     */
    CALL_CONVERSION_ALREADY_EXISTS(24),
    /**
     * <pre>
     * Multiple events have the same click and `conversion_date_time`. Make sure
     * your `conversion_date_time` is correctly configured and try again.
     * </pre>
     *
     * <code>DUPLICATE_CLICK_CONVERSION_IN_REQUEST = 25;</code>
     */
    DUPLICATE_CLICK_CONVERSION_IN_REQUEST(25),
    /**
     * <pre>
     * Multiple events have the same call and `conversion_date_time`. Make sure
     * your `conversion_date_time` is correctly configured and try again.
     * </pre>
     *
     * <code>DUPLICATE_CALL_CONVERSION_IN_REQUEST = 26;</code>
     */
    DUPLICATE_CALL_CONVERSION_IN_REQUEST(26),
    /**
     * <pre>
     * Enable the custom variable in your conversion settings and try again.
     * </pre>
     *
     * <code>CUSTOM_VARIABLE_NOT_ENABLED = 28;</code>
     */
    CUSTOM_VARIABLE_NOT_ENABLED(28),
    /**
     * <pre>
     * Can't import events with custom variables containing
     * personally-identifiable information (PII). Remove these variables and try
     * again.
     * </pre>
     *
     * <code>CUSTOM_VARIABLE_VALUE_CONTAINS_PII = 29;</code>
     */
    CUSTOM_VARIABLE_VALUE_CONTAINS_PII(29),
    /**
     * <pre>
     * The click from the imported event is associated with a different Google
     * Ads account. Make sure you're importing to the correct account.
     * </pre>
     *
     * <code>INVALID_CUSTOMER_FOR_CLICK = 30;</code>
     */
    INVALID_CUSTOMER_FOR_CLICK(30),
    /**
     * <pre>
     * The click from the call is associated with a different Google Ads
     * account. Make sure you're importing to the correct account. Query
     * conversion_tracking_setting.google_ads_conversion_customer on Customer to
     * identify the correct account.
     * </pre>
     *
     * <code>INVALID_CUSTOMER_FOR_CALL = 31;</code>
     */
    INVALID_CUSTOMER_FOR_CALL(31),
    /**
     * <pre>
     * The connversion can't be imported because the conversion source didn't
     * comply with Apple App Transparency Tracking (ATT) policies or because the
     * customer didn't consent to tracking.
     * </pre>
     *
     * <code>CONVERSION_NOT_COMPLIANT_WITH_ATT_POLICY = 32;</code>
     */
    CONVERSION_NOT_COMPLIANT_WITH_ATT_POLICY(32),
    /**
     * <pre>
     * The email address or phone number for this event can't be matched to a
     * click. This may be because it didn't come from a Google Ads campaign, and
     * you can safely ignore this warning. If this includes more imported events
     * than is expected, you may need to check your setup.
     * </pre>
     *
     * <code>CLICK_NOT_FOUND = 33;</code>
     */
    CLICK_NOT_FOUND(33),
    /**
     * <pre>
     * Make sure you hash user provided data using SHA-256 and ensure you are
     * normalizing according to the guidelines.
     * </pre>
     *
     * <code>INVALID_USER_IDENTIFIER = 34;</code>
     */
    INVALID_USER_IDENTIFIER(34),
    /**
     * <pre>
     * User provided data can't be used with external attribution models. Use a
     * different attribution model or omit user identifiers and try again.
     * </pre>
     *
     * <code>EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_NOT_PERMITTED_WITH_USER_IDENTIFIER = 35;</code>
     */
    EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_NOT_PERMITTED_WITH_USER_IDENTIFIER(35),
    /**
     * <pre>
     * The provided user identifiers are not supported. Use only hashed email
     * or phone number and try again.
     * </pre>
     *
     * <code>UNSUPPORTED_USER_IDENTIFIER = 36;</code>
     */
    UNSUPPORTED_USER_IDENTIFIER(36),
    /**
     * <pre>
     * Can't use both gbraid and wbraid parameters. Use only 1 and try again.
     * </pre>
     *
     * <code>GBRAID_WBRAID_BOTH_SET = 38;</code>
     */
    GBRAID_WBRAID_BOTH_SET(38),
    /**
     * <pre>
     * Can't parse event import data. Check if your wbraid parameter was
     * not modified and try again.
     * </pre>
     *
     * <code>UNPARSEABLE_WBRAID = 39;</code>
     */
    UNPARSEABLE_WBRAID(39),
    /**
     * <pre>
     * Can't parse event import data. Check if your gbraid parameter was
     * not modified and try again.
     * </pre>
     *
     * <code>UNPARSEABLE_GBRAID = 40;</code>
     */
    UNPARSEABLE_GBRAID(40),
    /**
     * <pre>
     * Conversion actions that use one-per-click counting can't be used with
     * gbraid or wbraid parameters.
     * </pre>
     *
     * <code>ONE_PER_CLICK_CONVERSION_ACTION_NOT_PERMITTED_WITH_BRAID = 46;</code>
     */
    ONE_PER_CLICK_CONVERSION_ACTION_NOT_PERMITTED_WITH_BRAID(46),
    /**
     * <pre>
     * Enhanced conversions can't be used for this account because of Google
     * customer data policies. Contact your Google representative.
     * </pre>
     *
     * <code>CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCED_CONVERSIONS = 47;</code>
     */
    CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCED_CONVERSIONS(47),
    /**
     * <pre>
     * Make sure you agree to the customer data processing terms in conversion
     * settings and try again. You can check your setting by querying
     * conversion_tracking_setting.accepted_customer_data_terms on Customer.
     * </pre>
     *
     * <code>CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS = 48;</code>
     */
    CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS(48),
    /**
     * <pre>
     * Can't import events with order IDs containing personally-identifiable
     * information (PII).
     * </pre>
     *
     * <code>ORDER_ID_CONTAINS_PII = 49;</code>
     */
    ORDER_ID_CONTAINS_PII(49),
    /**
     * <pre>
     * Make sure you've turned on enhanced conversions for leads in conversion
     * settings and try again. You can check your setting by querying
     * conversion_tracking_setting.enhanced_conversions_for_leads_enabled on
     * Customer.
     * </pre>
     *
     * <code>CUSTOMER_NOT_ENABLED_ENHANCED_CONVERSIONS_FOR_LEADS = 50;</code>
     */
    CUSTOMER_NOT_ENABLED_ENHANCED_CONVERSIONS_FOR_LEADS(50),
    /**
     * <pre>
     * The provided job id in the request is not within the allowed range. A job
     * ID must be a positive integer in the range [1, 2^31).
     * </pre>
     *
     * <code>INVALID_JOB_ID = 52;</code>
     */
    INVALID_JOB_ID(52),
    /**
     * <pre>
     * The conversion action specified in the upload request cannot be found.
     * Make sure it's available in this account.
     * </pre>
     *
     * <code>NO_CONVERSION_ACTION_FOUND = 53;</code>
     */
    NO_CONVERSION_ACTION_FOUND(53),
    /**
     * <pre>
     * The conversion action specified in the upload request isn't set up for
     * uploading conversions.
     * </pre>
     *
     * <code>INVALID_CONVERSION_ACTION_TYPE = 54;</code>
     */
    INVALID_CONVERSION_ACTION_TYPE(54),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Enum unspecified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Used for return value only. Represents value unknown in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    public static final int UNKNOWN_VALUE = 1;
    /**
     * <pre>
     * Upload fewer than 2001 events in a single request.
     * </pre>
     *
     * <code>TOO_MANY_CONVERSIONS_IN_REQUEST = 2;</code>
     */
    public static final int TOO_MANY_CONVERSIONS_IN_REQUEST_VALUE = 2;
    /**
     * <pre>
     * The imported gclid could not be decoded. Make sure you have not modified
     * the click IDs.
     * </pre>
     *
     * <code>UNPARSEABLE_GCLID = 3;</code>
     */
    public static final int UNPARSEABLE_GCLID_VALUE = 3;
    /**
     * <pre>
     * The imported event has a `conversion_date_time` that precedes the click.
     * Make sure your `conversion_date_time` is correct and try again.
     * </pre>
     *
     * <code>CONVERSION_PRECEDES_EVENT = 42;</code>
     */
    public static final int CONVERSION_PRECEDES_EVENT_VALUE = 42;
    /**
     * <pre>
     * The imported event can't be recorded because its click occurred before
     * this conversion's click-through window. Make sure you import the most
     * recent data.
     * </pre>
     *
     * <code>EXPIRED_EVENT = 43;</code>
     */
    public static final int EXPIRED_EVENT_VALUE = 43;
    /**
     * <pre>
     * The click associated with the given identifier or iOS URL parameter
     * occurred less than 6 hours ago. Retry after 6 hours have passed.
     * </pre>
     *
     * <code>TOO_RECENT_EVENT = 44;</code>
     */
    public static final int TOO_RECENT_EVENT_VALUE = 44;
    /**
     * <pre>
     * The imported event could not be attributed to a click. This may be
     * because the event did not come from a Google Ads campaign.
     * </pre>
     *
     * <code>EVENT_NOT_FOUND = 45;</code>
     */
    public static final int EVENT_NOT_FOUND_VALUE = 45;
    /**
     * <pre>
     * The click ID or call is associated with an Ads account you don't have
     * access to. Make sure you import conversions for accounts managed by your
     * manager account.
     * </pre>
     *
     * <code>UNAUTHORIZED_CUSTOMER = 8;</code>
     */
    public static final int UNAUTHORIZED_CUSTOMER_VALUE = 8;
    /**
     * <pre>
     * Can't import events to a conversion action that was just created. Try
     * importing again in 6 hours.
     * </pre>
     *
     * <code>TOO_RECENT_CONVERSION_ACTION = 10;</code>
     */
    public static final int TOO_RECENT_CONVERSION_ACTION_VALUE = 10;
    /**
     * <pre>
     * At the time of the click, conversion tracking was not enabled in the
     * effective conversion account of the click's Google Ads account.
     * </pre>
     *
     * <code>CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME = 11;</code>
     */
    public static final int CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME_VALUE = 11;
    /**
     * <pre>
     * The imported event includes external attribution data, but the conversion
     * action isn't set up to use an external attribution model. Make sure the
     * conversion action is correctly configured and try again.
     * </pre>
     *
     * <code>EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = 12;</code>
     */
    public static final int EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_VALUE = 12;
    /**
     * <pre>
     * The conversion action is set up to use an external attribution model, but
     * the imported event is missing data. Make sure imported events include the
     * external attribution credit and all necessary fields.
     * </pre>
     *
     * <code>EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = 13;</code>
     */
    public static final int EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_VALUE = 13;
    /**
     * <pre>
     * Order IDs can't be used for a conversion measured with an external
     * attribution model. Make sure the conversion is correctly configured and
     * imported events include only necessary data and try again.
     * </pre>
     *
     * <code>ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = 14;</code>
     */
    public static final int ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_VALUE = 14;
    /**
     * <pre>
     * The imported event includes an order ID that was previously recorded, so
     * the event was not processed.
     * </pre>
     *
     * <code>ORDER_ID_ALREADY_IN_USE = 15;</code>
     */
    public static final int ORDER_ID_ALREADY_IN_USE_VALUE = 15;
    /**
     * <pre>
     * Imported events include multiple conversions with the same order ID and
     * were not processed.  Make sure order IDs are unique and try again.
     * </pre>
     *
     * <code>DUPLICATE_ORDER_ID = 16;</code>
     */
    public static final int DUPLICATE_ORDER_ID_VALUE = 16;
    /**
     * <pre>
     * Can't import calls that occurred less than 6 hours ago. Try uploading
     * again in 6 hours.
     * </pre>
     *
     * <code>TOO_RECENT_CALL = 17;</code>
     */
    public static final int TOO_RECENT_CALL_VALUE = 17;
    /**
     * <pre>
     * The call can't be recorded because it occurred before this conversion
     * action's lookback window. Make sure your import is configured to get the
     * most recent data.
     * </pre>
     *
     * <code>EXPIRED_CALL = 18;</code>
     */
    public static final int EXPIRED_CALL_VALUE = 18;
    /**
     * <pre>
     * The call or click leading to the imported event can't be found. Make sure
     * your data source is set up to include correct identifiers.
     * </pre>
     *
     * <code>CALL_NOT_FOUND = 19;</code>
     */
    public static final int CALL_NOT_FOUND_VALUE = 19;
    /**
     * <pre>
     * The call has a `conversion_date_time` that precedes the associated click.
     * Make sure your `conversion_date_time` is correct.
     * </pre>
     *
     * <code>CONVERSION_PRECEDES_CALL = 20;</code>
     */
    public static final int CONVERSION_PRECEDES_CALL_VALUE = 20;
    /**
     * <pre>
     * At the time of the imported call, conversion tracking was not enabled in
     * the effective conversion account of the click's Google Ads account.
     * </pre>
     *
     * <code>CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME = 21;</code>
     */
    public static final int CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME_VALUE = 21;
    /**
     * <pre>
     * Make sure phone numbers are formatted as E.164 (+16502531234),
     * International (+64 3-331 6005), or US national number (6502531234).
     * </pre>
     *
     * <code>UNPARSEABLE_CALLERS_PHONE_NUMBER = 22;</code>
     */
    public static final int UNPARSEABLE_CALLERS_PHONE_NUMBER_VALUE = 22;
    /**
     * <pre>
     * The imported event has the same click and `conversion_date_time` as an
     * existing conversion. Use a unique `conversion_date_time` or order ID for
     * each unique event and try again.
     * </pre>
     *
     * <code>CLICK_CONVERSION_ALREADY_EXISTS = 23;</code>
     */
    public static final int CLICK_CONVERSION_ALREADY_EXISTS_VALUE = 23;
    /**
     * <pre>
     * The imported call has the same `conversion_date_time` as an existing
     * conversion. Make sure your `conversion_date_time` correctly configured
     * and try again.
     * </pre>
     *
     * <code>CALL_CONVERSION_ALREADY_EXISTS = 24;</code>
     */
    public static final int CALL_CONVERSION_ALREADY_EXISTS_VALUE = 24;
    /**
     * <pre>
     * Multiple events have the same click and `conversion_date_time`. Make sure
     * your `conversion_date_time` is correctly configured and try again.
     * </pre>
     *
     * <code>DUPLICATE_CLICK_CONVERSION_IN_REQUEST = 25;</code>
     */
    public static final int DUPLICATE_CLICK_CONVERSION_IN_REQUEST_VALUE = 25;
    /**
     * <pre>
     * Multiple events have the same call and `conversion_date_time`. Make sure
     * your `conversion_date_time` is correctly configured and try again.
     * </pre>
     *
     * <code>DUPLICATE_CALL_CONVERSION_IN_REQUEST = 26;</code>
     */
    public static final int DUPLICATE_CALL_CONVERSION_IN_REQUEST_VALUE = 26;
    /**
     * <pre>
     * Enable the custom variable in your conversion settings and try again.
     * </pre>
     *
     * <code>CUSTOM_VARIABLE_NOT_ENABLED = 28;</code>
     */
    public static final int CUSTOM_VARIABLE_NOT_ENABLED_VALUE = 28;
    /**
     * <pre>
     * Can't import events with custom variables containing
     * personally-identifiable information (PII). Remove these variables and try
     * again.
     * </pre>
     *
     * <code>CUSTOM_VARIABLE_VALUE_CONTAINS_PII = 29;</code>
     */
    public static final int CUSTOM_VARIABLE_VALUE_CONTAINS_PII_VALUE = 29;
    /**
     * <pre>
     * The click from the imported event is associated with a different Google
     * Ads account. Make sure you're importing to the correct account.
     * </pre>
     *
     * <code>INVALID_CUSTOMER_FOR_CLICK = 30;</code>
     */
    public static final int INVALID_CUSTOMER_FOR_CLICK_VALUE = 30;
    /**
     * <pre>
     * The click from the call is associated with a different Google Ads
     * account. Make sure you're importing to the correct account. Query
     * conversion_tracking_setting.google_ads_conversion_customer on Customer to
     * identify the correct account.
     * </pre>
     *
     * <code>INVALID_CUSTOMER_FOR_CALL = 31;</code>
     */
    public static final int INVALID_CUSTOMER_FOR_CALL_VALUE = 31;
    /**
     * <pre>
     * The connversion can't be imported because the conversion source didn't
     * comply with Apple App Transparency Tracking (ATT) policies or because the
     * customer didn't consent to tracking.
     * </pre>
     *
     * <code>CONVERSION_NOT_COMPLIANT_WITH_ATT_POLICY = 32;</code>
     */
    public static final int CONVERSION_NOT_COMPLIANT_WITH_ATT_POLICY_VALUE = 32;
    /**
     * <pre>
     * The email address or phone number for this event can't be matched to a
     * click. This may be because it didn't come from a Google Ads campaign, and
     * you can safely ignore this warning. If this includes more imported events
     * than is expected, you may need to check your setup.
     * </pre>
     *
     * <code>CLICK_NOT_FOUND = 33;</code>
     */
    public static final int CLICK_NOT_FOUND_VALUE = 33;
    /**
     * <pre>
     * Make sure you hash user provided data using SHA-256 and ensure you are
     * normalizing according to the guidelines.
     * </pre>
     *
     * <code>INVALID_USER_IDENTIFIER = 34;</code>
     */
    public static final int INVALID_USER_IDENTIFIER_VALUE = 34;
    /**
     * <pre>
     * User provided data can't be used with external attribution models. Use a
     * different attribution model or omit user identifiers and try again.
     * </pre>
     *
     * <code>EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_NOT_PERMITTED_WITH_USER_IDENTIFIER = 35;</code>
     */
    public static final int EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_NOT_PERMITTED_WITH_USER_IDENTIFIER_VALUE = 35;
    /**
     * <pre>
     * The provided user identifiers are not supported. Use only hashed email
     * or phone number and try again.
     * </pre>
     *
     * <code>UNSUPPORTED_USER_IDENTIFIER = 36;</code>
     */
    public static final int UNSUPPORTED_USER_IDENTIFIER_VALUE = 36;
    /**
     * <pre>
     * Can't use both gbraid and wbraid parameters. Use only 1 and try again.
     * </pre>
     *
     * <code>GBRAID_WBRAID_BOTH_SET = 38;</code>
     */
    public static final int GBRAID_WBRAID_BOTH_SET_VALUE = 38;
    /**
     * <pre>
     * Can't parse event import data. Check if your wbraid parameter was
     * not modified and try again.
     * </pre>
     *
     * <code>UNPARSEABLE_WBRAID = 39;</code>
     */
    public static final int UNPARSEABLE_WBRAID_VALUE = 39;
    /**
     * <pre>
     * Can't parse event import data. Check if your gbraid parameter was
     * not modified and try again.
     * </pre>
     *
     * <code>UNPARSEABLE_GBRAID = 40;</code>
     */
    public static final int UNPARSEABLE_GBRAID_VALUE = 40;
    /**
     * <pre>
     * Conversion actions that use one-per-click counting can't be used with
     * gbraid or wbraid parameters.
     * </pre>
     *
     * <code>ONE_PER_CLICK_CONVERSION_ACTION_NOT_PERMITTED_WITH_BRAID = 46;</code>
     */
    public static final int ONE_PER_CLICK_CONVERSION_ACTION_NOT_PERMITTED_WITH_BRAID_VALUE = 46;
    /**
     * <pre>
     * Enhanced conversions can't be used for this account because of Google
     * customer data policies. Contact your Google representative.
     * </pre>
     *
     * <code>CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCED_CONVERSIONS = 47;</code>
     */
    public static final int CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCED_CONVERSIONS_VALUE = 47;
    /**
     * <pre>
     * Make sure you agree to the customer data processing terms in conversion
     * settings and try again. You can check your setting by querying
     * conversion_tracking_setting.accepted_customer_data_terms on Customer.
     * </pre>
     *
     * <code>CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS = 48;</code>
     */
    public static final int CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS_VALUE = 48;
    /**
     * <pre>
     * Can't import events with order IDs containing personally-identifiable
     * information (PII).
     * </pre>
     *
     * <code>ORDER_ID_CONTAINS_PII = 49;</code>
     */
    public static final int ORDER_ID_CONTAINS_PII_VALUE = 49;
    /**
     * <pre>
     * Make sure you've turned on enhanced conversions for leads in conversion
     * settings and try again. You can check your setting by querying
     * conversion_tracking_setting.enhanced_conversions_for_leads_enabled on
     * Customer.
     * </pre>
     *
     * <code>CUSTOMER_NOT_ENABLED_ENHANCED_CONVERSIONS_FOR_LEADS = 50;</code>
     */
    public static final int CUSTOMER_NOT_ENABLED_ENHANCED_CONVERSIONS_FOR_LEADS_VALUE = 50;
    /**
     * <pre>
     * The provided job id in the request is not within the allowed range. A job
     * ID must be a positive integer in the range [1, 2^31).
     * </pre>
     *
     * <code>INVALID_JOB_ID = 52;</code>
     */
    public static final int INVALID_JOB_ID_VALUE = 52;
    /**
     * <pre>
     * The conversion action specified in the upload request cannot be found.
     * Make sure it's available in this account.
     * </pre>
     *
     * <code>NO_CONVERSION_ACTION_FOUND = 53;</code>
     */
    public static final int NO_CONVERSION_ACTION_FOUND_VALUE = 53;
    /**
     * <pre>
     * The conversion action specified in the upload request isn't set up for
     * uploading conversions.
     * </pre>
     *
     * <code>INVALID_CONVERSION_ACTION_TYPE = 54;</code>
     */
    public static final int INVALID_CONVERSION_ACTION_TYPE_VALUE = 54;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConversionUploadError valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ConversionUploadError forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return UNKNOWN;
        case 2: return TOO_MANY_CONVERSIONS_IN_REQUEST;
        case 3: return UNPARSEABLE_GCLID;
        case 42: return CONVERSION_PRECEDES_EVENT;
        case 43: return EXPIRED_EVENT;
        case 44: return TOO_RECENT_EVENT;
        case 45: return EVENT_NOT_FOUND;
        case 8: return UNAUTHORIZED_CUSTOMER;
        case 10: return TOO_RECENT_CONVERSION_ACTION;
        case 11: return CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME;
        case 12: return EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION;
        case 13: return EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION;
        case 14: return ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION;
        case 15: return ORDER_ID_ALREADY_IN_USE;
        case 16: return DUPLICATE_ORDER_ID;
        case 17: return TOO_RECENT_CALL;
        case 18: return EXPIRED_CALL;
        case 19: return CALL_NOT_FOUND;
        case 20: return CONVERSION_PRECEDES_CALL;
        case 21: return CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME;
        case 22: return UNPARSEABLE_CALLERS_PHONE_NUMBER;
        case 23: return CLICK_CONVERSION_ALREADY_EXISTS;
        case 24: return CALL_CONVERSION_ALREADY_EXISTS;
        case 25: return DUPLICATE_CLICK_CONVERSION_IN_REQUEST;
        case 26: return DUPLICATE_CALL_CONVERSION_IN_REQUEST;
        case 28: return CUSTOM_VARIABLE_NOT_ENABLED;
        case 29: return CUSTOM_VARIABLE_VALUE_CONTAINS_PII;
        case 30: return INVALID_CUSTOMER_FOR_CLICK;
        case 31: return INVALID_CUSTOMER_FOR_CALL;
        case 32: return CONVERSION_NOT_COMPLIANT_WITH_ATT_POLICY;
        case 33: return CLICK_NOT_FOUND;
        case 34: return INVALID_USER_IDENTIFIER;
        case 35: return EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION_NOT_PERMITTED_WITH_USER_IDENTIFIER;
        case 36: return UNSUPPORTED_USER_IDENTIFIER;
        case 38: return GBRAID_WBRAID_BOTH_SET;
        case 39: return UNPARSEABLE_WBRAID;
        case 40: return UNPARSEABLE_GBRAID;
        case 46: return ONE_PER_CLICK_CONVERSION_ACTION_NOT_PERMITTED_WITH_BRAID;
        case 47: return CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCED_CONVERSIONS;
        case 48: return CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS;
        case 49: return ORDER_ID_CONTAINS_PII;
        case 50: return CUSTOMER_NOT_ENABLED_ENHANCED_CONVERSIONS_FOR_LEADS;
        case 52: return INVALID_JOB_ID;
        case 53: return NO_CONVERSION_ACTION_FOUND;
        case 54: return INVALID_CONVERSION_ACTION_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConversionUploadError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConversionUploadError> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConversionUploadError>() {
            public ConversionUploadError findValueByNumber(int number) {
              return ConversionUploadError.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final ConversionUploadError[] VALUES = values();

    public static ConversionUploadError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConversionUploadError(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.googleads.v16.errors.ConversionUploadErrorEnum.ConversionUploadError)
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum)) {
      return super.equals(obj);
    }
    com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum other = (com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum) obj;

    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Container for enum describing possible conversion upload errors.
   * </pre>
   *
   * Protobuf type {@code google.ads.googleads.v16.errors.ConversionUploadErrorEnum}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.ads.googleads.v16.errors.ConversionUploadErrorEnum)
      com.google.ads.googleads.v16.errors.ConversionUploadErrorEnumOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.ads.googleads.v16.errors.ConversionUploadErrorProto.internal_static_google_ads_googleads_v16_errors_ConversionUploadErrorEnum_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.googleads.v16.errors.ConversionUploadErrorProto.internal_static_google_ads_googleads_v16_errors_ConversionUploadErrorEnum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.class, com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.Builder.class);
    }

    // Construct using com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.ads.googleads.v16.errors.ConversionUploadErrorProto.internal_static_google_ads_googleads_v16_errors_ConversionUploadErrorEnum_descriptor;
    }

    @java.lang.Override
    public com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum getDefaultInstanceForType() {
      return com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum build() {
      com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum buildPartial() {
      com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum result = new com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum(this);
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum) {
        return mergeFrom((com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum other) {
      if (other == com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum.getDefaultInstance()) return this;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.ads.googleads.v16.errors.ConversionUploadErrorEnum)
  }

  // @@protoc_insertion_point(class_scope:google.ads.googleads.v16.errors.ConversionUploadErrorEnum)
  private static final com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum();
  }

  public static com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConversionUploadErrorEnum>
      PARSER = new com.google.protobuf.AbstractParser<ConversionUploadErrorEnum>() {
    @java.lang.Override
    public ConversionUploadErrorEnum parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ConversionUploadErrorEnum> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConversionUploadErrorEnum> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.ads.googleads.v16.errors.ConversionUploadErrorEnum getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

