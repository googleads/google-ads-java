// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/googleads/v1/errors/query_error.proto

package com.google.ads.googleads.v1.errors;

/**
 * <pre>
 * Container for enum describing possible query errors.
 * </pre>
 *
 * Protobuf type {@code google.ads.googleads.v1.errors.QueryErrorEnum}
 */
public  final class QueryErrorEnum extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.ads.googleads.v1.errors.QueryErrorEnum)
    QueryErrorEnumOrBuilder {
private static final long serialVersionUID = 0L;
  // Use QueryErrorEnum.newBuilder() to construct.
  private QueryErrorEnum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private QueryErrorEnum() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private QueryErrorEnum(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.ads.googleads.v1.errors.QueryErrorProto.internal_static_google_ads_googleads_v1_errors_QueryErrorEnum_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.ads.googleads.v1.errors.QueryErrorProto.internal_static_google_ads_googleads_v1_errors_QueryErrorEnum_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.ads.googleads.v1.errors.QueryErrorEnum.class, com.google.ads.googleads.v1.errors.QueryErrorEnum.Builder.class);
  }

  /**
   * <pre>
   * Enum describing possible query errors.
   * </pre>
   *
   * Protobuf enum {@code google.ads.googleads.v1.errors.QueryErrorEnum.QueryError}
   */
  public enum QueryError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Name unspecified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * The received error code is not known in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    UNKNOWN(1),
    /**
     * <pre>
     * Returned if all other query error reasons are not applicable.
     * </pre>
     *
     * <code>QUERY_ERROR = 50;</code>
     */
    QUERY_ERROR(50),
    /**
     * <pre>
     * A condition used in the query references an invalid enum constant.
     * </pre>
     *
     * <code>BAD_ENUM_CONSTANT = 18;</code>
     */
    BAD_ENUM_CONSTANT(18),
    /**
     * <pre>
     * Query contains an invalid escape sequence.
     * </pre>
     *
     * <code>BAD_ESCAPE_SEQUENCE = 7;</code>
     */
    BAD_ESCAPE_SEQUENCE(7),
    /**
     * <pre>
     * Field name is invalid.
     * </pre>
     *
     * <code>BAD_FIELD_NAME = 12;</code>
     */
    BAD_FIELD_NAME(12),
    /**
     * <pre>
     * Limit value is invalid (i.e. not a number)
     * </pre>
     *
     * <code>BAD_LIMIT_VALUE = 15;</code>
     */
    BAD_LIMIT_VALUE(15),
    /**
     * <pre>
     * Encountered number can not be parsed.
     * </pre>
     *
     * <code>BAD_NUMBER = 5;</code>
     */
    BAD_NUMBER(5),
    /**
     * <pre>
     * Invalid operator encountered.
     * </pre>
     *
     * <code>BAD_OPERATOR = 3;</code>
     */
    BAD_OPERATOR(3),
    /**
     * <pre>
     * Parameter unknown or not supported.
     * </pre>
     *
     * <code>BAD_PARAMETER_NAME = 61;</code>
     */
    BAD_PARAMETER_NAME(61),
    /**
     * <pre>
     * Parameter have invalid value.
     * </pre>
     *
     * <code>BAD_PARAMETER_VALUE = 62;</code>
     */
    BAD_PARAMETER_VALUE(62),
    /**
     * <pre>
     * Invalid resource type was specified in the FROM clause.
     * </pre>
     *
     * <code>BAD_RESOURCE_TYPE_IN_FROM_CLAUSE = 45;</code>
     */
    BAD_RESOURCE_TYPE_IN_FROM_CLAUSE(45),
    /**
     * <pre>
     * Non-ASCII symbol encountered outside of strings.
     * </pre>
     *
     * <code>BAD_SYMBOL = 2;</code>
     */
    BAD_SYMBOL(2),
    /**
     * <pre>
     * Value is invalid.
     * </pre>
     *
     * <code>BAD_VALUE = 4;</code>
     */
    BAD_VALUE(4),
    /**
     * <pre>
     * Date filters fail to restrict date to a range smaller than 31 days.
     * Applicable if the query is segmented by date.
     * </pre>
     *
     * <code>DATE_RANGE_TOO_WIDE = 36;</code>
     */
    DATE_RANGE_TOO_WIDE(36),
    /**
     * <pre>
     * Expected AND between values with BETWEEN operator.
     * </pre>
     *
     * <code>EXPECTED_AND = 30;</code>
     */
    EXPECTED_AND(30),
    /**
     * <pre>
     * Expecting ORDER BY to have BY.
     * </pre>
     *
     * <code>EXPECTED_BY = 14;</code>
     */
    EXPECTED_BY(14),
    /**
     * <pre>
     * There was no dimension field selected.
     * </pre>
     *
     * <code>EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE = 37;</code>
     */
    EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE(37),
    /**
     * <pre>
     * Missing filters on date related fields.
     * </pre>
     *
     * <code>EXPECTED_FILTERS_ON_DATE_RANGE = 55;</code>
     */
    EXPECTED_FILTERS_ON_DATE_RANGE(55),
    /**
     * <pre>
     * Missing FROM clause.
     * </pre>
     *
     * <code>EXPECTED_FROM = 44;</code>
     */
    EXPECTED_FROM(44),
    /**
     * <pre>
     * The operator used in the conditions requires the value to be a list.
     * </pre>
     *
     * <code>EXPECTED_LIST = 41;</code>
     */
    EXPECTED_LIST(41),
    /**
     * <pre>
     * Fields used in WHERE or ORDER BY clauses are missing from the SELECT
     * clause.
     * </pre>
     *
     * <code>EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE = 16;</code>
     */
    EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE(16),
    /**
     * <pre>
     * SELECT is missing at the beginning of query.
     * </pre>
     *
     * <code>EXPECTED_SELECT = 13;</code>
     */
    EXPECTED_SELECT(13),
    /**
     * <pre>
     * A list was passed as a value to a condition whose operator expects a
     * single value.
     * </pre>
     *
     * <code>EXPECTED_SINGLE_VALUE = 42;</code>
     */
    EXPECTED_SINGLE_VALUE(42),
    /**
     * <pre>
     * Missing one or both values with BETWEEN operator.
     * </pre>
     *
     * <code>EXPECTED_VALUE_WITH_BETWEEN_OPERATOR = 29;</code>
     */
    EXPECTED_VALUE_WITH_BETWEEN_OPERATOR(29),
    /**
     * <pre>
     * Invalid date format. Expected 'YYYY-MM-DD'.
     * </pre>
     *
     * <code>INVALID_DATE_FORMAT = 38;</code>
     */
    INVALID_DATE_FORMAT(38),
    /**
     * <pre>
     * Value passed was not a string when it should have been. I.e., it was a
     * number or unquoted literal.
     * </pre>
     *
     * <code>INVALID_STRING_VALUE = 57;</code>
     */
    INVALID_STRING_VALUE(57),
    /**
     * <pre>
     * A String value passed to the BETWEEN operator does not parse as a date.
     * </pre>
     *
     * <code>INVALID_VALUE_WITH_BETWEEN_OPERATOR = 26;</code>
     */
    INVALID_VALUE_WITH_BETWEEN_OPERATOR(26),
    /**
     * <pre>
     * The value passed to the DURING operator is not a Date range literal
     * </pre>
     *
     * <code>INVALID_VALUE_WITH_DURING_OPERATOR = 22;</code>
     */
    INVALID_VALUE_WITH_DURING_OPERATOR(22),
    /**
     * <pre>
     * A non-string value was passed to the LIKE operator.
     * </pre>
     *
     * <code>INVALID_VALUE_WITH_LIKE_OPERATOR = 56;</code>
     */
    INVALID_VALUE_WITH_LIKE_OPERATOR(56),
    /**
     * <pre>
     * An operator was provided that is inapplicable to the field being
     * filtered.
     * </pre>
     *
     * <code>OPERATOR_FIELD_MISMATCH = 35;</code>
     */
    OPERATOR_FIELD_MISMATCH(35),
    /**
     * <pre>
     * A Condition was found with an empty list.
     * </pre>
     *
     * <code>PROHIBITED_EMPTY_LIST_IN_CONDITION = 28;</code>
     */
    PROHIBITED_EMPTY_LIST_IN_CONDITION(28),
    /**
     * <pre>
     * A condition used in the query references an unsupported enum constant.
     * </pre>
     *
     * <code>PROHIBITED_ENUM_CONSTANT = 54;</code>
     */
    PROHIBITED_ENUM_CONSTANT(54),
    /**
     * <pre>
     * Fields that are not allowed to be selected together were included in
     * the SELECT clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE = 31;</code>
     */
    PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE(31),
    /**
     * <pre>
     * A field that is not orderable was included in the ORDER BY clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE = 40;</code>
     */
    PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE(40),
    /**
     * <pre>
     * A field that is not selectable was included in the SELECT clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_IN_SELECT_CLAUSE = 23;</code>
     */
    PROHIBITED_FIELD_IN_SELECT_CLAUSE(23),
    /**
     * <pre>
     * A field that is not filterable was included in the WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_IN_WHERE_CLAUSE = 24;</code>
     */
    PROHIBITED_FIELD_IN_WHERE_CLAUSE(24),
    /**
     * <pre>
     * Resource type specified in the FROM clause is not supported by this
     * service.
     * </pre>
     *
     * <code>PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE = 43;</code>
     */
    PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE(43),
    /**
     * <pre>
     * A field that comes from an incompatible resource was included in the
     * SELECT clause.
     * </pre>
     *
     * <code>PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE = 48;</code>
     */
    PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE(48),
    /**
     * <pre>
     * A field that comes from an incompatible resource was included in the
     * WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE = 58;</code>
     */
    PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE(58),
    /**
     * <pre>
     * A metric incompatible with the main resource or other selected
     * segmenting resources was included in the SELECT or WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 49;</code>
     */
    PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE(49),
    /**
     * <pre>
     * A segment incompatible with the main resource or other selected
     * segmenting resources was included in the SELECT or WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE = 51;</code>
     */
    PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE(51),
    /**
     * <pre>
     * A segment in the SELECT clause is incompatible with a metric in the
     * SELECT or WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 53;</code>
     */
    PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE(53),
    /**
     * <pre>
     * The value passed to the limit clause is too low.
     * </pre>
     *
     * <code>LIMIT_VALUE_TOO_LOW = 25;</code>
     */
    LIMIT_VALUE_TOO_LOW(25),
    /**
     * <pre>
     * Query has a string containing a newline character.
     * </pre>
     *
     * <code>PROHIBITED_NEWLINE_IN_STRING = 8;</code>
     */
    PROHIBITED_NEWLINE_IN_STRING(8),
    /**
     * <pre>
     * List contains values of different types.
     * </pre>
     *
     * <code>PROHIBITED_VALUE_COMBINATION_IN_LIST = 10;</code>
     */
    PROHIBITED_VALUE_COMBINATION_IN_LIST(10),
    /**
     * <pre>
     * The values passed to the BETWEEN operator are not of the same type.
     * </pre>
     *
     * <code>PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR = 21;</code>
     */
    PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR(21),
    /**
     * <pre>
     * Query contains unterminated string.
     * </pre>
     *
     * <code>STRING_NOT_TERMINATED = 6;</code>
     */
    STRING_NOT_TERMINATED(6),
    /**
     * <pre>
     * Too many segments are specified in SELECT clause.
     * </pre>
     *
     * <code>TOO_MANY_SEGMENTS = 34;</code>
     */
    TOO_MANY_SEGMENTS(34),
    /**
     * <pre>
     * Query is incomplete and cannot be parsed.
     * </pre>
     *
     * <code>UNEXPECTED_END_OF_QUERY = 9;</code>
     */
    UNEXPECTED_END_OF_QUERY(9),
    /**
     * <pre>
     * FROM clause cannot be specified in this query.
     * </pre>
     *
     * <code>UNEXPECTED_FROM_CLAUSE = 47;</code>
     */
    UNEXPECTED_FROM_CLAUSE(47),
    /**
     * <pre>
     * Query contains one or more unrecognized fields.
     * </pre>
     *
     * <code>UNRECOGNIZED_FIELD = 32;</code>
     */
    UNRECOGNIZED_FIELD(32),
    /**
     * <pre>
     * Query has an unexpected extra part.
     * </pre>
     *
     * <code>UNEXPECTED_INPUT = 11;</code>
     */
    UNEXPECTED_INPUT(11),
    /**
     * <pre>
     * Metrics cannot be requested for a manager account. To retrieve metrics,
     * issue separate requests against each client account under the manager
     * account.
     * </pre>
     *
     * <code>REQUESTED_METRICS_FOR_MANAGER = 59;</code>
     */
    REQUESTED_METRICS_FOR_MANAGER(59),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Name unspecified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The received error code is not known in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    public static final int UNKNOWN_VALUE = 1;
    /**
     * <pre>
     * Returned if all other query error reasons are not applicable.
     * </pre>
     *
     * <code>QUERY_ERROR = 50;</code>
     */
    public static final int QUERY_ERROR_VALUE = 50;
    /**
     * <pre>
     * A condition used in the query references an invalid enum constant.
     * </pre>
     *
     * <code>BAD_ENUM_CONSTANT = 18;</code>
     */
    public static final int BAD_ENUM_CONSTANT_VALUE = 18;
    /**
     * <pre>
     * Query contains an invalid escape sequence.
     * </pre>
     *
     * <code>BAD_ESCAPE_SEQUENCE = 7;</code>
     */
    public static final int BAD_ESCAPE_SEQUENCE_VALUE = 7;
    /**
     * <pre>
     * Field name is invalid.
     * </pre>
     *
     * <code>BAD_FIELD_NAME = 12;</code>
     */
    public static final int BAD_FIELD_NAME_VALUE = 12;
    /**
     * <pre>
     * Limit value is invalid (i.e. not a number)
     * </pre>
     *
     * <code>BAD_LIMIT_VALUE = 15;</code>
     */
    public static final int BAD_LIMIT_VALUE_VALUE = 15;
    /**
     * <pre>
     * Encountered number can not be parsed.
     * </pre>
     *
     * <code>BAD_NUMBER = 5;</code>
     */
    public static final int BAD_NUMBER_VALUE = 5;
    /**
     * <pre>
     * Invalid operator encountered.
     * </pre>
     *
     * <code>BAD_OPERATOR = 3;</code>
     */
    public static final int BAD_OPERATOR_VALUE = 3;
    /**
     * <pre>
     * Parameter unknown or not supported.
     * </pre>
     *
     * <code>BAD_PARAMETER_NAME = 61;</code>
     */
    public static final int BAD_PARAMETER_NAME_VALUE = 61;
    /**
     * <pre>
     * Parameter have invalid value.
     * </pre>
     *
     * <code>BAD_PARAMETER_VALUE = 62;</code>
     */
    public static final int BAD_PARAMETER_VALUE_VALUE = 62;
    /**
     * <pre>
     * Invalid resource type was specified in the FROM clause.
     * </pre>
     *
     * <code>BAD_RESOURCE_TYPE_IN_FROM_CLAUSE = 45;</code>
     */
    public static final int BAD_RESOURCE_TYPE_IN_FROM_CLAUSE_VALUE = 45;
    /**
     * <pre>
     * Non-ASCII symbol encountered outside of strings.
     * </pre>
     *
     * <code>BAD_SYMBOL = 2;</code>
     */
    public static final int BAD_SYMBOL_VALUE = 2;
    /**
     * <pre>
     * Value is invalid.
     * </pre>
     *
     * <code>BAD_VALUE = 4;</code>
     */
    public static final int BAD_VALUE_VALUE = 4;
    /**
     * <pre>
     * Date filters fail to restrict date to a range smaller than 31 days.
     * Applicable if the query is segmented by date.
     * </pre>
     *
     * <code>DATE_RANGE_TOO_WIDE = 36;</code>
     */
    public static final int DATE_RANGE_TOO_WIDE_VALUE = 36;
    /**
     * <pre>
     * Expected AND between values with BETWEEN operator.
     * </pre>
     *
     * <code>EXPECTED_AND = 30;</code>
     */
    public static final int EXPECTED_AND_VALUE = 30;
    /**
     * <pre>
     * Expecting ORDER BY to have BY.
     * </pre>
     *
     * <code>EXPECTED_BY = 14;</code>
     */
    public static final int EXPECTED_BY_VALUE = 14;
    /**
     * <pre>
     * There was no dimension field selected.
     * </pre>
     *
     * <code>EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE = 37;</code>
     */
    public static final int EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE_VALUE = 37;
    /**
     * <pre>
     * Missing filters on date related fields.
     * </pre>
     *
     * <code>EXPECTED_FILTERS_ON_DATE_RANGE = 55;</code>
     */
    public static final int EXPECTED_FILTERS_ON_DATE_RANGE_VALUE = 55;
    /**
     * <pre>
     * Missing FROM clause.
     * </pre>
     *
     * <code>EXPECTED_FROM = 44;</code>
     */
    public static final int EXPECTED_FROM_VALUE = 44;
    /**
     * <pre>
     * The operator used in the conditions requires the value to be a list.
     * </pre>
     *
     * <code>EXPECTED_LIST = 41;</code>
     */
    public static final int EXPECTED_LIST_VALUE = 41;
    /**
     * <pre>
     * Fields used in WHERE or ORDER BY clauses are missing from the SELECT
     * clause.
     * </pre>
     *
     * <code>EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE = 16;</code>
     */
    public static final int EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE_VALUE = 16;
    /**
     * <pre>
     * SELECT is missing at the beginning of query.
     * </pre>
     *
     * <code>EXPECTED_SELECT = 13;</code>
     */
    public static final int EXPECTED_SELECT_VALUE = 13;
    /**
     * <pre>
     * A list was passed as a value to a condition whose operator expects a
     * single value.
     * </pre>
     *
     * <code>EXPECTED_SINGLE_VALUE = 42;</code>
     */
    public static final int EXPECTED_SINGLE_VALUE_VALUE = 42;
    /**
     * <pre>
     * Missing one or both values with BETWEEN operator.
     * </pre>
     *
     * <code>EXPECTED_VALUE_WITH_BETWEEN_OPERATOR = 29;</code>
     */
    public static final int EXPECTED_VALUE_WITH_BETWEEN_OPERATOR_VALUE = 29;
    /**
     * <pre>
     * Invalid date format. Expected 'YYYY-MM-DD'.
     * </pre>
     *
     * <code>INVALID_DATE_FORMAT = 38;</code>
     */
    public static final int INVALID_DATE_FORMAT_VALUE = 38;
    /**
     * <pre>
     * Value passed was not a string when it should have been. I.e., it was a
     * number or unquoted literal.
     * </pre>
     *
     * <code>INVALID_STRING_VALUE = 57;</code>
     */
    public static final int INVALID_STRING_VALUE_VALUE = 57;
    /**
     * <pre>
     * A String value passed to the BETWEEN operator does not parse as a date.
     * </pre>
     *
     * <code>INVALID_VALUE_WITH_BETWEEN_OPERATOR = 26;</code>
     */
    public static final int INVALID_VALUE_WITH_BETWEEN_OPERATOR_VALUE = 26;
    /**
     * <pre>
     * The value passed to the DURING operator is not a Date range literal
     * </pre>
     *
     * <code>INVALID_VALUE_WITH_DURING_OPERATOR = 22;</code>
     */
    public static final int INVALID_VALUE_WITH_DURING_OPERATOR_VALUE = 22;
    /**
     * <pre>
     * A non-string value was passed to the LIKE operator.
     * </pre>
     *
     * <code>INVALID_VALUE_WITH_LIKE_OPERATOR = 56;</code>
     */
    public static final int INVALID_VALUE_WITH_LIKE_OPERATOR_VALUE = 56;
    /**
     * <pre>
     * An operator was provided that is inapplicable to the field being
     * filtered.
     * </pre>
     *
     * <code>OPERATOR_FIELD_MISMATCH = 35;</code>
     */
    public static final int OPERATOR_FIELD_MISMATCH_VALUE = 35;
    /**
     * <pre>
     * A Condition was found with an empty list.
     * </pre>
     *
     * <code>PROHIBITED_EMPTY_LIST_IN_CONDITION = 28;</code>
     */
    public static final int PROHIBITED_EMPTY_LIST_IN_CONDITION_VALUE = 28;
    /**
     * <pre>
     * A condition used in the query references an unsupported enum constant.
     * </pre>
     *
     * <code>PROHIBITED_ENUM_CONSTANT = 54;</code>
     */
    public static final int PROHIBITED_ENUM_CONSTANT_VALUE = 54;
    /**
     * <pre>
     * Fields that are not allowed to be selected together were included in
     * the SELECT clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE = 31;</code>
     */
    public static final int PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE_VALUE = 31;
    /**
     * <pre>
     * A field that is not orderable was included in the ORDER BY clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE = 40;</code>
     */
    public static final int PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE_VALUE = 40;
    /**
     * <pre>
     * A field that is not selectable was included in the SELECT clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_IN_SELECT_CLAUSE = 23;</code>
     */
    public static final int PROHIBITED_FIELD_IN_SELECT_CLAUSE_VALUE = 23;
    /**
     * <pre>
     * A field that is not filterable was included in the WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_FIELD_IN_WHERE_CLAUSE = 24;</code>
     */
    public static final int PROHIBITED_FIELD_IN_WHERE_CLAUSE_VALUE = 24;
    /**
     * <pre>
     * Resource type specified in the FROM clause is not supported by this
     * service.
     * </pre>
     *
     * <code>PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE = 43;</code>
     */
    public static final int PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE_VALUE = 43;
    /**
     * <pre>
     * A field that comes from an incompatible resource was included in the
     * SELECT clause.
     * </pre>
     *
     * <code>PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE = 48;</code>
     */
    public static final int PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE_VALUE = 48;
    /**
     * <pre>
     * A field that comes from an incompatible resource was included in the
     * WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE = 58;</code>
     */
    public static final int PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE_VALUE = 58;
    /**
     * <pre>
     * A metric incompatible with the main resource or other selected
     * segmenting resources was included in the SELECT or WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 49;</code>
     */
    public static final int PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE_VALUE = 49;
    /**
     * <pre>
     * A segment incompatible with the main resource or other selected
     * segmenting resources was included in the SELECT or WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE = 51;</code>
     */
    public static final int PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE_VALUE = 51;
    /**
     * <pre>
     * A segment in the SELECT clause is incompatible with a metric in the
     * SELECT or WHERE clause.
     * </pre>
     *
     * <code>PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 53;</code>
     */
    public static final int PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE_VALUE = 53;
    /**
     * <pre>
     * The value passed to the limit clause is too low.
     * </pre>
     *
     * <code>LIMIT_VALUE_TOO_LOW = 25;</code>
     */
    public static final int LIMIT_VALUE_TOO_LOW_VALUE = 25;
    /**
     * <pre>
     * Query has a string containing a newline character.
     * </pre>
     *
     * <code>PROHIBITED_NEWLINE_IN_STRING = 8;</code>
     */
    public static final int PROHIBITED_NEWLINE_IN_STRING_VALUE = 8;
    /**
     * <pre>
     * List contains values of different types.
     * </pre>
     *
     * <code>PROHIBITED_VALUE_COMBINATION_IN_LIST = 10;</code>
     */
    public static final int PROHIBITED_VALUE_COMBINATION_IN_LIST_VALUE = 10;
    /**
     * <pre>
     * The values passed to the BETWEEN operator are not of the same type.
     * </pre>
     *
     * <code>PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR = 21;</code>
     */
    public static final int PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR_VALUE = 21;
    /**
     * <pre>
     * Query contains unterminated string.
     * </pre>
     *
     * <code>STRING_NOT_TERMINATED = 6;</code>
     */
    public static final int STRING_NOT_TERMINATED_VALUE = 6;
    /**
     * <pre>
     * Too many segments are specified in SELECT clause.
     * </pre>
     *
     * <code>TOO_MANY_SEGMENTS = 34;</code>
     */
    public static final int TOO_MANY_SEGMENTS_VALUE = 34;
    /**
     * <pre>
     * Query is incomplete and cannot be parsed.
     * </pre>
     *
     * <code>UNEXPECTED_END_OF_QUERY = 9;</code>
     */
    public static final int UNEXPECTED_END_OF_QUERY_VALUE = 9;
    /**
     * <pre>
     * FROM clause cannot be specified in this query.
     * </pre>
     *
     * <code>UNEXPECTED_FROM_CLAUSE = 47;</code>
     */
    public static final int UNEXPECTED_FROM_CLAUSE_VALUE = 47;
    /**
     * <pre>
     * Query contains one or more unrecognized fields.
     * </pre>
     *
     * <code>UNRECOGNIZED_FIELD = 32;</code>
     */
    public static final int UNRECOGNIZED_FIELD_VALUE = 32;
    /**
     * <pre>
     * Query has an unexpected extra part.
     * </pre>
     *
     * <code>UNEXPECTED_INPUT = 11;</code>
     */
    public static final int UNEXPECTED_INPUT_VALUE = 11;
    /**
     * <pre>
     * Metrics cannot be requested for a manager account. To retrieve metrics,
     * issue separate requests against each client account under the manager
     * account.
     * </pre>
     *
     * <code>REQUESTED_METRICS_FOR_MANAGER = 59;</code>
     */
    public static final int REQUESTED_METRICS_FOR_MANAGER_VALUE = 59;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static QueryError valueOf(int value) {
      return forNumber(value);
    }

    public static QueryError forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return UNKNOWN;
        case 50: return QUERY_ERROR;
        case 18: return BAD_ENUM_CONSTANT;
        case 7: return BAD_ESCAPE_SEQUENCE;
        case 12: return BAD_FIELD_NAME;
        case 15: return BAD_LIMIT_VALUE;
        case 5: return BAD_NUMBER;
        case 3: return BAD_OPERATOR;
        case 61: return BAD_PARAMETER_NAME;
        case 62: return BAD_PARAMETER_VALUE;
        case 45: return BAD_RESOURCE_TYPE_IN_FROM_CLAUSE;
        case 2: return BAD_SYMBOL;
        case 4: return BAD_VALUE;
        case 36: return DATE_RANGE_TOO_WIDE;
        case 30: return EXPECTED_AND;
        case 14: return EXPECTED_BY;
        case 37: return EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE;
        case 55: return EXPECTED_FILTERS_ON_DATE_RANGE;
        case 44: return EXPECTED_FROM;
        case 41: return EXPECTED_LIST;
        case 16: return EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE;
        case 13: return EXPECTED_SELECT;
        case 42: return EXPECTED_SINGLE_VALUE;
        case 29: return EXPECTED_VALUE_WITH_BETWEEN_OPERATOR;
        case 38: return INVALID_DATE_FORMAT;
        case 57: return INVALID_STRING_VALUE;
        case 26: return INVALID_VALUE_WITH_BETWEEN_OPERATOR;
        case 22: return INVALID_VALUE_WITH_DURING_OPERATOR;
        case 56: return INVALID_VALUE_WITH_LIKE_OPERATOR;
        case 35: return OPERATOR_FIELD_MISMATCH;
        case 28: return PROHIBITED_EMPTY_LIST_IN_CONDITION;
        case 54: return PROHIBITED_ENUM_CONSTANT;
        case 31: return PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE;
        case 40: return PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE;
        case 23: return PROHIBITED_FIELD_IN_SELECT_CLAUSE;
        case 24: return PROHIBITED_FIELD_IN_WHERE_CLAUSE;
        case 43: return PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE;
        case 48: return PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE;
        case 58: return PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE;
        case 49: return PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE;
        case 51: return PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE;
        case 53: return PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE;
        case 25: return LIMIT_VALUE_TOO_LOW;
        case 8: return PROHIBITED_NEWLINE_IN_STRING;
        case 10: return PROHIBITED_VALUE_COMBINATION_IN_LIST;
        case 21: return PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR;
        case 6: return STRING_NOT_TERMINATED;
        case 34: return TOO_MANY_SEGMENTS;
        case 9: return UNEXPECTED_END_OF_QUERY;
        case 47: return UNEXPECTED_FROM_CLAUSE;
        case 32: return UNRECOGNIZED_FIELD;
        case 11: return UNEXPECTED_INPUT;
        case 59: return REQUESTED_METRICS_FOR_MANAGER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<QueryError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        QueryError> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<QueryError>() {
            public QueryError findValueByNumber(int number) {
              return QueryError.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.ads.googleads.v1.errors.QueryErrorEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final QueryError[] VALUES = values();

    public static QueryError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private QueryError(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.googleads.v1.errors.QueryErrorEnum.QueryError)
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.ads.googleads.v1.errors.QueryErrorEnum)) {
      return super.equals(obj);
    }
    com.google.ads.googleads.v1.errors.QueryErrorEnum other = (com.google.ads.googleads.v1.errors.QueryErrorEnum) obj;

    boolean result = true;
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v1.errors.QueryErrorEnum parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.ads.googleads.v1.errors.QueryErrorEnum prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Container for enum describing possible query errors.
   * </pre>
   *
   * Protobuf type {@code google.ads.googleads.v1.errors.QueryErrorEnum}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.ads.googleads.v1.errors.QueryErrorEnum)
      com.google.ads.googleads.v1.errors.QueryErrorEnumOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.ads.googleads.v1.errors.QueryErrorProto.internal_static_google_ads_googleads_v1_errors_QueryErrorEnum_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.googleads.v1.errors.QueryErrorProto.internal_static_google_ads_googleads_v1_errors_QueryErrorEnum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.googleads.v1.errors.QueryErrorEnum.class, com.google.ads.googleads.v1.errors.QueryErrorEnum.Builder.class);
    }

    // Construct using com.google.ads.googleads.v1.errors.QueryErrorEnum.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.ads.googleads.v1.errors.QueryErrorProto.internal_static_google_ads_googleads_v1_errors_QueryErrorEnum_descriptor;
    }

    @java.lang.Override
    public com.google.ads.googleads.v1.errors.QueryErrorEnum getDefaultInstanceForType() {
      return com.google.ads.googleads.v1.errors.QueryErrorEnum.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.ads.googleads.v1.errors.QueryErrorEnum build() {
      com.google.ads.googleads.v1.errors.QueryErrorEnum result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.ads.googleads.v1.errors.QueryErrorEnum buildPartial() {
      com.google.ads.googleads.v1.errors.QueryErrorEnum result = new com.google.ads.googleads.v1.errors.QueryErrorEnum(this);
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.ads.googleads.v1.errors.QueryErrorEnum) {
        return mergeFrom((com.google.ads.googleads.v1.errors.QueryErrorEnum)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.ads.googleads.v1.errors.QueryErrorEnum other) {
      if (other == com.google.ads.googleads.v1.errors.QueryErrorEnum.getDefaultInstance()) return this;
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.ads.googleads.v1.errors.QueryErrorEnum parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.ads.googleads.v1.errors.QueryErrorEnum) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.ads.googleads.v1.errors.QueryErrorEnum)
  }

  // @@protoc_insertion_point(class_scope:google.ads.googleads.v1.errors.QueryErrorEnum)
  private static final com.google.ads.googleads.v1.errors.QueryErrorEnum DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.ads.googleads.v1.errors.QueryErrorEnum();
  }

  public static com.google.ads.googleads.v1.errors.QueryErrorEnum getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<QueryErrorEnum>
      PARSER = new com.google.protobuf.AbstractParser<QueryErrorEnum>() {
    @java.lang.Override
    public QueryErrorEnum parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new QueryErrorEnum(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<QueryErrorEnum> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<QueryErrorEnum> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.ads.googleads.v1.errors.QueryErrorEnum getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

