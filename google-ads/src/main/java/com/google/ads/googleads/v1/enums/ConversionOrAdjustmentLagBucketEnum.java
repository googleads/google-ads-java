// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/googleads/v1/enums/conversion_or_adjustment_lag_bucket.proto

package com.google.ads.googleads.v1.enums;

/**
 * <pre>
 * Container for enum representing the number of days between the impression and
 * the conversion or between the impression and adjustments to the conversion.
 * </pre>
 *
 * Protobuf type {@code google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum}
 */
public  final class ConversionOrAdjustmentLagBucketEnum extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum)
    ConversionOrAdjustmentLagBucketEnumOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConversionOrAdjustmentLagBucketEnum.newBuilder() to construct.
  private ConversionOrAdjustmentLagBucketEnum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConversionOrAdjustmentLagBucketEnum() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConversionOrAdjustmentLagBucketEnum(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketProto.internal_static_google_ads_googleads_v1_enums_ConversionOrAdjustmentLagBucketEnum_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketProto.internal_static_google_ads_googleads_v1_enums_ConversionOrAdjustmentLagBucketEnum_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.class, com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.Builder.class);
  }

  /**
   * <pre>
   * Enum representing the number of days between the impression and the
   * conversion or between the impression and adjustments to the conversion.
   * </pre>
   *
   * Protobuf enum {@code google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.ConversionOrAdjustmentLagBucket}
   */
  public enum ConversionOrAdjustmentLagBucket
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not specified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * Used for return value only. Represents value unknown in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    UNKNOWN(1),
    /**
     * <pre>
     * Conversion lag bucket from 0 to 1 day. 0 day is included, 1 day is not.
     * </pre>
     *
     * <code>CONVERSION_LESS_THAN_ONE_DAY = 2;</code>
     */
    CONVERSION_LESS_THAN_ONE_DAY(2),
    /**
     * <pre>
     * Conversion lag bucket from 1 to 2 days. 1 day is included, 2 days is not.
     * </pre>
     *
     * <code>CONVERSION_ONE_TO_TWO_DAYS = 3;</code>
     */
    CONVERSION_ONE_TO_TWO_DAYS(3),
    /**
     * <pre>
     * Conversion lag bucket from 2 to 3 days. 2 days is included,
     * 3 days is not.
     * </pre>
     *
     * <code>CONVERSION_TWO_TO_THREE_DAYS = 4;</code>
     */
    CONVERSION_TWO_TO_THREE_DAYS(4),
    /**
     * <pre>
     * Conversion lag bucket from 3 to 4 days. 3 days is included,
     * 4 days is not.
     * </pre>
     *
     * <code>CONVERSION_THREE_TO_FOUR_DAYS = 5;</code>
     */
    CONVERSION_THREE_TO_FOUR_DAYS(5),
    /**
     * <pre>
     * Conversion lag bucket from 4 to 5 days. 4 days is included,
     * 5 days is not.
     * </pre>
     *
     * <code>CONVERSION_FOUR_TO_FIVE_DAYS = 6;</code>
     */
    CONVERSION_FOUR_TO_FIVE_DAYS(6),
    /**
     * <pre>
     * Conversion lag bucket from 5 to 6 days. 5 days is included,
     * 6 days is not.
     * </pre>
     *
     * <code>CONVERSION_FIVE_TO_SIX_DAYS = 7;</code>
     */
    CONVERSION_FIVE_TO_SIX_DAYS(7),
    /**
     * <pre>
     * Conversion lag bucket from 6 to 7 days. 6 days is included,
     * 7 days is not.
     * </pre>
     *
     * <code>CONVERSION_SIX_TO_SEVEN_DAYS = 8;</code>
     */
    CONVERSION_SIX_TO_SEVEN_DAYS(8),
    /**
     * <pre>
     * Conversion lag bucket from 7 to 8 days. 7 days is included,
     * 8 days is not.
     * </pre>
     *
     * <code>CONVERSION_SEVEN_TO_EIGHT_DAYS = 9;</code>
     */
    CONVERSION_SEVEN_TO_EIGHT_DAYS(9),
    /**
     * <pre>
     * Conversion lag bucket from 8 to 9 days. 8 days is included,
     * 9 days is not.
     * </pre>
     *
     * <code>CONVERSION_EIGHT_TO_NINE_DAYS = 10;</code>
     */
    CONVERSION_EIGHT_TO_NINE_DAYS(10),
    /**
     * <pre>
     * Conversion lag bucket from 9 to 10 days. 9 days is included,
     * 10 days is not.
     * </pre>
     *
     * <code>CONVERSION_NINE_TO_TEN_DAYS = 11;</code>
     */
    CONVERSION_NINE_TO_TEN_DAYS(11),
    /**
     * <pre>
     * Conversion lag bucket from 10 to 11 days. 10 days is included,
     * 11 days is not.
     * </pre>
     *
     * <code>CONVERSION_TEN_TO_ELEVEN_DAYS = 12;</code>
     */
    CONVERSION_TEN_TO_ELEVEN_DAYS(12),
    /**
     * <pre>
     * Conversion lag bucket from 11 to 12 days. 11 days is included,
     * 12 days is not.
     * </pre>
     *
     * <code>CONVERSION_ELEVEN_TO_TWELVE_DAYS = 13;</code>
     */
    CONVERSION_ELEVEN_TO_TWELVE_DAYS(13),
    /**
     * <pre>
     * Conversion lag bucket from 12 to 13 days. 12 days is included,
     * 13 days is not.
     * </pre>
     *
     * <code>CONVERSION_TWELVE_TO_THIRTEEN_DAYS = 14;</code>
     */
    CONVERSION_TWELVE_TO_THIRTEEN_DAYS(14),
    /**
     * <pre>
     * Conversion lag bucket from 13 to 14 days. 13 days is included,
     * 14 days is not.
     * </pre>
     *
     * <code>CONVERSION_THIRTEEN_TO_FOURTEEN_DAYS = 15;</code>
     */
    CONVERSION_THIRTEEN_TO_FOURTEEN_DAYS(15),
    /**
     * <pre>
     * Conversion lag bucket from 14 to 21 days. 14 days is included,
     * 21 days is not.
     * </pre>
     *
     * <code>CONVERSION_FOURTEEN_TO_TWENTY_ONE_DAYS = 16;</code>
     */
    CONVERSION_FOURTEEN_TO_TWENTY_ONE_DAYS(16),
    /**
     * <pre>
     * Conversion lag bucket from 21 to 30 days. 21 days is included,
     * 30 days is not.
     * </pre>
     *
     * <code>CONVERSION_TWENTY_ONE_TO_THIRTY_DAYS = 17;</code>
     */
    CONVERSION_TWENTY_ONE_TO_THIRTY_DAYS(17),
    /**
     * <pre>
     * Conversion lag bucket from 30 to 45 days. 30 days is included,
     * 45 days is not.
     * </pre>
     *
     * <code>CONVERSION_THIRTY_TO_FORTY_FIVE_DAYS = 18;</code>
     */
    CONVERSION_THIRTY_TO_FORTY_FIVE_DAYS(18),
    /**
     * <pre>
     * Conversion lag bucket from 45 to 60 days. 45 days is included,
     * 60 days is not.
     * </pre>
     *
     * <code>CONVERSION_FORTY_FIVE_TO_SIXTY_DAYS = 19;</code>
     */
    CONVERSION_FORTY_FIVE_TO_SIXTY_DAYS(19),
    /**
     * <pre>
     * Conversion lag bucket from 60 to 90 days. 60 days is included,
     * 90 days is not.
     * </pre>
     *
     * <code>CONVERSION_SIXTY_TO_NINETY_DAYS = 20;</code>
     */
    CONVERSION_SIXTY_TO_NINETY_DAYS(20),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 0 to 1 day. 0 day is included,
     * 1 day is not.
     * </pre>
     *
     * <code>ADJUSTMENT_LESS_THAN_ONE_DAY = 21;</code>
     */
    ADJUSTMENT_LESS_THAN_ONE_DAY(21),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 1 to 2 days. 1 day is included,
     * 2 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_ONE_TO_TWO_DAYS = 22;</code>
     */
    ADJUSTMENT_ONE_TO_TWO_DAYS(22),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 2 to 3 days. 2 days is included,
     * 3 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TWO_TO_THREE_DAYS = 23;</code>
     */
    ADJUSTMENT_TWO_TO_THREE_DAYS(23),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 3 to 4 days. 3 days is included,
     * 4 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_THREE_TO_FOUR_DAYS = 24;</code>
     */
    ADJUSTMENT_THREE_TO_FOUR_DAYS(24),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 4 to 5 days. 4 days is included,
     * 5 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FOUR_TO_FIVE_DAYS = 25;</code>
     */
    ADJUSTMENT_FOUR_TO_FIVE_DAYS(25),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 5 to 6 days. 5 days is included,
     * 6 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FIVE_TO_SIX_DAYS = 26;</code>
     */
    ADJUSTMENT_FIVE_TO_SIX_DAYS(26),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 6 to 7 days. 6 days is included,
     * 7 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_SIX_TO_SEVEN_DAYS = 27;</code>
     */
    ADJUSTMENT_SIX_TO_SEVEN_DAYS(27),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 7 to 8 days. 7 days is included,
     * 8 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_SEVEN_TO_EIGHT_DAYS = 28;</code>
     */
    ADJUSTMENT_SEVEN_TO_EIGHT_DAYS(28),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 8 to 9 days. 8 days is included,
     * 9 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_EIGHT_TO_NINE_DAYS = 29;</code>
     */
    ADJUSTMENT_EIGHT_TO_NINE_DAYS(29),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 9 to 10 days. 9 days is included,
     * 10 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_NINE_TO_TEN_DAYS = 30;</code>
     */
    ADJUSTMENT_NINE_TO_TEN_DAYS(30),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 10 to 11 days. 10 days is included,
     * 11 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TEN_TO_ELEVEN_DAYS = 31;</code>
     */
    ADJUSTMENT_TEN_TO_ELEVEN_DAYS(31),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 11 to 12 days. 11 days is included,
     * 12 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_ELEVEN_TO_TWELVE_DAYS = 32;</code>
     */
    ADJUSTMENT_ELEVEN_TO_TWELVE_DAYS(32),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 12 to 13 days. 12 days is included,
     * 13 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TWELVE_TO_THIRTEEN_DAYS = 33;</code>
     */
    ADJUSTMENT_TWELVE_TO_THIRTEEN_DAYS(33),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 13 to 14 days. 13 days is included,
     * 14 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_THIRTEEN_TO_FOURTEEN_DAYS = 34;</code>
     */
    ADJUSTMENT_THIRTEEN_TO_FOURTEEN_DAYS(34),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 14 to 21 days. 14 days is included,
     * 21 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FOURTEEN_TO_TWENTY_ONE_DAYS = 35;</code>
     */
    ADJUSTMENT_FOURTEEN_TO_TWENTY_ONE_DAYS(35),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 21 to 30 days. 21 days is included,
     * 30 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TWENTY_ONE_TO_THIRTY_DAYS = 36;</code>
     */
    ADJUSTMENT_TWENTY_ONE_TO_THIRTY_DAYS(36),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 30 to 45 days. 30 days is included,
     * 45 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_THIRTY_TO_FORTY_FIVE_DAYS = 37;</code>
     */
    ADJUSTMENT_THIRTY_TO_FORTY_FIVE_DAYS(37),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 45 to 60 days. 45 days is included,
     * 60 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FORTY_FIVE_TO_SIXTY_DAYS = 38;</code>
     */
    ADJUSTMENT_FORTY_FIVE_TO_SIXTY_DAYS(38),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 60 to 90 days. 60 days is included,
     * 90 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_SIXTY_TO_NINETY_DAYS = 39;</code>
     */
    ADJUSTMENT_SIXTY_TO_NINETY_DAYS(39),
    /**
     * <pre>
     * Conversion adjustment lag bucket from 90 to 145 days. 90 days is
     * included, 145 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_NINETY_TO_ONE_HUNDRED_AND_FORTY_FIVE_DAYS = 40;</code>
     */
    ADJUSTMENT_NINETY_TO_ONE_HUNDRED_AND_FORTY_FIVE_DAYS(40),
    /**
     * <pre>
     * Conversion lag bucket UNKNOWN. This is for dates before conversion lag
     * bucket was available in Google Ads.
     * </pre>
     *
     * <code>CONVERSION_UNKNOWN = 41;</code>
     */
    CONVERSION_UNKNOWN(41),
    /**
     * <pre>
     * Conversion adjustment lag bucket UNKNOWN. This is for dates before
     * conversion adjustment lag bucket was available in Google Ads.
     * </pre>
     *
     * <code>ADJUSTMENT_UNKNOWN = 42;</code>
     */
    ADJUSTMENT_UNKNOWN(42),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not specified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Used for return value only. Represents value unknown in this version.
     * </pre>
     *
     * <code>UNKNOWN = 1;</code>
     */
    public static final int UNKNOWN_VALUE = 1;
    /**
     * <pre>
     * Conversion lag bucket from 0 to 1 day. 0 day is included, 1 day is not.
     * </pre>
     *
     * <code>CONVERSION_LESS_THAN_ONE_DAY = 2;</code>
     */
    public static final int CONVERSION_LESS_THAN_ONE_DAY_VALUE = 2;
    /**
     * <pre>
     * Conversion lag bucket from 1 to 2 days. 1 day is included, 2 days is not.
     * </pre>
     *
     * <code>CONVERSION_ONE_TO_TWO_DAYS = 3;</code>
     */
    public static final int CONVERSION_ONE_TO_TWO_DAYS_VALUE = 3;
    /**
     * <pre>
     * Conversion lag bucket from 2 to 3 days. 2 days is included,
     * 3 days is not.
     * </pre>
     *
     * <code>CONVERSION_TWO_TO_THREE_DAYS = 4;</code>
     */
    public static final int CONVERSION_TWO_TO_THREE_DAYS_VALUE = 4;
    /**
     * <pre>
     * Conversion lag bucket from 3 to 4 days. 3 days is included,
     * 4 days is not.
     * </pre>
     *
     * <code>CONVERSION_THREE_TO_FOUR_DAYS = 5;</code>
     */
    public static final int CONVERSION_THREE_TO_FOUR_DAYS_VALUE = 5;
    /**
     * <pre>
     * Conversion lag bucket from 4 to 5 days. 4 days is included,
     * 5 days is not.
     * </pre>
     *
     * <code>CONVERSION_FOUR_TO_FIVE_DAYS = 6;</code>
     */
    public static final int CONVERSION_FOUR_TO_FIVE_DAYS_VALUE = 6;
    /**
     * <pre>
     * Conversion lag bucket from 5 to 6 days. 5 days is included,
     * 6 days is not.
     * </pre>
     *
     * <code>CONVERSION_FIVE_TO_SIX_DAYS = 7;</code>
     */
    public static final int CONVERSION_FIVE_TO_SIX_DAYS_VALUE = 7;
    /**
     * <pre>
     * Conversion lag bucket from 6 to 7 days. 6 days is included,
     * 7 days is not.
     * </pre>
     *
     * <code>CONVERSION_SIX_TO_SEVEN_DAYS = 8;</code>
     */
    public static final int CONVERSION_SIX_TO_SEVEN_DAYS_VALUE = 8;
    /**
     * <pre>
     * Conversion lag bucket from 7 to 8 days. 7 days is included,
     * 8 days is not.
     * </pre>
     *
     * <code>CONVERSION_SEVEN_TO_EIGHT_DAYS = 9;</code>
     */
    public static final int CONVERSION_SEVEN_TO_EIGHT_DAYS_VALUE = 9;
    /**
     * <pre>
     * Conversion lag bucket from 8 to 9 days. 8 days is included,
     * 9 days is not.
     * </pre>
     *
     * <code>CONVERSION_EIGHT_TO_NINE_DAYS = 10;</code>
     */
    public static final int CONVERSION_EIGHT_TO_NINE_DAYS_VALUE = 10;
    /**
     * <pre>
     * Conversion lag bucket from 9 to 10 days. 9 days is included,
     * 10 days is not.
     * </pre>
     *
     * <code>CONVERSION_NINE_TO_TEN_DAYS = 11;</code>
     */
    public static final int CONVERSION_NINE_TO_TEN_DAYS_VALUE = 11;
    /**
     * <pre>
     * Conversion lag bucket from 10 to 11 days. 10 days is included,
     * 11 days is not.
     * </pre>
     *
     * <code>CONVERSION_TEN_TO_ELEVEN_DAYS = 12;</code>
     */
    public static final int CONVERSION_TEN_TO_ELEVEN_DAYS_VALUE = 12;
    /**
     * <pre>
     * Conversion lag bucket from 11 to 12 days. 11 days is included,
     * 12 days is not.
     * </pre>
     *
     * <code>CONVERSION_ELEVEN_TO_TWELVE_DAYS = 13;</code>
     */
    public static final int CONVERSION_ELEVEN_TO_TWELVE_DAYS_VALUE = 13;
    /**
     * <pre>
     * Conversion lag bucket from 12 to 13 days. 12 days is included,
     * 13 days is not.
     * </pre>
     *
     * <code>CONVERSION_TWELVE_TO_THIRTEEN_DAYS = 14;</code>
     */
    public static final int CONVERSION_TWELVE_TO_THIRTEEN_DAYS_VALUE = 14;
    /**
     * <pre>
     * Conversion lag bucket from 13 to 14 days. 13 days is included,
     * 14 days is not.
     * </pre>
     *
     * <code>CONVERSION_THIRTEEN_TO_FOURTEEN_DAYS = 15;</code>
     */
    public static final int CONVERSION_THIRTEEN_TO_FOURTEEN_DAYS_VALUE = 15;
    /**
     * <pre>
     * Conversion lag bucket from 14 to 21 days. 14 days is included,
     * 21 days is not.
     * </pre>
     *
     * <code>CONVERSION_FOURTEEN_TO_TWENTY_ONE_DAYS = 16;</code>
     */
    public static final int CONVERSION_FOURTEEN_TO_TWENTY_ONE_DAYS_VALUE = 16;
    /**
     * <pre>
     * Conversion lag bucket from 21 to 30 days. 21 days is included,
     * 30 days is not.
     * </pre>
     *
     * <code>CONVERSION_TWENTY_ONE_TO_THIRTY_DAYS = 17;</code>
     */
    public static final int CONVERSION_TWENTY_ONE_TO_THIRTY_DAYS_VALUE = 17;
    /**
     * <pre>
     * Conversion lag bucket from 30 to 45 days. 30 days is included,
     * 45 days is not.
     * </pre>
     *
     * <code>CONVERSION_THIRTY_TO_FORTY_FIVE_DAYS = 18;</code>
     */
    public static final int CONVERSION_THIRTY_TO_FORTY_FIVE_DAYS_VALUE = 18;
    /**
     * <pre>
     * Conversion lag bucket from 45 to 60 days. 45 days is included,
     * 60 days is not.
     * </pre>
     *
     * <code>CONVERSION_FORTY_FIVE_TO_SIXTY_DAYS = 19;</code>
     */
    public static final int CONVERSION_FORTY_FIVE_TO_SIXTY_DAYS_VALUE = 19;
    /**
     * <pre>
     * Conversion lag bucket from 60 to 90 days. 60 days is included,
     * 90 days is not.
     * </pre>
     *
     * <code>CONVERSION_SIXTY_TO_NINETY_DAYS = 20;</code>
     */
    public static final int CONVERSION_SIXTY_TO_NINETY_DAYS_VALUE = 20;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 0 to 1 day. 0 day is included,
     * 1 day is not.
     * </pre>
     *
     * <code>ADJUSTMENT_LESS_THAN_ONE_DAY = 21;</code>
     */
    public static final int ADJUSTMENT_LESS_THAN_ONE_DAY_VALUE = 21;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 1 to 2 days. 1 day is included,
     * 2 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_ONE_TO_TWO_DAYS = 22;</code>
     */
    public static final int ADJUSTMENT_ONE_TO_TWO_DAYS_VALUE = 22;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 2 to 3 days. 2 days is included,
     * 3 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TWO_TO_THREE_DAYS = 23;</code>
     */
    public static final int ADJUSTMENT_TWO_TO_THREE_DAYS_VALUE = 23;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 3 to 4 days. 3 days is included,
     * 4 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_THREE_TO_FOUR_DAYS = 24;</code>
     */
    public static final int ADJUSTMENT_THREE_TO_FOUR_DAYS_VALUE = 24;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 4 to 5 days. 4 days is included,
     * 5 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FOUR_TO_FIVE_DAYS = 25;</code>
     */
    public static final int ADJUSTMENT_FOUR_TO_FIVE_DAYS_VALUE = 25;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 5 to 6 days. 5 days is included,
     * 6 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FIVE_TO_SIX_DAYS = 26;</code>
     */
    public static final int ADJUSTMENT_FIVE_TO_SIX_DAYS_VALUE = 26;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 6 to 7 days. 6 days is included,
     * 7 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_SIX_TO_SEVEN_DAYS = 27;</code>
     */
    public static final int ADJUSTMENT_SIX_TO_SEVEN_DAYS_VALUE = 27;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 7 to 8 days. 7 days is included,
     * 8 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_SEVEN_TO_EIGHT_DAYS = 28;</code>
     */
    public static final int ADJUSTMENT_SEVEN_TO_EIGHT_DAYS_VALUE = 28;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 8 to 9 days. 8 days is included,
     * 9 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_EIGHT_TO_NINE_DAYS = 29;</code>
     */
    public static final int ADJUSTMENT_EIGHT_TO_NINE_DAYS_VALUE = 29;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 9 to 10 days. 9 days is included,
     * 10 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_NINE_TO_TEN_DAYS = 30;</code>
     */
    public static final int ADJUSTMENT_NINE_TO_TEN_DAYS_VALUE = 30;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 10 to 11 days. 10 days is included,
     * 11 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TEN_TO_ELEVEN_DAYS = 31;</code>
     */
    public static final int ADJUSTMENT_TEN_TO_ELEVEN_DAYS_VALUE = 31;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 11 to 12 days. 11 days is included,
     * 12 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_ELEVEN_TO_TWELVE_DAYS = 32;</code>
     */
    public static final int ADJUSTMENT_ELEVEN_TO_TWELVE_DAYS_VALUE = 32;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 12 to 13 days. 12 days is included,
     * 13 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TWELVE_TO_THIRTEEN_DAYS = 33;</code>
     */
    public static final int ADJUSTMENT_TWELVE_TO_THIRTEEN_DAYS_VALUE = 33;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 13 to 14 days. 13 days is included,
     * 14 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_THIRTEEN_TO_FOURTEEN_DAYS = 34;</code>
     */
    public static final int ADJUSTMENT_THIRTEEN_TO_FOURTEEN_DAYS_VALUE = 34;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 14 to 21 days. 14 days is included,
     * 21 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FOURTEEN_TO_TWENTY_ONE_DAYS = 35;</code>
     */
    public static final int ADJUSTMENT_FOURTEEN_TO_TWENTY_ONE_DAYS_VALUE = 35;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 21 to 30 days. 21 days is included,
     * 30 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_TWENTY_ONE_TO_THIRTY_DAYS = 36;</code>
     */
    public static final int ADJUSTMENT_TWENTY_ONE_TO_THIRTY_DAYS_VALUE = 36;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 30 to 45 days. 30 days is included,
     * 45 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_THIRTY_TO_FORTY_FIVE_DAYS = 37;</code>
     */
    public static final int ADJUSTMENT_THIRTY_TO_FORTY_FIVE_DAYS_VALUE = 37;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 45 to 60 days. 45 days is included,
     * 60 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_FORTY_FIVE_TO_SIXTY_DAYS = 38;</code>
     */
    public static final int ADJUSTMENT_FORTY_FIVE_TO_SIXTY_DAYS_VALUE = 38;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 60 to 90 days. 60 days is included,
     * 90 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_SIXTY_TO_NINETY_DAYS = 39;</code>
     */
    public static final int ADJUSTMENT_SIXTY_TO_NINETY_DAYS_VALUE = 39;
    /**
     * <pre>
     * Conversion adjustment lag bucket from 90 to 145 days. 90 days is
     * included, 145 days is not.
     * </pre>
     *
     * <code>ADJUSTMENT_NINETY_TO_ONE_HUNDRED_AND_FORTY_FIVE_DAYS = 40;</code>
     */
    public static final int ADJUSTMENT_NINETY_TO_ONE_HUNDRED_AND_FORTY_FIVE_DAYS_VALUE = 40;
    /**
     * <pre>
     * Conversion lag bucket UNKNOWN. This is for dates before conversion lag
     * bucket was available in Google Ads.
     * </pre>
     *
     * <code>CONVERSION_UNKNOWN = 41;</code>
     */
    public static final int CONVERSION_UNKNOWN_VALUE = 41;
    /**
     * <pre>
     * Conversion adjustment lag bucket UNKNOWN. This is for dates before
     * conversion adjustment lag bucket was available in Google Ads.
     * </pre>
     *
     * <code>ADJUSTMENT_UNKNOWN = 42;</code>
     */
    public static final int ADJUSTMENT_UNKNOWN_VALUE = 42;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConversionOrAdjustmentLagBucket valueOf(int value) {
      return forNumber(value);
    }

    public static ConversionOrAdjustmentLagBucket forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return UNKNOWN;
        case 2: return CONVERSION_LESS_THAN_ONE_DAY;
        case 3: return CONVERSION_ONE_TO_TWO_DAYS;
        case 4: return CONVERSION_TWO_TO_THREE_DAYS;
        case 5: return CONVERSION_THREE_TO_FOUR_DAYS;
        case 6: return CONVERSION_FOUR_TO_FIVE_DAYS;
        case 7: return CONVERSION_FIVE_TO_SIX_DAYS;
        case 8: return CONVERSION_SIX_TO_SEVEN_DAYS;
        case 9: return CONVERSION_SEVEN_TO_EIGHT_DAYS;
        case 10: return CONVERSION_EIGHT_TO_NINE_DAYS;
        case 11: return CONVERSION_NINE_TO_TEN_DAYS;
        case 12: return CONVERSION_TEN_TO_ELEVEN_DAYS;
        case 13: return CONVERSION_ELEVEN_TO_TWELVE_DAYS;
        case 14: return CONVERSION_TWELVE_TO_THIRTEEN_DAYS;
        case 15: return CONVERSION_THIRTEEN_TO_FOURTEEN_DAYS;
        case 16: return CONVERSION_FOURTEEN_TO_TWENTY_ONE_DAYS;
        case 17: return CONVERSION_TWENTY_ONE_TO_THIRTY_DAYS;
        case 18: return CONVERSION_THIRTY_TO_FORTY_FIVE_DAYS;
        case 19: return CONVERSION_FORTY_FIVE_TO_SIXTY_DAYS;
        case 20: return CONVERSION_SIXTY_TO_NINETY_DAYS;
        case 21: return ADJUSTMENT_LESS_THAN_ONE_DAY;
        case 22: return ADJUSTMENT_ONE_TO_TWO_DAYS;
        case 23: return ADJUSTMENT_TWO_TO_THREE_DAYS;
        case 24: return ADJUSTMENT_THREE_TO_FOUR_DAYS;
        case 25: return ADJUSTMENT_FOUR_TO_FIVE_DAYS;
        case 26: return ADJUSTMENT_FIVE_TO_SIX_DAYS;
        case 27: return ADJUSTMENT_SIX_TO_SEVEN_DAYS;
        case 28: return ADJUSTMENT_SEVEN_TO_EIGHT_DAYS;
        case 29: return ADJUSTMENT_EIGHT_TO_NINE_DAYS;
        case 30: return ADJUSTMENT_NINE_TO_TEN_DAYS;
        case 31: return ADJUSTMENT_TEN_TO_ELEVEN_DAYS;
        case 32: return ADJUSTMENT_ELEVEN_TO_TWELVE_DAYS;
        case 33: return ADJUSTMENT_TWELVE_TO_THIRTEEN_DAYS;
        case 34: return ADJUSTMENT_THIRTEEN_TO_FOURTEEN_DAYS;
        case 35: return ADJUSTMENT_FOURTEEN_TO_TWENTY_ONE_DAYS;
        case 36: return ADJUSTMENT_TWENTY_ONE_TO_THIRTY_DAYS;
        case 37: return ADJUSTMENT_THIRTY_TO_FORTY_FIVE_DAYS;
        case 38: return ADJUSTMENT_FORTY_FIVE_TO_SIXTY_DAYS;
        case 39: return ADJUSTMENT_SIXTY_TO_NINETY_DAYS;
        case 40: return ADJUSTMENT_NINETY_TO_ONE_HUNDRED_AND_FORTY_FIVE_DAYS;
        case 41: return CONVERSION_UNKNOWN;
        case 42: return ADJUSTMENT_UNKNOWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConversionOrAdjustmentLagBucket>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConversionOrAdjustmentLagBucket> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConversionOrAdjustmentLagBucket>() {
            public ConversionOrAdjustmentLagBucket findValueByNumber(int number) {
              return ConversionOrAdjustmentLagBucket.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final ConversionOrAdjustmentLagBucket[] VALUES = values();

    public static ConversionOrAdjustmentLagBucket valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConversionOrAdjustmentLagBucket(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.ConversionOrAdjustmentLagBucket)
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum)) {
      return super.equals(obj);
    }
    com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum other = (com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum) obj;

    boolean result = true;
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Container for enum representing the number of days between the impression and
   * the conversion or between the impression and adjustments to the conversion.
   * </pre>
   *
   * Protobuf type {@code google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum)
      com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnumOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketProto.internal_static_google_ads_googleads_v1_enums_ConversionOrAdjustmentLagBucketEnum_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketProto.internal_static_google_ads_googleads_v1_enums_ConversionOrAdjustmentLagBucketEnum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.class, com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.Builder.class);
    }

    // Construct using com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketProto.internal_static_google_ads_googleads_v1_enums_ConversionOrAdjustmentLagBucketEnum_descriptor;
    }

    @java.lang.Override
    public com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum getDefaultInstanceForType() {
      return com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum build() {
      com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum buildPartial() {
      com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum result = new com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum(this);
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum) {
        return mergeFrom((com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum other) {
      if (other == com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum.getDefaultInstance()) return this;
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum)
  }

  // @@protoc_insertion_point(class_scope:google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum)
  private static final com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum();
  }

  public static com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConversionOrAdjustmentLagBucketEnum>
      PARSER = new com.google.protobuf.AbstractParser<ConversionOrAdjustmentLagBucketEnum>() {
    @java.lang.Override
    public ConversionOrAdjustmentLagBucketEnum parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConversionOrAdjustmentLagBucketEnum(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConversionOrAdjustmentLagBucketEnum> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConversionOrAdjustmentLagBucketEnum> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.ads.googleads.v1.enums.ConversionOrAdjustmentLagBucketEnum getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

