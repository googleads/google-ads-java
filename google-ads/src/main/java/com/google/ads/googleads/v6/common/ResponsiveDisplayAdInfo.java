// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/googleads/v6/common/ad_type_infos.proto

package com.google.ads.googleads.v6.common;

/**
 * <pre>
 * A responsive display ad.
 * </pre>
 *
 * Protobuf type {@code google.ads.googleads.v6.common.ResponsiveDisplayAdInfo}
 */
public final class ResponsiveDisplayAdInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.ads.googleads.v6.common.ResponsiveDisplayAdInfo)
    ResponsiveDisplayAdInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ResponsiveDisplayAdInfo.newBuilder() to construct.
  private ResponsiveDisplayAdInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ResponsiveDisplayAdInfo() {
    marketingImages_ = java.util.Collections.emptyList();
    squareMarketingImages_ = java.util.Collections.emptyList();
    logoImages_ = java.util.Collections.emptyList();
    squareLogoImages_ = java.util.Collections.emptyList();
    headlines_ = java.util.Collections.emptyList();
    descriptions_ = java.util.Collections.emptyList();
    youtubeVideos_ = java.util.Collections.emptyList();
    businessName_ = "";
    mainColor_ = "";
    accentColor_ = "";
    callToActionText_ = "";
    pricePrefix_ = "";
    promoText_ = "";
    formatSetting_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ResponsiveDisplayAdInfo();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ResponsiveDisplayAdInfo(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              marketingImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>();
              mutable_bitField0_ |= 0x00000001;
            }
            marketingImages_.add(
                input.readMessage(com.google.ads.googleads.v6.common.AdImageAsset.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              squareMarketingImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>();
              mutable_bitField0_ |= 0x00000002;
            }
            squareMarketingImages_.add(
                input.readMessage(com.google.ads.googleads.v6.common.AdImageAsset.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              logoImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>();
              mutable_bitField0_ |= 0x00000004;
            }
            logoImages_.add(
                input.readMessage(com.google.ads.googleads.v6.common.AdImageAsset.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              squareLogoImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>();
              mutable_bitField0_ |= 0x00000008;
            }
            squareLogoImages_.add(
                input.readMessage(com.google.ads.googleads.v6.common.AdImageAsset.parser(), extensionRegistry));
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              headlines_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdTextAsset>();
              mutable_bitField0_ |= 0x00000010;
            }
            headlines_.add(
                input.readMessage(com.google.ads.googleads.v6.common.AdTextAsset.parser(), extensionRegistry));
            break;
          }
          case 50: {
            com.google.ads.googleads.v6.common.AdTextAsset.Builder subBuilder = null;
            if (longHeadline_ != null) {
              subBuilder = longHeadline_.toBuilder();
            }
            longHeadline_ = input.readMessage(com.google.ads.googleads.v6.common.AdTextAsset.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(longHeadline_);
              longHeadline_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              descriptions_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdTextAsset>();
              mutable_bitField0_ |= 0x00000020;
            }
            descriptions_.add(
                input.readMessage(com.google.ads.googleads.v6.common.AdTextAsset.parser(), extensionRegistry));
            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000040) != 0)) {
              youtubeVideos_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdVideoAsset>();
              mutable_bitField0_ |= 0x00000040;
            }
            youtubeVideos_.add(
                input.readMessage(com.google.ads.googleads.v6.common.AdVideoAsset.parser(), extensionRegistry));
            break;
          }
          case 128: {
            int rawValue = input.readEnum();

            formatSetting_ = rawValue;
            break;
          }
          case 138: {
            java.lang.String s = input.readStringRequireUtf8();
            bitField0_ |= 0x00000001;
            businessName_ = s;
            break;
          }
          case 146: {
            java.lang.String s = input.readStringRequireUtf8();
            bitField0_ |= 0x00000002;
            mainColor_ = s;
            break;
          }
          case 154: {
            java.lang.String s = input.readStringRequireUtf8();
            bitField0_ |= 0x00000004;
            accentColor_ = s;
            break;
          }
          case 160: {
            bitField0_ |= 0x00000008;
            allowFlexibleColor_ = input.readBool();
            break;
          }
          case 170: {
            java.lang.String s = input.readStringRequireUtf8();
            bitField0_ |= 0x00000010;
            callToActionText_ = s;
            break;
          }
          case 178: {
            java.lang.String s = input.readStringRequireUtf8();
            bitField0_ |= 0x00000020;
            pricePrefix_ = s;
            break;
          }
          case 186: {
            java.lang.String s = input.readStringRequireUtf8();
            bitField0_ |= 0x00000040;
            promoText_ = s;
            break;
          }
          case 194: {
            com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.Builder subBuilder = null;
            if (controlSpec_ != null) {
              subBuilder = controlSpec_.toBuilder();
            }
            controlSpec_ = input.readMessage(com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(controlSpec_);
              controlSpec_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        marketingImages_ = java.util.Collections.unmodifiableList(marketingImages_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        squareMarketingImages_ = java.util.Collections.unmodifiableList(squareMarketingImages_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        logoImages_ = java.util.Collections.unmodifiableList(logoImages_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        squareLogoImages_ = java.util.Collections.unmodifiableList(squareLogoImages_);
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        headlines_ = java.util.Collections.unmodifiableList(headlines_);
      }
      if (((mutable_bitField0_ & 0x00000020) != 0)) {
        descriptions_ = java.util.Collections.unmodifiableList(descriptions_);
      }
      if (((mutable_bitField0_ & 0x00000040) != 0)) {
        youtubeVideos_ = java.util.Collections.unmodifiableList(youtubeVideos_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.ads.googleads.v6.common.AdTypeInfosProto.internal_static_google_ads_googleads_v6_common_ResponsiveDisplayAdInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.ads.googleads.v6.common.AdTypeInfosProto.internal_static_google_ads_googleads_v6_common_ResponsiveDisplayAdInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo.class, com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo.Builder.class);
  }

  private int bitField0_;
  public static final int MARKETING_IMAGES_FIELD_NUMBER = 1;
  private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> marketingImages_;
  /**
   * <pre>
   * Marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
   * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
   * square_marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getMarketingImagesList() {
    return marketingImages_;
  }
  /**
   * <pre>
   * Marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
   * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
   * square_marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
      getMarketingImagesOrBuilderList() {
    return marketingImages_;
  }
  /**
   * <pre>
   * Marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
   * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
   * square_marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
   */
  @java.lang.Override
  public int getMarketingImagesCount() {
    return marketingImages_.size();
  }
  /**
   * <pre>
   * Marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
   * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
   * square_marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAsset getMarketingImages(int index) {
    return marketingImages_.get(index);
  }
  /**
   * <pre>
   * Marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
   * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
   * square_marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getMarketingImagesOrBuilder(
      int index) {
    return marketingImages_.get(index);
  }

  public static final int SQUARE_MARKETING_IMAGES_FIELD_NUMBER = 2;
  private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> squareMarketingImages_;
  /**
   * <pre>
   * Square marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
   * be 1:1 (+-1%). At least one square marketing_image is required. Combined
   * with marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getSquareMarketingImagesList() {
    return squareMarketingImages_;
  }
  /**
   * <pre>
   * Square marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
   * be 1:1 (+-1%). At least one square marketing_image is required. Combined
   * with marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
      getSquareMarketingImagesOrBuilderList() {
    return squareMarketingImages_;
  }
  /**
   * <pre>
   * Square marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
   * be 1:1 (+-1%). At least one square marketing_image is required. Combined
   * with marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
   */
  @java.lang.Override
  public int getSquareMarketingImagesCount() {
    return squareMarketingImages_.size();
  }
  /**
   * <pre>
   * Square marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
   * be 1:1 (+-1%). At least one square marketing_image is required. Combined
   * with marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAsset getSquareMarketingImages(int index) {
    return squareMarketingImages_.get(index);
  }
  /**
   * <pre>
   * Square marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
   * be 1:1 (+-1%). At least one square marketing_image is required. Combined
   * with marketing_images the maximum is 15.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getSquareMarketingImagesOrBuilder(
      int index) {
    return squareMarketingImages_.get(index);
  }

  public static final int LOGO_IMAGES_FIELD_NUMBER = 3;
  private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> logoImages_;
  /**
   * <pre>
   * Logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
   * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getLogoImagesList() {
    return logoImages_;
  }
  /**
   * <pre>
   * Logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
   * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
      getLogoImagesOrBuilderList() {
    return logoImages_;
  }
  /**
   * <pre>
   * Logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
   * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
   */
  @java.lang.Override
  public int getLogoImagesCount() {
    return logoImages_.size();
  }
  /**
   * <pre>
   * Logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
   * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAsset getLogoImages(int index) {
    return logoImages_.get(index);
  }
  /**
   * <pre>
   * Logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
   * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getLogoImagesOrBuilder(
      int index) {
    return logoImages_.get(index);
  }

  public static final int SQUARE_LOGO_IMAGES_FIELD_NUMBER = 4;
  private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> squareLogoImages_;
  /**
   * <pre>
   * Square logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
   * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getSquareLogoImagesList() {
    return squareLogoImages_;
  }
  /**
   * <pre>
   * Square logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
   * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
      getSquareLogoImagesOrBuilderList() {
    return squareLogoImages_;
  }
  /**
   * <pre>
   * Square logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
   * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
   */
  @java.lang.Override
  public int getSquareLogoImagesCount() {
    return squareLogoImages_.size();
  }
  /**
   * <pre>
   * Square logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
   * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAsset getSquareLogoImages(int index) {
    return squareLogoImages_.get(index);
  }
  /**
   * <pre>
   * Square logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
   * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getSquareLogoImagesOrBuilder(
      int index) {
    return squareLogoImages_.get(index);
  }

  public static final int HEADLINES_FIELD_NUMBER = 5;
  private java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> headlines_;
  /**
   * <pre>
   * Short format headlines for the ad. The maximum length is 30 characters.
   * At least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> getHeadlinesList() {
    return headlines_;
  }
  /**
   * <pre>
   * Short format headlines for the ad. The maximum length is 30 characters.
   * At least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> 
      getHeadlinesOrBuilderList() {
    return headlines_;
  }
  /**
   * <pre>
   * Short format headlines for the ad. The maximum length is 30 characters.
   * At least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
   */
  @java.lang.Override
  public int getHeadlinesCount() {
    return headlines_.size();
  }
  /**
   * <pre>
   * Short format headlines for the ad. The maximum length is 30 characters.
   * At least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdTextAsset getHeadlines(int index) {
    return headlines_.get(index);
  }
  /**
   * <pre>
   * Short format headlines for the ad. The maximum length is 30 characters.
   * At least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdTextAssetOrBuilder getHeadlinesOrBuilder(
      int index) {
    return headlines_.get(index);
  }

  public static final int LONG_HEADLINE_FIELD_NUMBER = 6;
  private com.google.ads.googleads.v6.common.AdTextAsset longHeadline_;
  /**
   * <pre>
   * A required long format headline. The maximum length is 90 characters.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
   * @return Whether the longHeadline field is set.
   */
  @java.lang.Override
  public boolean hasLongHeadline() {
    return longHeadline_ != null;
  }
  /**
   * <pre>
   * A required long format headline. The maximum length is 90 characters.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
   * @return The longHeadline.
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdTextAsset getLongHeadline() {
    return longHeadline_ == null ? com.google.ads.googleads.v6.common.AdTextAsset.getDefaultInstance() : longHeadline_;
  }
  /**
   * <pre>
   * A required long format headline. The maximum length is 90 characters.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdTextAssetOrBuilder getLongHeadlineOrBuilder() {
    return getLongHeadline();
  }

  public static final int DESCRIPTIONS_FIELD_NUMBER = 7;
  private java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> descriptions_;
  /**
   * <pre>
   * Descriptive texts for the ad. The maximum length is 90 characters. At
   * least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> getDescriptionsList() {
    return descriptions_;
  }
  /**
   * <pre>
   * Descriptive texts for the ad. The maximum length is 90 characters. At
   * least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> 
      getDescriptionsOrBuilderList() {
    return descriptions_;
  }
  /**
   * <pre>
   * Descriptive texts for the ad. The maximum length is 90 characters. At
   * least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
   */
  @java.lang.Override
  public int getDescriptionsCount() {
    return descriptions_.size();
  }
  /**
   * <pre>
   * Descriptive texts for the ad. The maximum length is 90 characters. At
   * least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdTextAsset getDescriptions(int index) {
    return descriptions_.get(index);
  }
  /**
   * <pre>
   * Descriptive texts for the ad. The maximum length is 90 characters. At
   * least 1 and max 5 headlines can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdTextAssetOrBuilder getDescriptionsOrBuilder(
      int index) {
    return descriptions_.get(index);
  }

  public static final int YOUTUBE_VIDEOS_FIELD_NUMBER = 8;
  private java.util.List<com.google.ads.googleads.v6.common.AdVideoAsset> youtubeVideos_;
  /**
   * <pre>
   * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.googleads.v6.common.AdVideoAsset> getYoutubeVideosList() {
    return youtubeVideos_;
  }
  /**
   * <pre>
   * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.googleads.v6.common.AdVideoAssetOrBuilder> 
      getYoutubeVideosOrBuilderList() {
    return youtubeVideos_;
  }
  /**
   * <pre>
   * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
   */
  @java.lang.Override
  public int getYoutubeVideosCount() {
    return youtubeVideos_.size();
  }
  /**
   * <pre>
   * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdVideoAsset getYoutubeVideos(int index) {
    return youtubeVideos_.get(index);
  }
  /**
   * <pre>
   * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
   * </pre>
   *
   * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.AdVideoAssetOrBuilder getYoutubeVideosOrBuilder(
      int index) {
    return youtubeVideos_.get(index);
  }

  public static final int BUSINESS_NAME_FIELD_NUMBER = 17;
  private volatile java.lang.Object businessName_;
  /**
   * <pre>
   * The advertiser/brand name. Maximum display width is 25.
   * </pre>
   *
   * <code>string business_name = 17;</code>
   * @return Whether the businessName field is set.
   */
  @java.lang.Override
  public boolean hasBusinessName() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The advertiser/brand name. Maximum display width is 25.
   * </pre>
   *
   * <code>string business_name = 17;</code>
   * @return The businessName.
   */
  @java.lang.Override
  public java.lang.String getBusinessName() {
    java.lang.Object ref = businessName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      businessName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The advertiser/brand name. Maximum display width is 25.
   * </pre>
   *
   * <code>string business_name = 17;</code>
   * @return The bytes for businessName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getBusinessNameBytes() {
    java.lang.Object ref = businessName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      businessName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MAIN_COLOR_FIELD_NUMBER = 18;
  private volatile java.lang.Object mainColor_;
  /**
   * <pre>
   * The main color of the ad in hexadecimal, e.g. #ffffff for white.
   * If one of main_color and accent_color is set, the other is required as
   * well.
   * </pre>
   *
   * <code>string main_color = 18;</code>
   * @return Whether the mainColor field is set.
   */
  @java.lang.Override
  public boolean hasMainColor() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The main color of the ad in hexadecimal, e.g. #ffffff for white.
   * If one of main_color and accent_color is set, the other is required as
   * well.
   * </pre>
   *
   * <code>string main_color = 18;</code>
   * @return The mainColor.
   */
  @java.lang.Override
  public java.lang.String getMainColor() {
    java.lang.Object ref = mainColor_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      mainColor_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The main color of the ad in hexadecimal, e.g. #ffffff for white.
   * If one of main_color and accent_color is set, the other is required as
   * well.
   * </pre>
   *
   * <code>string main_color = 18;</code>
   * @return The bytes for mainColor.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMainColorBytes() {
    java.lang.Object ref = mainColor_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      mainColor_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ACCENT_COLOR_FIELD_NUMBER = 19;
  private volatile java.lang.Object accentColor_;
  /**
   * <pre>
   * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
   * If one of main_color and accent_color is set, the other is required as
   * well.
   * </pre>
   *
   * <code>string accent_color = 19;</code>
   * @return Whether the accentColor field is set.
   */
  @java.lang.Override
  public boolean hasAccentColor() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
   * If one of main_color and accent_color is set, the other is required as
   * well.
   * </pre>
   *
   * <code>string accent_color = 19;</code>
   * @return The accentColor.
   */
  @java.lang.Override
  public java.lang.String getAccentColor() {
    java.lang.Object ref = accentColor_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      accentColor_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
   * If one of main_color and accent_color is set, the other is required as
   * well.
   * </pre>
   *
   * <code>string accent_color = 19;</code>
   * @return The bytes for accentColor.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAccentColorBytes() {
    java.lang.Object ref = accentColor_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      accentColor_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ALLOW_FLEXIBLE_COLOR_FIELD_NUMBER = 20;
  private boolean allowFlexibleColor_;
  /**
   * <pre>
   * Advertiser's consent to allow flexible color. When true, the ad may be
   * served with different color if necessary. When false, the ad will be served
   * with the specified colors or a neutral color.
   * The default value is true.
   * Must be true if main_color and accent_color are not set.
   * </pre>
   *
   * <code>bool allow_flexible_color = 20;</code>
   * @return Whether the allowFlexibleColor field is set.
   */
  @java.lang.Override
  public boolean hasAllowFlexibleColor() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Advertiser's consent to allow flexible color. When true, the ad may be
   * served with different color if necessary. When false, the ad will be served
   * with the specified colors or a neutral color.
   * The default value is true.
   * Must be true if main_color and accent_color are not set.
   * </pre>
   *
   * <code>bool allow_flexible_color = 20;</code>
   * @return The allowFlexibleColor.
   */
  @java.lang.Override
  public boolean getAllowFlexibleColor() {
    return allowFlexibleColor_;
  }

  public static final int CALL_TO_ACTION_TEXT_FIELD_NUMBER = 21;
  private volatile java.lang.Object callToActionText_;
  /**
   * <pre>
   * The call-to-action text for the ad. Maximum display width is 30.
   * </pre>
   *
   * <code>string call_to_action_text = 21;</code>
   * @return Whether the callToActionText field is set.
   */
  @java.lang.Override
  public boolean hasCallToActionText() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The call-to-action text for the ad. Maximum display width is 30.
   * </pre>
   *
   * <code>string call_to_action_text = 21;</code>
   * @return The callToActionText.
   */
  @java.lang.Override
  public java.lang.String getCallToActionText() {
    java.lang.Object ref = callToActionText_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      callToActionText_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The call-to-action text for the ad. Maximum display width is 30.
   * </pre>
   *
   * <code>string call_to_action_text = 21;</code>
   * @return The bytes for callToActionText.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCallToActionTextBytes() {
    java.lang.Object ref = callToActionText_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      callToActionText_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PRICE_PREFIX_FIELD_NUMBER = 22;
  private volatile java.lang.Object pricePrefix_;
  /**
   * <pre>
   * Prefix before price. E.g. 'as low as'.
   * </pre>
   *
   * <code>string price_prefix = 22;</code>
   * @return Whether the pricePrefix field is set.
   */
  @java.lang.Override
  public boolean hasPricePrefix() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Prefix before price. E.g. 'as low as'.
   * </pre>
   *
   * <code>string price_prefix = 22;</code>
   * @return The pricePrefix.
   */
  @java.lang.Override
  public java.lang.String getPricePrefix() {
    java.lang.Object ref = pricePrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pricePrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Prefix before price. E.g. 'as low as'.
   * </pre>
   *
   * <code>string price_prefix = 22;</code>
   * @return The bytes for pricePrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPricePrefixBytes() {
    java.lang.Object ref = pricePrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      pricePrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PROMO_TEXT_FIELD_NUMBER = 23;
  private volatile java.lang.Object promoText_;
  /**
   * <pre>
   * Promotion text used for dyanmic formats of responsive ads. For example
   * 'Free two-day shipping'.
   * </pre>
   *
   * <code>string promo_text = 23;</code>
   * @return Whether the promoText field is set.
   */
  @java.lang.Override
  public boolean hasPromoText() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Promotion text used for dyanmic formats of responsive ads. For example
   * 'Free two-day shipping'.
   * </pre>
   *
   * <code>string promo_text = 23;</code>
   * @return The promoText.
   */
  @java.lang.Override
  public java.lang.String getPromoText() {
    java.lang.Object ref = promoText_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      promoText_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Promotion text used for dyanmic formats of responsive ads. For example
   * 'Free two-day shipping'.
   * </pre>
   *
   * <code>string promo_text = 23;</code>
   * @return The bytes for promoText.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPromoTextBytes() {
    java.lang.Object ref = promoText_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      promoText_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FORMAT_SETTING_FIELD_NUMBER = 16;
  private int formatSetting_;
  /**
   * <pre>
   * Specifies which format the ad will be served in. Default is ALL_FORMATS.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;</code>
   * @return The enum numeric value on the wire for formatSetting.
   */
  @java.lang.Override public int getFormatSettingValue() {
    return formatSetting_;
  }
  /**
   * <pre>
   * Specifies which format the ad will be served in. Default is ALL_FORMATS.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;</code>
   * @return The formatSetting.
   */
  @java.lang.Override public com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting getFormatSetting() {
    @SuppressWarnings("deprecation")
    com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting result = com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting.valueOf(formatSetting_);
    return result == null ? com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting.UNRECOGNIZED : result;
  }

  public static final int CONTROL_SPEC_FIELD_NUMBER = 24;
  private com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec controlSpec_;
  /**
   * <pre>
   * Specification for various creative controls.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
   * @return Whether the controlSpec field is set.
   */
  @java.lang.Override
  public boolean hasControlSpec() {
    return controlSpec_ != null;
  }
  /**
   * <pre>
   * Specification for various creative controls.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
   * @return The controlSpec.
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec getControlSpec() {
    return controlSpec_ == null ? com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.getDefaultInstance() : controlSpec_;
  }
  /**
   * <pre>
   * Specification for various creative controls.
   * </pre>
   *
   * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
   */
  @java.lang.Override
  public com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpecOrBuilder getControlSpecOrBuilder() {
    return getControlSpec();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < marketingImages_.size(); i++) {
      output.writeMessage(1, marketingImages_.get(i));
    }
    for (int i = 0; i < squareMarketingImages_.size(); i++) {
      output.writeMessage(2, squareMarketingImages_.get(i));
    }
    for (int i = 0; i < logoImages_.size(); i++) {
      output.writeMessage(3, logoImages_.get(i));
    }
    for (int i = 0; i < squareLogoImages_.size(); i++) {
      output.writeMessage(4, squareLogoImages_.get(i));
    }
    for (int i = 0; i < headlines_.size(); i++) {
      output.writeMessage(5, headlines_.get(i));
    }
    if (longHeadline_ != null) {
      output.writeMessage(6, getLongHeadline());
    }
    for (int i = 0; i < descriptions_.size(); i++) {
      output.writeMessage(7, descriptions_.get(i));
    }
    for (int i = 0; i < youtubeVideos_.size(); i++) {
      output.writeMessage(8, youtubeVideos_.get(i));
    }
    if (formatSetting_ != com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting.UNSPECIFIED.getNumber()) {
      output.writeEnum(16, formatSetting_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 17, businessName_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 18, mainColor_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 19, accentColor_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeBool(20, allowFlexibleColor_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 21, callToActionText_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 22, pricePrefix_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 23, promoText_);
    }
    if (controlSpec_ != null) {
      output.writeMessage(24, getControlSpec());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < marketingImages_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, marketingImages_.get(i));
    }
    for (int i = 0; i < squareMarketingImages_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, squareMarketingImages_.get(i));
    }
    for (int i = 0; i < logoImages_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, logoImages_.get(i));
    }
    for (int i = 0; i < squareLogoImages_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, squareLogoImages_.get(i));
    }
    for (int i = 0; i < headlines_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, headlines_.get(i));
    }
    if (longHeadline_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getLongHeadline());
    }
    for (int i = 0; i < descriptions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, descriptions_.get(i));
    }
    for (int i = 0; i < youtubeVideos_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, youtubeVideos_.get(i));
    }
    if (formatSetting_ != com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting.UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(16, formatSetting_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(17, businessName_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, mainColor_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, accentColor_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(20, allowFlexibleColor_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(21, callToActionText_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(22, pricePrefix_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(23, promoText_);
    }
    if (controlSpec_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, getControlSpec());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo)) {
      return super.equals(obj);
    }
    com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo other = (com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo) obj;

    if (!getMarketingImagesList()
        .equals(other.getMarketingImagesList())) return false;
    if (!getSquareMarketingImagesList()
        .equals(other.getSquareMarketingImagesList())) return false;
    if (!getLogoImagesList()
        .equals(other.getLogoImagesList())) return false;
    if (!getSquareLogoImagesList()
        .equals(other.getSquareLogoImagesList())) return false;
    if (!getHeadlinesList()
        .equals(other.getHeadlinesList())) return false;
    if (hasLongHeadline() != other.hasLongHeadline()) return false;
    if (hasLongHeadline()) {
      if (!getLongHeadline()
          .equals(other.getLongHeadline())) return false;
    }
    if (!getDescriptionsList()
        .equals(other.getDescriptionsList())) return false;
    if (!getYoutubeVideosList()
        .equals(other.getYoutubeVideosList())) return false;
    if (hasBusinessName() != other.hasBusinessName()) return false;
    if (hasBusinessName()) {
      if (!getBusinessName()
          .equals(other.getBusinessName())) return false;
    }
    if (hasMainColor() != other.hasMainColor()) return false;
    if (hasMainColor()) {
      if (!getMainColor()
          .equals(other.getMainColor())) return false;
    }
    if (hasAccentColor() != other.hasAccentColor()) return false;
    if (hasAccentColor()) {
      if (!getAccentColor()
          .equals(other.getAccentColor())) return false;
    }
    if (hasAllowFlexibleColor() != other.hasAllowFlexibleColor()) return false;
    if (hasAllowFlexibleColor()) {
      if (getAllowFlexibleColor()
          != other.getAllowFlexibleColor()) return false;
    }
    if (hasCallToActionText() != other.hasCallToActionText()) return false;
    if (hasCallToActionText()) {
      if (!getCallToActionText()
          .equals(other.getCallToActionText())) return false;
    }
    if (hasPricePrefix() != other.hasPricePrefix()) return false;
    if (hasPricePrefix()) {
      if (!getPricePrefix()
          .equals(other.getPricePrefix())) return false;
    }
    if (hasPromoText() != other.hasPromoText()) return false;
    if (hasPromoText()) {
      if (!getPromoText()
          .equals(other.getPromoText())) return false;
    }
    if (formatSetting_ != other.formatSetting_) return false;
    if (hasControlSpec() != other.hasControlSpec()) return false;
    if (hasControlSpec()) {
      if (!getControlSpec()
          .equals(other.getControlSpec())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getMarketingImagesCount() > 0) {
      hash = (37 * hash) + MARKETING_IMAGES_FIELD_NUMBER;
      hash = (53 * hash) + getMarketingImagesList().hashCode();
    }
    if (getSquareMarketingImagesCount() > 0) {
      hash = (37 * hash) + SQUARE_MARKETING_IMAGES_FIELD_NUMBER;
      hash = (53 * hash) + getSquareMarketingImagesList().hashCode();
    }
    if (getLogoImagesCount() > 0) {
      hash = (37 * hash) + LOGO_IMAGES_FIELD_NUMBER;
      hash = (53 * hash) + getLogoImagesList().hashCode();
    }
    if (getSquareLogoImagesCount() > 0) {
      hash = (37 * hash) + SQUARE_LOGO_IMAGES_FIELD_NUMBER;
      hash = (53 * hash) + getSquareLogoImagesList().hashCode();
    }
    if (getHeadlinesCount() > 0) {
      hash = (37 * hash) + HEADLINES_FIELD_NUMBER;
      hash = (53 * hash) + getHeadlinesList().hashCode();
    }
    if (hasLongHeadline()) {
      hash = (37 * hash) + LONG_HEADLINE_FIELD_NUMBER;
      hash = (53 * hash) + getLongHeadline().hashCode();
    }
    if (getDescriptionsCount() > 0) {
      hash = (37 * hash) + DESCRIPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getDescriptionsList().hashCode();
    }
    if (getYoutubeVideosCount() > 0) {
      hash = (37 * hash) + YOUTUBE_VIDEOS_FIELD_NUMBER;
      hash = (53 * hash) + getYoutubeVideosList().hashCode();
    }
    if (hasBusinessName()) {
      hash = (37 * hash) + BUSINESS_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getBusinessName().hashCode();
    }
    if (hasMainColor()) {
      hash = (37 * hash) + MAIN_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getMainColor().hashCode();
    }
    if (hasAccentColor()) {
      hash = (37 * hash) + ACCENT_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getAccentColor().hashCode();
    }
    if (hasAllowFlexibleColor()) {
      hash = (37 * hash) + ALLOW_FLEXIBLE_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getAllowFlexibleColor());
    }
    if (hasCallToActionText()) {
      hash = (37 * hash) + CALL_TO_ACTION_TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getCallToActionText().hashCode();
    }
    if (hasPricePrefix()) {
      hash = (37 * hash) + PRICE_PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getPricePrefix().hashCode();
    }
    if (hasPromoText()) {
      hash = (37 * hash) + PROMO_TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getPromoText().hashCode();
    }
    hash = (37 * hash) + FORMAT_SETTING_FIELD_NUMBER;
    hash = (53 * hash) + formatSetting_;
    if (hasControlSpec()) {
      hash = (37 * hash) + CONTROL_SPEC_FIELD_NUMBER;
      hash = (53 * hash) + getControlSpec().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A responsive display ad.
   * </pre>
   *
   * Protobuf type {@code google.ads.googleads.v6.common.ResponsiveDisplayAdInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.ads.googleads.v6.common.ResponsiveDisplayAdInfo)
      com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.ads.googleads.v6.common.AdTypeInfosProto.internal_static_google_ads_googleads_v6_common_ResponsiveDisplayAdInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.googleads.v6.common.AdTypeInfosProto.internal_static_google_ads_googleads_v6_common_ResponsiveDisplayAdInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo.class, com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo.Builder.class);
    }

    // Construct using com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getMarketingImagesFieldBuilder();
        getSquareMarketingImagesFieldBuilder();
        getLogoImagesFieldBuilder();
        getSquareLogoImagesFieldBuilder();
        getHeadlinesFieldBuilder();
        getDescriptionsFieldBuilder();
        getYoutubeVideosFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (marketingImagesBuilder_ == null) {
        marketingImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        marketingImagesBuilder_.clear();
      }
      if (squareMarketingImagesBuilder_ == null) {
        squareMarketingImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        squareMarketingImagesBuilder_.clear();
      }
      if (logoImagesBuilder_ == null) {
        logoImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        logoImagesBuilder_.clear();
      }
      if (squareLogoImagesBuilder_ == null) {
        squareLogoImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        squareLogoImagesBuilder_.clear();
      }
      if (headlinesBuilder_ == null) {
        headlines_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        headlinesBuilder_.clear();
      }
      if (longHeadlineBuilder_ == null) {
        longHeadline_ = null;
      } else {
        longHeadline_ = null;
        longHeadlineBuilder_ = null;
      }
      if (descriptionsBuilder_ == null) {
        descriptions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
      } else {
        descriptionsBuilder_.clear();
      }
      if (youtubeVideosBuilder_ == null) {
        youtubeVideos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
      } else {
        youtubeVideosBuilder_.clear();
      }
      businessName_ = "";
      bitField0_ = (bitField0_ & ~0x00000080);
      mainColor_ = "";
      bitField0_ = (bitField0_ & ~0x00000100);
      accentColor_ = "";
      bitField0_ = (bitField0_ & ~0x00000200);
      allowFlexibleColor_ = false;
      bitField0_ = (bitField0_ & ~0x00000400);
      callToActionText_ = "";
      bitField0_ = (bitField0_ & ~0x00000800);
      pricePrefix_ = "";
      bitField0_ = (bitField0_ & ~0x00001000);
      promoText_ = "";
      bitField0_ = (bitField0_ & ~0x00002000);
      formatSetting_ = 0;

      if (controlSpecBuilder_ == null) {
        controlSpec_ = null;
      } else {
        controlSpec_ = null;
        controlSpecBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.ads.googleads.v6.common.AdTypeInfosProto.internal_static_google_ads_googleads_v6_common_ResponsiveDisplayAdInfo_descriptor;
    }

    @java.lang.Override
    public com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo getDefaultInstanceForType() {
      return com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo build() {
      com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo buildPartial() {
      com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo result = new com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (marketingImagesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          marketingImages_ = java.util.Collections.unmodifiableList(marketingImages_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.marketingImages_ = marketingImages_;
      } else {
        result.marketingImages_ = marketingImagesBuilder_.build();
      }
      if (squareMarketingImagesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          squareMarketingImages_ = java.util.Collections.unmodifiableList(squareMarketingImages_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.squareMarketingImages_ = squareMarketingImages_;
      } else {
        result.squareMarketingImages_ = squareMarketingImagesBuilder_.build();
      }
      if (logoImagesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          logoImages_ = java.util.Collections.unmodifiableList(logoImages_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.logoImages_ = logoImages_;
      } else {
        result.logoImages_ = logoImagesBuilder_.build();
      }
      if (squareLogoImagesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          squareLogoImages_ = java.util.Collections.unmodifiableList(squareLogoImages_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.squareLogoImages_ = squareLogoImages_;
      } else {
        result.squareLogoImages_ = squareLogoImagesBuilder_.build();
      }
      if (headlinesBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          headlines_ = java.util.Collections.unmodifiableList(headlines_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.headlines_ = headlines_;
      } else {
        result.headlines_ = headlinesBuilder_.build();
      }
      if (longHeadlineBuilder_ == null) {
        result.longHeadline_ = longHeadline_;
      } else {
        result.longHeadline_ = longHeadlineBuilder_.build();
      }
      if (descriptionsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          descriptions_ = java.util.Collections.unmodifiableList(descriptions_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.descriptions_ = descriptions_;
      } else {
        result.descriptions_ = descriptionsBuilder_.build();
      }
      if (youtubeVideosBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)) {
          youtubeVideos_ = java.util.Collections.unmodifiableList(youtubeVideos_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.youtubeVideos_ = youtubeVideos_;
      } else {
        result.youtubeVideos_ = youtubeVideosBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        to_bitField0_ |= 0x00000001;
      }
      result.businessName_ = businessName_;
      if (((from_bitField0_ & 0x00000100) != 0)) {
        to_bitField0_ |= 0x00000002;
      }
      result.mainColor_ = mainColor_;
      if (((from_bitField0_ & 0x00000200) != 0)) {
        to_bitField0_ |= 0x00000004;
      }
      result.accentColor_ = accentColor_;
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.allowFlexibleColor_ = allowFlexibleColor_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        to_bitField0_ |= 0x00000010;
      }
      result.callToActionText_ = callToActionText_;
      if (((from_bitField0_ & 0x00001000) != 0)) {
        to_bitField0_ |= 0x00000020;
      }
      result.pricePrefix_ = pricePrefix_;
      if (((from_bitField0_ & 0x00002000) != 0)) {
        to_bitField0_ |= 0x00000040;
      }
      result.promoText_ = promoText_;
      result.formatSetting_ = formatSetting_;
      if (controlSpecBuilder_ == null) {
        result.controlSpec_ = controlSpec_;
      } else {
        result.controlSpec_ = controlSpecBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo) {
        return mergeFrom((com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo other) {
      if (other == com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo.getDefaultInstance()) return this;
      if (marketingImagesBuilder_ == null) {
        if (!other.marketingImages_.isEmpty()) {
          if (marketingImages_.isEmpty()) {
            marketingImages_ = other.marketingImages_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureMarketingImagesIsMutable();
            marketingImages_.addAll(other.marketingImages_);
          }
          onChanged();
        }
      } else {
        if (!other.marketingImages_.isEmpty()) {
          if (marketingImagesBuilder_.isEmpty()) {
            marketingImagesBuilder_.dispose();
            marketingImagesBuilder_ = null;
            marketingImages_ = other.marketingImages_;
            bitField0_ = (bitField0_ & ~0x00000001);
            marketingImagesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getMarketingImagesFieldBuilder() : null;
          } else {
            marketingImagesBuilder_.addAllMessages(other.marketingImages_);
          }
        }
      }
      if (squareMarketingImagesBuilder_ == null) {
        if (!other.squareMarketingImages_.isEmpty()) {
          if (squareMarketingImages_.isEmpty()) {
            squareMarketingImages_ = other.squareMarketingImages_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSquareMarketingImagesIsMutable();
            squareMarketingImages_.addAll(other.squareMarketingImages_);
          }
          onChanged();
        }
      } else {
        if (!other.squareMarketingImages_.isEmpty()) {
          if (squareMarketingImagesBuilder_.isEmpty()) {
            squareMarketingImagesBuilder_.dispose();
            squareMarketingImagesBuilder_ = null;
            squareMarketingImages_ = other.squareMarketingImages_;
            bitField0_ = (bitField0_ & ~0x00000002);
            squareMarketingImagesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSquareMarketingImagesFieldBuilder() : null;
          } else {
            squareMarketingImagesBuilder_.addAllMessages(other.squareMarketingImages_);
          }
        }
      }
      if (logoImagesBuilder_ == null) {
        if (!other.logoImages_.isEmpty()) {
          if (logoImages_.isEmpty()) {
            logoImages_ = other.logoImages_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureLogoImagesIsMutable();
            logoImages_.addAll(other.logoImages_);
          }
          onChanged();
        }
      } else {
        if (!other.logoImages_.isEmpty()) {
          if (logoImagesBuilder_.isEmpty()) {
            logoImagesBuilder_.dispose();
            logoImagesBuilder_ = null;
            logoImages_ = other.logoImages_;
            bitField0_ = (bitField0_ & ~0x00000004);
            logoImagesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLogoImagesFieldBuilder() : null;
          } else {
            logoImagesBuilder_.addAllMessages(other.logoImages_);
          }
        }
      }
      if (squareLogoImagesBuilder_ == null) {
        if (!other.squareLogoImages_.isEmpty()) {
          if (squareLogoImages_.isEmpty()) {
            squareLogoImages_ = other.squareLogoImages_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSquareLogoImagesIsMutable();
            squareLogoImages_.addAll(other.squareLogoImages_);
          }
          onChanged();
        }
      } else {
        if (!other.squareLogoImages_.isEmpty()) {
          if (squareLogoImagesBuilder_.isEmpty()) {
            squareLogoImagesBuilder_.dispose();
            squareLogoImagesBuilder_ = null;
            squareLogoImages_ = other.squareLogoImages_;
            bitField0_ = (bitField0_ & ~0x00000008);
            squareLogoImagesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSquareLogoImagesFieldBuilder() : null;
          } else {
            squareLogoImagesBuilder_.addAllMessages(other.squareLogoImages_);
          }
        }
      }
      if (headlinesBuilder_ == null) {
        if (!other.headlines_.isEmpty()) {
          if (headlines_.isEmpty()) {
            headlines_ = other.headlines_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureHeadlinesIsMutable();
            headlines_.addAll(other.headlines_);
          }
          onChanged();
        }
      } else {
        if (!other.headlines_.isEmpty()) {
          if (headlinesBuilder_.isEmpty()) {
            headlinesBuilder_.dispose();
            headlinesBuilder_ = null;
            headlines_ = other.headlines_;
            bitField0_ = (bitField0_ & ~0x00000010);
            headlinesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHeadlinesFieldBuilder() : null;
          } else {
            headlinesBuilder_.addAllMessages(other.headlines_);
          }
        }
      }
      if (other.hasLongHeadline()) {
        mergeLongHeadline(other.getLongHeadline());
      }
      if (descriptionsBuilder_ == null) {
        if (!other.descriptions_.isEmpty()) {
          if (descriptions_.isEmpty()) {
            descriptions_ = other.descriptions_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDescriptionsIsMutable();
            descriptions_.addAll(other.descriptions_);
          }
          onChanged();
        }
      } else {
        if (!other.descriptions_.isEmpty()) {
          if (descriptionsBuilder_.isEmpty()) {
            descriptionsBuilder_.dispose();
            descriptionsBuilder_ = null;
            descriptions_ = other.descriptions_;
            bitField0_ = (bitField0_ & ~0x00000020);
            descriptionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDescriptionsFieldBuilder() : null;
          } else {
            descriptionsBuilder_.addAllMessages(other.descriptions_);
          }
        }
      }
      if (youtubeVideosBuilder_ == null) {
        if (!other.youtubeVideos_.isEmpty()) {
          if (youtubeVideos_.isEmpty()) {
            youtubeVideos_ = other.youtubeVideos_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureYoutubeVideosIsMutable();
            youtubeVideos_.addAll(other.youtubeVideos_);
          }
          onChanged();
        }
      } else {
        if (!other.youtubeVideos_.isEmpty()) {
          if (youtubeVideosBuilder_.isEmpty()) {
            youtubeVideosBuilder_.dispose();
            youtubeVideosBuilder_ = null;
            youtubeVideos_ = other.youtubeVideos_;
            bitField0_ = (bitField0_ & ~0x00000040);
            youtubeVideosBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getYoutubeVideosFieldBuilder() : null;
          } else {
            youtubeVideosBuilder_.addAllMessages(other.youtubeVideos_);
          }
        }
      }
      if (other.hasBusinessName()) {
        bitField0_ |= 0x00000080;
        businessName_ = other.businessName_;
        onChanged();
      }
      if (other.hasMainColor()) {
        bitField0_ |= 0x00000100;
        mainColor_ = other.mainColor_;
        onChanged();
      }
      if (other.hasAccentColor()) {
        bitField0_ |= 0x00000200;
        accentColor_ = other.accentColor_;
        onChanged();
      }
      if (other.hasAllowFlexibleColor()) {
        setAllowFlexibleColor(other.getAllowFlexibleColor());
      }
      if (other.hasCallToActionText()) {
        bitField0_ |= 0x00000800;
        callToActionText_ = other.callToActionText_;
        onChanged();
      }
      if (other.hasPricePrefix()) {
        bitField0_ |= 0x00001000;
        pricePrefix_ = other.pricePrefix_;
        onChanged();
      }
      if (other.hasPromoText()) {
        bitField0_ |= 0x00002000;
        promoText_ = other.promoText_;
        onChanged();
      }
      if (other.formatSetting_ != 0) {
        setFormatSettingValue(other.getFormatSettingValue());
      }
      if (other.hasControlSpec()) {
        mergeControlSpec(other.getControlSpec());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> marketingImages_ =
      java.util.Collections.emptyList();
    private void ensureMarketingImagesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        marketingImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>(marketingImages_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> marketingImagesBuilder_;

    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getMarketingImagesList() {
      if (marketingImagesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(marketingImages_);
      } else {
        return marketingImagesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public int getMarketingImagesCount() {
      if (marketingImagesBuilder_ == null) {
        return marketingImages_.size();
      } else {
        return marketingImagesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset getMarketingImages(int index) {
      if (marketingImagesBuilder_ == null) {
        return marketingImages_.get(index);
      } else {
        return marketingImagesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder setMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (marketingImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMarketingImagesIsMutable();
        marketingImages_.set(index, value);
        onChanged();
      } else {
        marketingImagesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder setMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (marketingImagesBuilder_ == null) {
        ensureMarketingImagesIsMutable();
        marketingImages_.set(index, builderForValue.build());
        onChanged();
      } else {
        marketingImagesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder addMarketingImages(com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (marketingImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMarketingImagesIsMutable();
        marketingImages_.add(value);
        onChanged();
      } else {
        marketingImagesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder addMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (marketingImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMarketingImagesIsMutable();
        marketingImages_.add(index, value);
        onChanged();
      } else {
        marketingImagesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder addMarketingImages(
        com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (marketingImagesBuilder_ == null) {
        ensureMarketingImagesIsMutable();
        marketingImages_.add(builderForValue.build());
        onChanged();
      } else {
        marketingImagesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder addMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (marketingImagesBuilder_ == null) {
        ensureMarketingImagesIsMutable();
        marketingImages_.add(index, builderForValue.build());
        onChanged();
      } else {
        marketingImagesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder addAllMarketingImages(
        java.lang.Iterable<? extends com.google.ads.googleads.v6.common.AdImageAsset> values) {
      if (marketingImagesBuilder_ == null) {
        ensureMarketingImagesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, marketingImages_);
        onChanged();
      } else {
        marketingImagesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder clearMarketingImages() {
      if (marketingImagesBuilder_ == null) {
        marketingImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        marketingImagesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public Builder removeMarketingImages(int index) {
      if (marketingImagesBuilder_ == null) {
        ensureMarketingImagesIsMutable();
        marketingImages_.remove(index);
        onChanged();
      } else {
        marketingImagesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder getMarketingImagesBuilder(
        int index) {
      return getMarketingImagesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getMarketingImagesOrBuilder(
        int index) {
      if (marketingImagesBuilder_ == null) {
        return marketingImages_.get(index);  } else {
        return marketingImagesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
         getMarketingImagesOrBuilderList() {
      if (marketingImagesBuilder_ != null) {
        return marketingImagesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(marketingImages_);
      }
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addMarketingImagesBuilder() {
      return getMarketingImagesFieldBuilder().addBuilder(
          com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addMarketingImagesBuilder(
        int index) {
      return getMarketingImagesFieldBuilder().addBuilder(
          index, com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one marketing_image is required. Combined with
     * square_marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset marketing_images = 1;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset.Builder> 
         getMarketingImagesBuilderList() {
      return getMarketingImagesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
        getMarketingImagesFieldBuilder() {
      if (marketingImagesBuilder_ == null) {
        marketingImagesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder>(
                marketingImages_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        marketingImages_ = null;
      }
      return marketingImagesBuilder_;
    }

    private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> squareMarketingImages_ =
      java.util.Collections.emptyList();
    private void ensureSquareMarketingImagesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        squareMarketingImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>(squareMarketingImages_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> squareMarketingImagesBuilder_;

    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getSquareMarketingImagesList() {
      if (squareMarketingImagesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(squareMarketingImages_);
      } else {
        return squareMarketingImagesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public int getSquareMarketingImagesCount() {
      if (squareMarketingImagesBuilder_ == null) {
        return squareMarketingImages_.size();
      } else {
        return squareMarketingImagesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset getSquareMarketingImages(int index) {
      if (squareMarketingImagesBuilder_ == null) {
        return squareMarketingImages_.get(index);
      } else {
        return squareMarketingImagesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder setSquareMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (squareMarketingImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSquareMarketingImagesIsMutable();
        squareMarketingImages_.set(index, value);
        onChanged();
      } else {
        squareMarketingImagesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder setSquareMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (squareMarketingImagesBuilder_ == null) {
        ensureSquareMarketingImagesIsMutable();
        squareMarketingImages_.set(index, builderForValue.build());
        onChanged();
      } else {
        squareMarketingImagesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder addSquareMarketingImages(com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (squareMarketingImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSquareMarketingImagesIsMutable();
        squareMarketingImages_.add(value);
        onChanged();
      } else {
        squareMarketingImagesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder addSquareMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (squareMarketingImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSquareMarketingImagesIsMutable();
        squareMarketingImages_.add(index, value);
        onChanged();
      } else {
        squareMarketingImagesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder addSquareMarketingImages(
        com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (squareMarketingImagesBuilder_ == null) {
        ensureSquareMarketingImagesIsMutable();
        squareMarketingImages_.add(builderForValue.build());
        onChanged();
      } else {
        squareMarketingImagesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder addSquareMarketingImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (squareMarketingImagesBuilder_ == null) {
        ensureSquareMarketingImagesIsMutable();
        squareMarketingImages_.add(index, builderForValue.build());
        onChanged();
      } else {
        squareMarketingImagesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder addAllSquareMarketingImages(
        java.lang.Iterable<? extends com.google.ads.googleads.v6.common.AdImageAsset> values) {
      if (squareMarketingImagesBuilder_ == null) {
        ensureSquareMarketingImagesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, squareMarketingImages_);
        onChanged();
      } else {
        squareMarketingImagesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder clearSquareMarketingImages() {
      if (squareMarketingImagesBuilder_ == null) {
        squareMarketingImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        squareMarketingImagesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public Builder removeSquareMarketingImages(int index) {
      if (squareMarketingImagesBuilder_ == null) {
        ensureSquareMarketingImagesIsMutable();
        squareMarketingImages_.remove(index);
        onChanged();
      } else {
        squareMarketingImagesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder getSquareMarketingImagesBuilder(
        int index) {
      return getSquareMarketingImagesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getSquareMarketingImagesOrBuilder(
        int index) {
      if (squareMarketingImagesBuilder_ == null) {
        return squareMarketingImages_.get(index);  } else {
        return squareMarketingImagesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
         getSquareMarketingImagesOrBuilderList() {
      if (squareMarketingImagesBuilder_ != null) {
        return squareMarketingImagesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(squareMarketingImages_);
      }
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addSquareMarketingImagesBuilder() {
      return getSquareMarketingImagesFieldBuilder().addBuilder(
          com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addSquareMarketingImagesBuilder(
        int index) {
      return getSquareMarketingImagesFieldBuilder().addBuilder(
          index, com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square marketing_image is required. Combined
     * with marketing_images the maximum is 15.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_marketing_images = 2;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset.Builder> 
         getSquareMarketingImagesBuilderList() {
      return getSquareMarketingImagesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
        getSquareMarketingImagesFieldBuilder() {
      if (squareMarketingImagesBuilder_ == null) {
        squareMarketingImagesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder>(
                squareMarketingImages_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        squareMarketingImages_ = null;
      }
      return squareMarketingImagesBuilder_;
    }

    private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> logoImages_ =
      java.util.Collections.emptyList();
    private void ensureLogoImagesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        logoImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>(logoImages_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> logoImagesBuilder_;

    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getLogoImagesList() {
      if (logoImagesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(logoImages_);
      } else {
        return logoImagesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public int getLogoImagesCount() {
      if (logoImagesBuilder_ == null) {
        return logoImages_.size();
      } else {
        return logoImagesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset getLogoImages(int index) {
      if (logoImagesBuilder_ == null) {
        return logoImages_.get(index);
      } else {
        return logoImagesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder setLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (logoImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLogoImagesIsMutable();
        logoImages_.set(index, value);
        onChanged();
      } else {
        logoImagesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder setLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (logoImagesBuilder_ == null) {
        ensureLogoImagesIsMutable();
        logoImages_.set(index, builderForValue.build());
        onChanged();
      } else {
        logoImagesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder addLogoImages(com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (logoImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLogoImagesIsMutable();
        logoImages_.add(value);
        onChanged();
      } else {
        logoImagesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder addLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (logoImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLogoImagesIsMutable();
        logoImages_.add(index, value);
        onChanged();
      } else {
        logoImagesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder addLogoImages(
        com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (logoImagesBuilder_ == null) {
        ensureLogoImagesIsMutable();
        logoImages_.add(builderForValue.build());
        onChanged();
      } else {
        logoImagesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder addLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (logoImagesBuilder_ == null) {
        ensureLogoImagesIsMutable();
        logoImages_.add(index, builderForValue.build());
        onChanged();
      } else {
        logoImagesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder addAllLogoImages(
        java.lang.Iterable<? extends com.google.ads.googleads.v6.common.AdImageAsset> values) {
      if (logoImagesBuilder_ == null) {
        ensureLogoImagesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, logoImages_);
        onChanged();
      } else {
        logoImagesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder clearLogoImages() {
      if (logoImagesBuilder_ == null) {
        logoImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        logoImagesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public Builder removeLogoImages(int index) {
      if (logoImagesBuilder_ == null) {
        ensureLogoImagesIsMutable();
        logoImages_.remove(index);
        onChanged();
      } else {
        logoImagesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder getLogoImagesBuilder(
        int index) {
      return getLogoImagesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getLogoImagesOrBuilder(
        int index) {
      if (logoImagesBuilder_ == null) {
        return logoImages_.get(index);  } else {
        return logoImagesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
         getLogoImagesOrBuilderList() {
      if (logoImagesBuilder_ != null) {
        return logoImagesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(logoImages_);
      }
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addLogoImagesBuilder() {
      return getLogoImagesFieldBuilder().addBuilder(
          com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addLogoImagesBuilder(
        int index) {
      return getLogoImagesFieldBuilder().addBuilder(
          index, com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset logo_images = 3;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset.Builder> 
         getLogoImagesBuilderList() {
      return getLogoImagesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
        getLogoImagesFieldBuilder() {
      if (logoImagesBuilder_ == null) {
        logoImagesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder>(
                logoImages_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        logoImages_ = null;
      }
      return logoImagesBuilder_;
    }

    private java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> squareLogoImages_ =
      java.util.Collections.emptyList();
    private void ensureSquareLogoImagesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        squareLogoImages_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdImageAsset>(squareLogoImages_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> squareLogoImagesBuilder_;

    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset> getSquareLogoImagesList() {
      if (squareLogoImagesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(squareLogoImages_);
      } else {
        return squareLogoImagesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public int getSquareLogoImagesCount() {
      if (squareLogoImagesBuilder_ == null) {
        return squareLogoImages_.size();
      } else {
        return squareLogoImagesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset getSquareLogoImages(int index) {
      if (squareLogoImagesBuilder_ == null) {
        return squareLogoImages_.get(index);
      } else {
        return squareLogoImagesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder setSquareLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (squareLogoImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSquareLogoImagesIsMutable();
        squareLogoImages_.set(index, value);
        onChanged();
      } else {
        squareLogoImagesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder setSquareLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (squareLogoImagesBuilder_ == null) {
        ensureSquareLogoImagesIsMutable();
        squareLogoImages_.set(index, builderForValue.build());
        onChanged();
      } else {
        squareLogoImagesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder addSquareLogoImages(com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (squareLogoImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSquareLogoImagesIsMutable();
        squareLogoImages_.add(value);
        onChanged();
      } else {
        squareLogoImagesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder addSquareLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset value) {
      if (squareLogoImagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSquareLogoImagesIsMutable();
        squareLogoImages_.add(index, value);
        onChanged();
      } else {
        squareLogoImagesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder addSquareLogoImages(
        com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (squareLogoImagesBuilder_ == null) {
        ensureSquareLogoImagesIsMutable();
        squareLogoImages_.add(builderForValue.build());
        onChanged();
      } else {
        squareLogoImagesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder addSquareLogoImages(
        int index, com.google.ads.googleads.v6.common.AdImageAsset.Builder builderForValue) {
      if (squareLogoImagesBuilder_ == null) {
        ensureSquareLogoImagesIsMutable();
        squareLogoImages_.add(index, builderForValue.build());
        onChanged();
      } else {
        squareLogoImagesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder addAllSquareLogoImages(
        java.lang.Iterable<? extends com.google.ads.googleads.v6.common.AdImageAsset> values) {
      if (squareLogoImagesBuilder_ == null) {
        ensureSquareLogoImagesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, squareLogoImages_);
        onChanged();
      } else {
        squareLogoImagesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder clearSquareLogoImages() {
      if (squareLogoImagesBuilder_ == null) {
        squareLogoImages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        squareLogoImagesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public Builder removeSquareLogoImages(int index) {
      if (squareLogoImagesBuilder_ == null) {
        ensureSquareLogoImagesIsMutable();
        squareLogoImages_.remove(index);
        onChanged();
      } else {
        squareLogoImagesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder getSquareLogoImagesBuilder(
        int index) {
      return getSquareLogoImagesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAssetOrBuilder getSquareLogoImagesOrBuilder(
        int index) {
      if (squareLogoImagesBuilder_ == null) {
        return squareLogoImages_.get(index);  } else {
        return squareLogoImagesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public java.util.List<? extends com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
         getSquareLogoImagesOrBuilderList() {
      if (squareLogoImagesBuilder_ != null) {
        return squareLogoImagesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(squareLogoImages_);
      }
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addSquareLogoImagesBuilder() {
      return getSquareLogoImagesFieldBuilder().addBuilder(
          com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public com.google.ads.googleads.v6.common.AdImageAsset.Builder addSquareLogoImagesBuilder(
        int index) {
      return getSquareLogoImagesFieldBuilder().addBuilder(
          index, com.google.ads.googleads.v6.common.AdImageAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with square_logo_images the maximum is 5.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdImageAsset square_logo_images = 4;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdImageAsset.Builder> 
         getSquareLogoImagesBuilderList() {
      return getSquareLogoImagesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder> 
        getSquareLogoImagesFieldBuilder() {
      if (squareLogoImagesBuilder_ == null) {
        squareLogoImagesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdImageAsset, com.google.ads.googleads.v6.common.AdImageAsset.Builder, com.google.ads.googleads.v6.common.AdImageAssetOrBuilder>(
                squareLogoImages_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        squareLogoImages_ = null;
      }
      return squareLogoImagesBuilder_;
    }

    private java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> headlines_ =
      java.util.Collections.emptyList();
    private void ensureHeadlinesIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        headlines_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdTextAsset>(headlines_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> headlinesBuilder_;

    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> getHeadlinesList() {
      if (headlinesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(headlines_);
      } else {
        return headlinesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public int getHeadlinesCount() {
      if (headlinesBuilder_ == null) {
        return headlines_.size();
      } else {
        return headlinesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset getHeadlines(int index) {
      if (headlinesBuilder_ == null) {
        return headlines_.get(index);
      } else {
        return headlinesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder setHeadlines(
        int index, com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (headlinesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadlinesIsMutable();
        headlines_.set(index, value);
        onChanged();
      } else {
        headlinesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder setHeadlines(
        int index, com.google.ads.googleads.v6.common.AdTextAsset.Builder builderForValue) {
      if (headlinesBuilder_ == null) {
        ensureHeadlinesIsMutable();
        headlines_.set(index, builderForValue.build());
        onChanged();
      } else {
        headlinesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder addHeadlines(com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (headlinesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadlinesIsMutable();
        headlines_.add(value);
        onChanged();
      } else {
        headlinesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder addHeadlines(
        int index, com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (headlinesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadlinesIsMutable();
        headlines_.add(index, value);
        onChanged();
      } else {
        headlinesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder addHeadlines(
        com.google.ads.googleads.v6.common.AdTextAsset.Builder builderForValue) {
      if (headlinesBuilder_ == null) {
        ensureHeadlinesIsMutable();
        headlines_.add(builderForValue.build());
        onChanged();
      } else {
        headlinesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder addHeadlines(
        int index, com.google.ads.googleads.v6.common.AdTextAsset.Builder builderForValue) {
      if (headlinesBuilder_ == null) {
        ensureHeadlinesIsMutable();
        headlines_.add(index, builderForValue.build());
        onChanged();
      } else {
        headlinesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder addAllHeadlines(
        java.lang.Iterable<? extends com.google.ads.googleads.v6.common.AdTextAsset> values) {
      if (headlinesBuilder_ == null) {
        ensureHeadlinesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, headlines_);
        onChanged();
      } else {
        headlinesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder clearHeadlines() {
      if (headlinesBuilder_ == null) {
        headlines_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        headlinesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public Builder removeHeadlines(int index) {
      if (headlinesBuilder_ == null) {
        ensureHeadlinesIsMutable();
        headlines_.remove(index);
        onChanged();
      } else {
        headlinesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset.Builder getHeadlinesBuilder(
        int index) {
      return getHeadlinesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAssetOrBuilder getHeadlinesOrBuilder(
        int index) {
      if (headlinesBuilder_ == null) {
        return headlines_.get(index);  } else {
        return headlinesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public java.util.List<? extends com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> 
         getHeadlinesOrBuilderList() {
      if (headlinesBuilder_ != null) {
        return headlinesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(headlines_);
      }
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset.Builder addHeadlinesBuilder() {
      return getHeadlinesFieldBuilder().addBuilder(
          com.google.ads.googleads.v6.common.AdTextAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset.Builder addHeadlinesBuilder(
        int index) {
      return getHeadlinesFieldBuilder().addBuilder(
          index, com.google.ads.googleads.v6.common.AdTextAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset headlines = 5;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdTextAsset.Builder> 
         getHeadlinesBuilderList() {
      return getHeadlinesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> 
        getHeadlinesFieldBuilder() {
      if (headlinesBuilder_ == null) {
        headlinesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder>(
                headlines_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        headlines_ = null;
      }
      return headlinesBuilder_;
    }

    private com.google.ads.googleads.v6.common.AdTextAsset longHeadline_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> longHeadlineBuilder_;
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     * @return Whether the longHeadline field is set.
     */
    public boolean hasLongHeadline() {
      return longHeadlineBuilder_ != null || longHeadline_ != null;
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     * @return The longHeadline.
     */
    public com.google.ads.googleads.v6.common.AdTextAsset getLongHeadline() {
      if (longHeadlineBuilder_ == null) {
        return longHeadline_ == null ? com.google.ads.googleads.v6.common.AdTextAsset.getDefaultInstance() : longHeadline_;
      } else {
        return longHeadlineBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     */
    public Builder setLongHeadline(com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (longHeadlineBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        longHeadline_ = value;
        onChanged();
      } else {
        longHeadlineBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     */
    public Builder setLongHeadline(
        com.google.ads.googleads.v6.common.AdTextAsset.Builder builderForValue) {
      if (longHeadlineBuilder_ == null) {
        longHeadline_ = builderForValue.build();
        onChanged();
      } else {
        longHeadlineBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     */
    public Builder mergeLongHeadline(com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (longHeadlineBuilder_ == null) {
        if (longHeadline_ != null) {
          longHeadline_ =
            com.google.ads.googleads.v6.common.AdTextAsset.newBuilder(longHeadline_).mergeFrom(value).buildPartial();
        } else {
          longHeadline_ = value;
        }
        onChanged();
      } else {
        longHeadlineBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     */
    public Builder clearLongHeadline() {
      if (longHeadlineBuilder_ == null) {
        longHeadline_ = null;
        onChanged();
      } else {
        longHeadline_ = null;
        longHeadlineBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset.Builder getLongHeadlineBuilder() {
      
      onChanged();
      return getLongHeadlineFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAssetOrBuilder getLongHeadlineOrBuilder() {
      if (longHeadlineBuilder_ != null) {
        return longHeadlineBuilder_.getMessageOrBuilder();
      } else {
        return longHeadline_ == null ?
            com.google.ads.googleads.v6.common.AdTextAsset.getDefaultInstance() : longHeadline_;
      }
    }
    /**
     * <pre>
     * A required long format headline. The maximum length is 90 characters.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.AdTextAsset long_headline = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> 
        getLongHeadlineFieldBuilder() {
      if (longHeadlineBuilder_ == null) {
        longHeadlineBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder>(
                getLongHeadline(),
                getParentForChildren(),
                isClean());
        longHeadline_ = null;
      }
      return longHeadlineBuilder_;
    }

    private java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> descriptions_ =
      java.util.Collections.emptyList();
    private void ensureDescriptionsIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        descriptions_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdTextAsset>(descriptions_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> descriptionsBuilder_;

    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdTextAsset> getDescriptionsList() {
      if (descriptionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(descriptions_);
      } else {
        return descriptionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public int getDescriptionsCount() {
      if (descriptionsBuilder_ == null) {
        return descriptions_.size();
      } else {
        return descriptionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset getDescriptions(int index) {
      if (descriptionsBuilder_ == null) {
        return descriptions_.get(index);
      } else {
        return descriptionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder setDescriptions(
        int index, com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (descriptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDescriptionsIsMutable();
        descriptions_.set(index, value);
        onChanged();
      } else {
        descriptionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder setDescriptions(
        int index, com.google.ads.googleads.v6.common.AdTextAsset.Builder builderForValue) {
      if (descriptionsBuilder_ == null) {
        ensureDescriptionsIsMutable();
        descriptions_.set(index, builderForValue.build());
        onChanged();
      } else {
        descriptionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder addDescriptions(com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (descriptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDescriptionsIsMutable();
        descriptions_.add(value);
        onChanged();
      } else {
        descriptionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder addDescriptions(
        int index, com.google.ads.googleads.v6.common.AdTextAsset value) {
      if (descriptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDescriptionsIsMutable();
        descriptions_.add(index, value);
        onChanged();
      } else {
        descriptionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder addDescriptions(
        com.google.ads.googleads.v6.common.AdTextAsset.Builder builderForValue) {
      if (descriptionsBuilder_ == null) {
        ensureDescriptionsIsMutable();
        descriptions_.add(builderForValue.build());
        onChanged();
      } else {
        descriptionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder addDescriptions(
        int index, com.google.ads.googleads.v6.common.AdTextAsset.Builder builderForValue) {
      if (descriptionsBuilder_ == null) {
        ensureDescriptionsIsMutable();
        descriptions_.add(index, builderForValue.build());
        onChanged();
      } else {
        descriptionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder addAllDescriptions(
        java.lang.Iterable<? extends com.google.ads.googleads.v6.common.AdTextAsset> values) {
      if (descriptionsBuilder_ == null) {
        ensureDescriptionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, descriptions_);
        onChanged();
      } else {
        descriptionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder clearDescriptions() {
      if (descriptionsBuilder_ == null) {
        descriptions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        descriptionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public Builder removeDescriptions(int index) {
      if (descriptionsBuilder_ == null) {
        ensureDescriptionsIsMutable();
        descriptions_.remove(index);
        onChanged();
      } else {
        descriptionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset.Builder getDescriptionsBuilder(
        int index) {
      return getDescriptionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAssetOrBuilder getDescriptionsOrBuilder(
        int index) {
      if (descriptionsBuilder_ == null) {
        return descriptions_.get(index);  } else {
        return descriptionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public java.util.List<? extends com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> 
         getDescriptionsOrBuilderList() {
      if (descriptionsBuilder_ != null) {
        return descriptionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(descriptions_);
      }
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset.Builder addDescriptionsBuilder() {
      return getDescriptionsFieldBuilder().addBuilder(
          com.google.ads.googleads.v6.common.AdTextAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public com.google.ads.googleads.v6.common.AdTextAsset.Builder addDescriptionsBuilder(
        int index) {
      return getDescriptionsFieldBuilder().addBuilder(
          index, com.google.ads.googleads.v6.common.AdTextAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdTextAsset descriptions = 7;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdTextAsset.Builder> 
         getDescriptionsBuilderList() {
      return getDescriptionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder> 
        getDescriptionsFieldBuilder() {
      if (descriptionsBuilder_ == null) {
        descriptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdTextAsset, com.google.ads.googleads.v6.common.AdTextAsset.Builder, com.google.ads.googleads.v6.common.AdTextAssetOrBuilder>(
                descriptions_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        descriptions_ = null;
      }
      return descriptionsBuilder_;
    }

    private java.util.List<com.google.ads.googleads.v6.common.AdVideoAsset> youtubeVideos_ =
      java.util.Collections.emptyList();
    private void ensureYoutubeVideosIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        youtubeVideos_ = new java.util.ArrayList<com.google.ads.googleads.v6.common.AdVideoAsset>(youtubeVideos_);
        bitField0_ |= 0x00000040;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdVideoAsset, com.google.ads.googleads.v6.common.AdVideoAsset.Builder, com.google.ads.googleads.v6.common.AdVideoAssetOrBuilder> youtubeVideosBuilder_;

    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdVideoAsset> getYoutubeVideosList() {
      if (youtubeVideosBuilder_ == null) {
        return java.util.Collections.unmodifiableList(youtubeVideos_);
      } else {
        return youtubeVideosBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public int getYoutubeVideosCount() {
      if (youtubeVideosBuilder_ == null) {
        return youtubeVideos_.size();
      } else {
        return youtubeVideosBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public com.google.ads.googleads.v6.common.AdVideoAsset getYoutubeVideos(int index) {
      if (youtubeVideosBuilder_ == null) {
        return youtubeVideos_.get(index);
      } else {
        return youtubeVideosBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder setYoutubeVideos(
        int index, com.google.ads.googleads.v6.common.AdVideoAsset value) {
      if (youtubeVideosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureYoutubeVideosIsMutable();
        youtubeVideos_.set(index, value);
        onChanged();
      } else {
        youtubeVideosBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder setYoutubeVideos(
        int index, com.google.ads.googleads.v6.common.AdVideoAsset.Builder builderForValue) {
      if (youtubeVideosBuilder_ == null) {
        ensureYoutubeVideosIsMutable();
        youtubeVideos_.set(index, builderForValue.build());
        onChanged();
      } else {
        youtubeVideosBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder addYoutubeVideos(com.google.ads.googleads.v6.common.AdVideoAsset value) {
      if (youtubeVideosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureYoutubeVideosIsMutable();
        youtubeVideos_.add(value);
        onChanged();
      } else {
        youtubeVideosBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder addYoutubeVideos(
        int index, com.google.ads.googleads.v6.common.AdVideoAsset value) {
      if (youtubeVideosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureYoutubeVideosIsMutable();
        youtubeVideos_.add(index, value);
        onChanged();
      } else {
        youtubeVideosBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder addYoutubeVideos(
        com.google.ads.googleads.v6.common.AdVideoAsset.Builder builderForValue) {
      if (youtubeVideosBuilder_ == null) {
        ensureYoutubeVideosIsMutable();
        youtubeVideos_.add(builderForValue.build());
        onChanged();
      } else {
        youtubeVideosBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder addYoutubeVideos(
        int index, com.google.ads.googleads.v6.common.AdVideoAsset.Builder builderForValue) {
      if (youtubeVideosBuilder_ == null) {
        ensureYoutubeVideosIsMutable();
        youtubeVideos_.add(index, builderForValue.build());
        onChanged();
      } else {
        youtubeVideosBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder addAllYoutubeVideos(
        java.lang.Iterable<? extends com.google.ads.googleads.v6.common.AdVideoAsset> values) {
      if (youtubeVideosBuilder_ == null) {
        ensureYoutubeVideosIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, youtubeVideos_);
        onChanged();
      } else {
        youtubeVideosBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder clearYoutubeVideos() {
      if (youtubeVideosBuilder_ == null) {
        youtubeVideos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
      } else {
        youtubeVideosBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public Builder removeYoutubeVideos(int index) {
      if (youtubeVideosBuilder_ == null) {
        ensureYoutubeVideosIsMutable();
        youtubeVideos_.remove(index);
        onChanged();
      } else {
        youtubeVideosBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public com.google.ads.googleads.v6.common.AdVideoAsset.Builder getYoutubeVideosBuilder(
        int index) {
      return getYoutubeVideosFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public com.google.ads.googleads.v6.common.AdVideoAssetOrBuilder getYoutubeVideosOrBuilder(
        int index) {
      if (youtubeVideosBuilder_ == null) {
        return youtubeVideos_.get(index);  } else {
        return youtubeVideosBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public java.util.List<? extends com.google.ads.googleads.v6.common.AdVideoAssetOrBuilder> 
         getYoutubeVideosOrBuilderList() {
      if (youtubeVideosBuilder_ != null) {
        return youtubeVideosBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(youtubeVideos_);
      }
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public com.google.ads.googleads.v6.common.AdVideoAsset.Builder addYoutubeVideosBuilder() {
      return getYoutubeVideosFieldBuilder().addBuilder(
          com.google.ads.googleads.v6.common.AdVideoAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public com.google.ads.googleads.v6.common.AdVideoAsset.Builder addYoutubeVideosBuilder(
        int index) {
      return getYoutubeVideosFieldBuilder().addBuilder(
          index, com.google.ads.googleads.v6.common.AdVideoAsset.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     * </pre>
     *
     * <code>repeated .google.ads.googleads.v6.common.AdVideoAsset youtube_videos = 8;</code>
     */
    public java.util.List<com.google.ads.googleads.v6.common.AdVideoAsset.Builder> 
         getYoutubeVideosBuilderList() {
      return getYoutubeVideosFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.ads.googleads.v6.common.AdVideoAsset, com.google.ads.googleads.v6.common.AdVideoAsset.Builder, com.google.ads.googleads.v6.common.AdVideoAssetOrBuilder> 
        getYoutubeVideosFieldBuilder() {
      if (youtubeVideosBuilder_ == null) {
        youtubeVideosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.googleads.v6.common.AdVideoAsset, com.google.ads.googleads.v6.common.AdVideoAsset.Builder, com.google.ads.googleads.v6.common.AdVideoAssetOrBuilder>(
                youtubeVideos_,
                ((bitField0_ & 0x00000040) != 0),
                getParentForChildren(),
                isClean());
        youtubeVideos_ = null;
      }
      return youtubeVideosBuilder_;
    }

    private java.lang.Object businessName_ = "";
    /**
     * <pre>
     * The advertiser/brand name. Maximum display width is 25.
     * </pre>
     *
     * <code>string business_name = 17;</code>
     * @return Whether the businessName field is set.
     */
    public boolean hasBusinessName() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * The advertiser/brand name. Maximum display width is 25.
     * </pre>
     *
     * <code>string business_name = 17;</code>
     * @return The businessName.
     */
    public java.lang.String getBusinessName() {
      java.lang.Object ref = businessName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        businessName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The advertiser/brand name. Maximum display width is 25.
     * </pre>
     *
     * <code>string business_name = 17;</code>
     * @return The bytes for businessName.
     */
    public com.google.protobuf.ByteString
        getBusinessNameBytes() {
      java.lang.Object ref = businessName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        businessName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The advertiser/brand name. Maximum display width is 25.
     * </pre>
     *
     * <code>string business_name = 17;</code>
     * @param value The businessName to set.
     * @return This builder for chaining.
     */
    public Builder setBusinessName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
      businessName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The advertiser/brand name. Maximum display width is 25.
     * </pre>
     *
     * <code>string business_name = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearBusinessName() {
      bitField0_ = (bitField0_ & ~0x00000080);
      businessName_ = getDefaultInstance().getBusinessName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The advertiser/brand name. Maximum display width is 25.
     * </pre>
     *
     * <code>string business_name = 17;</code>
     * @param value The bytes for businessName to set.
     * @return This builder for chaining.
     */
    public Builder setBusinessNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      bitField0_ |= 0x00000080;
      businessName_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object mainColor_ = "";
    /**
     * <pre>
     * The main color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string main_color = 18;</code>
     * @return Whether the mainColor field is set.
     */
    public boolean hasMainColor() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * The main color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string main_color = 18;</code>
     * @return The mainColor.
     */
    public java.lang.String getMainColor() {
      java.lang.Object ref = mainColor_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mainColor_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The main color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string main_color = 18;</code>
     * @return The bytes for mainColor.
     */
    public com.google.protobuf.ByteString
        getMainColorBytes() {
      java.lang.Object ref = mainColor_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mainColor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The main color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string main_color = 18;</code>
     * @param value The mainColor to set.
     * @return This builder for chaining.
     */
    public Builder setMainColor(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
      mainColor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The main color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string main_color = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearMainColor() {
      bitField0_ = (bitField0_ & ~0x00000100);
      mainColor_ = getDefaultInstance().getMainColor();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The main color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string main_color = 18;</code>
     * @param value The bytes for mainColor to set.
     * @return This builder for chaining.
     */
    public Builder setMainColorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      bitField0_ |= 0x00000100;
      mainColor_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object accentColor_ = "";
    /**
     * <pre>
     * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string accent_color = 19;</code>
     * @return Whether the accentColor field is set.
     */
    public boolean hasAccentColor() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string accent_color = 19;</code>
     * @return The accentColor.
     */
    public java.lang.String getAccentColor() {
      java.lang.Object ref = accentColor_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        accentColor_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string accent_color = 19;</code>
     * @return The bytes for accentColor.
     */
    public com.google.protobuf.ByteString
        getAccentColorBytes() {
      java.lang.Object ref = accentColor_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        accentColor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string accent_color = 19;</code>
     * @param value The accentColor to set.
     * @return This builder for chaining.
     */
    public Builder setAccentColor(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
      accentColor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string accent_color = 19;</code>
     * @return This builder for chaining.
     */
    public Builder clearAccentColor() {
      bitField0_ = (bitField0_ & ~0x00000200);
      accentColor_ = getDefaultInstance().getAccentColor();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The accent color of the ad in hexadecimal, e.g. #ffffff for white.
     * If one of main_color and accent_color is set, the other is required as
     * well.
     * </pre>
     *
     * <code>string accent_color = 19;</code>
     * @param value The bytes for accentColor to set.
     * @return This builder for chaining.
     */
    public Builder setAccentColorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      bitField0_ |= 0x00000200;
      accentColor_ = value;
      onChanged();
      return this;
    }

    private boolean allowFlexibleColor_ ;
    /**
     * <pre>
     * Advertiser's consent to allow flexible color. When true, the ad may be
     * served with different color if necessary. When false, the ad will be served
     * with the specified colors or a neutral color.
     * The default value is true.
     * Must be true if main_color and accent_color are not set.
     * </pre>
     *
     * <code>bool allow_flexible_color = 20;</code>
     * @return Whether the allowFlexibleColor field is set.
     */
    @java.lang.Override
    public boolean hasAllowFlexibleColor() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Advertiser's consent to allow flexible color. When true, the ad may be
     * served with different color if necessary. When false, the ad will be served
     * with the specified colors or a neutral color.
     * The default value is true.
     * Must be true if main_color and accent_color are not set.
     * </pre>
     *
     * <code>bool allow_flexible_color = 20;</code>
     * @return The allowFlexibleColor.
     */
    @java.lang.Override
    public boolean getAllowFlexibleColor() {
      return allowFlexibleColor_;
    }
    /**
     * <pre>
     * Advertiser's consent to allow flexible color. When true, the ad may be
     * served with different color if necessary. When false, the ad will be served
     * with the specified colors or a neutral color.
     * The default value is true.
     * Must be true if main_color and accent_color are not set.
     * </pre>
     *
     * <code>bool allow_flexible_color = 20;</code>
     * @param value The allowFlexibleColor to set.
     * @return This builder for chaining.
     */
    public Builder setAllowFlexibleColor(boolean value) {
      bitField0_ |= 0x00000400;
      allowFlexibleColor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Advertiser's consent to allow flexible color. When true, the ad may be
     * served with different color if necessary. When false, the ad will be served
     * with the specified colors or a neutral color.
     * The default value is true.
     * Must be true if main_color and accent_color are not set.
     * </pre>
     *
     * <code>bool allow_flexible_color = 20;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowFlexibleColor() {
      bitField0_ = (bitField0_ & ~0x00000400);
      allowFlexibleColor_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object callToActionText_ = "";
    /**
     * <pre>
     * The call-to-action text for the ad. Maximum display width is 30.
     * </pre>
     *
     * <code>string call_to_action_text = 21;</code>
     * @return Whether the callToActionText field is set.
     */
    public boolean hasCallToActionText() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * The call-to-action text for the ad. Maximum display width is 30.
     * </pre>
     *
     * <code>string call_to_action_text = 21;</code>
     * @return The callToActionText.
     */
    public java.lang.String getCallToActionText() {
      java.lang.Object ref = callToActionText_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        callToActionText_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The call-to-action text for the ad. Maximum display width is 30.
     * </pre>
     *
     * <code>string call_to_action_text = 21;</code>
     * @return The bytes for callToActionText.
     */
    public com.google.protobuf.ByteString
        getCallToActionTextBytes() {
      java.lang.Object ref = callToActionText_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        callToActionText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The call-to-action text for the ad. Maximum display width is 30.
     * </pre>
     *
     * <code>string call_to_action_text = 21;</code>
     * @param value The callToActionText to set.
     * @return This builder for chaining.
     */
    public Builder setCallToActionText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
      callToActionText_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The call-to-action text for the ad. Maximum display width is 30.
     * </pre>
     *
     * <code>string call_to_action_text = 21;</code>
     * @return This builder for chaining.
     */
    public Builder clearCallToActionText() {
      bitField0_ = (bitField0_ & ~0x00000800);
      callToActionText_ = getDefaultInstance().getCallToActionText();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The call-to-action text for the ad. Maximum display width is 30.
     * </pre>
     *
     * <code>string call_to_action_text = 21;</code>
     * @param value The bytes for callToActionText to set.
     * @return This builder for chaining.
     */
    public Builder setCallToActionTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      bitField0_ |= 0x00000800;
      callToActionText_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object pricePrefix_ = "";
    /**
     * <pre>
     * Prefix before price. E.g. 'as low as'.
     * </pre>
     *
     * <code>string price_prefix = 22;</code>
     * @return Whether the pricePrefix field is set.
     */
    public boolean hasPricePrefix() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * Prefix before price. E.g. 'as low as'.
     * </pre>
     *
     * <code>string price_prefix = 22;</code>
     * @return The pricePrefix.
     */
    public java.lang.String getPricePrefix() {
      java.lang.Object ref = pricePrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pricePrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Prefix before price. E.g. 'as low as'.
     * </pre>
     *
     * <code>string price_prefix = 22;</code>
     * @return The bytes for pricePrefix.
     */
    public com.google.protobuf.ByteString
        getPricePrefixBytes() {
      java.lang.Object ref = pricePrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pricePrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Prefix before price. E.g. 'as low as'.
     * </pre>
     *
     * <code>string price_prefix = 22;</code>
     * @param value The pricePrefix to set.
     * @return This builder for chaining.
     */
    public Builder setPricePrefix(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
      pricePrefix_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Prefix before price. E.g. 'as low as'.
     * </pre>
     *
     * <code>string price_prefix = 22;</code>
     * @return This builder for chaining.
     */
    public Builder clearPricePrefix() {
      bitField0_ = (bitField0_ & ~0x00001000);
      pricePrefix_ = getDefaultInstance().getPricePrefix();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Prefix before price. E.g. 'as low as'.
     * </pre>
     *
     * <code>string price_prefix = 22;</code>
     * @param value The bytes for pricePrefix to set.
     * @return This builder for chaining.
     */
    public Builder setPricePrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      bitField0_ |= 0x00001000;
      pricePrefix_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object promoText_ = "";
    /**
     * <pre>
     * Promotion text used for dyanmic formats of responsive ads. For example
     * 'Free two-day shipping'.
     * </pre>
     *
     * <code>string promo_text = 23;</code>
     * @return Whether the promoText field is set.
     */
    public boolean hasPromoText() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Promotion text used for dyanmic formats of responsive ads. For example
     * 'Free two-day shipping'.
     * </pre>
     *
     * <code>string promo_text = 23;</code>
     * @return The promoText.
     */
    public java.lang.String getPromoText() {
      java.lang.Object ref = promoText_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        promoText_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Promotion text used for dyanmic formats of responsive ads. For example
     * 'Free two-day shipping'.
     * </pre>
     *
     * <code>string promo_text = 23;</code>
     * @return The bytes for promoText.
     */
    public com.google.protobuf.ByteString
        getPromoTextBytes() {
      java.lang.Object ref = promoText_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        promoText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Promotion text used for dyanmic formats of responsive ads. For example
     * 'Free two-day shipping'.
     * </pre>
     *
     * <code>string promo_text = 23;</code>
     * @param value The promoText to set.
     * @return This builder for chaining.
     */
    public Builder setPromoText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
      promoText_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Promotion text used for dyanmic formats of responsive ads. For example
     * 'Free two-day shipping'.
     * </pre>
     *
     * <code>string promo_text = 23;</code>
     * @return This builder for chaining.
     */
    public Builder clearPromoText() {
      bitField0_ = (bitField0_ & ~0x00002000);
      promoText_ = getDefaultInstance().getPromoText();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Promotion text used for dyanmic formats of responsive ads. For example
     * 'Free two-day shipping'.
     * </pre>
     *
     * <code>string promo_text = 23;</code>
     * @param value The bytes for promoText to set.
     * @return This builder for chaining.
     */
    public Builder setPromoTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      bitField0_ |= 0x00002000;
      promoText_ = value;
      onChanged();
      return this;
    }

    private int formatSetting_ = 0;
    /**
     * <pre>
     * Specifies which format the ad will be served in. Default is ALL_FORMATS.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;</code>
     * @return The enum numeric value on the wire for formatSetting.
     */
    @java.lang.Override public int getFormatSettingValue() {
      return formatSetting_;
    }
    /**
     * <pre>
     * Specifies which format the ad will be served in. Default is ALL_FORMATS.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;</code>
     * @param value The enum numeric value on the wire for formatSetting to set.
     * @return This builder for chaining.
     */
    public Builder setFormatSettingValue(int value) {
      
      formatSetting_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies which format the ad will be served in. Default is ALL_FORMATS.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;</code>
     * @return The formatSetting.
     */
    @java.lang.Override
    public com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting getFormatSetting() {
      @SuppressWarnings("deprecation")
      com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting result = com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting.valueOf(formatSetting_);
      return result == null ? com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Specifies which format the ad will be served in. Default is ALL_FORMATS.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;</code>
     * @param value The formatSetting to set.
     * @return This builder for chaining.
     */
    public Builder setFormatSetting(com.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      formatSetting_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies which format the ad will be served in. Default is ALL_FORMATS.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearFormatSetting() {
      
      formatSetting_ = 0;
      onChanged();
      return this;
    }

    private com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec controlSpec_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec, com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.Builder, com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpecOrBuilder> controlSpecBuilder_;
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     * @return Whether the controlSpec field is set.
     */
    public boolean hasControlSpec() {
      return controlSpecBuilder_ != null || controlSpec_ != null;
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     * @return The controlSpec.
     */
    public com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec getControlSpec() {
      if (controlSpecBuilder_ == null) {
        return controlSpec_ == null ? com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.getDefaultInstance() : controlSpec_;
      } else {
        return controlSpecBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     */
    public Builder setControlSpec(com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec value) {
      if (controlSpecBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        controlSpec_ = value;
        onChanged();
      } else {
        controlSpecBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     */
    public Builder setControlSpec(
        com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.Builder builderForValue) {
      if (controlSpecBuilder_ == null) {
        controlSpec_ = builderForValue.build();
        onChanged();
      } else {
        controlSpecBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     */
    public Builder mergeControlSpec(com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec value) {
      if (controlSpecBuilder_ == null) {
        if (controlSpec_ != null) {
          controlSpec_ =
            com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.newBuilder(controlSpec_).mergeFrom(value).buildPartial();
        } else {
          controlSpec_ = value;
        }
        onChanged();
      } else {
        controlSpecBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     */
    public Builder clearControlSpec() {
      if (controlSpecBuilder_ == null) {
        controlSpec_ = null;
        onChanged();
      } else {
        controlSpec_ = null;
        controlSpecBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     */
    public com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.Builder getControlSpecBuilder() {
      
      onChanged();
      return getControlSpecFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     */
    public com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpecOrBuilder getControlSpecOrBuilder() {
      if (controlSpecBuilder_ != null) {
        return controlSpecBuilder_.getMessageOrBuilder();
      } else {
        return controlSpec_ == null ?
            com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.getDefaultInstance() : controlSpec_;
      }
    }
    /**
     * <pre>
     * Specification for various creative controls.
     * </pre>
     *
     * <code>.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec control_spec = 24;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec, com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.Builder, com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpecOrBuilder> 
        getControlSpecFieldBuilder() {
      if (controlSpecBuilder_ == null) {
        controlSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec, com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpec.Builder, com.google.ads.googleads.v6.common.ResponsiveDisplayAdControlSpecOrBuilder>(
                getControlSpec(),
                getParentForChildren(),
                isClean());
        controlSpec_ = null;
      }
      return controlSpecBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.ads.googleads.v6.common.ResponsiveDisplayAdInfo)
  }

  // @@protoc_insertion_point(class_scope:google.ads.googleads.v6.common.ResponsiveDisplayAdInfo)
  private static final com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo();
  }

  public static com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ResponsiveDisplayAdInfo>
      PARSER = new com.google.protobuf.AbstractParser<ResponsiveDisplayAdInfo>() {
    @java.lang.Override
    public ResponsiveDisplayAdInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ResponsiveDisplayAdInfo(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ResponsiveDisplayAdInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ResponsiveDisplayAdInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.ads.googleads.v6.common.ResponsiveDisplayAdInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

