// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/googleads/v1/common/bidding.proto

package com.google.ads.googleads.v1.common;

public interface TargetOutrankShareOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.ads.googleads.v1.common.TargetOutrankShare)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The target fraction of auctions where the advertiser should outrank the
   * competitor.
   * The advertiser outranks the competitor in an auction if either the
   * advertiser appears above the competitor in the search results, or appears
   * in the search results when the competitor does not.
   * Value must be between 1 and 1000000, inclusive.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value target_outrank_share_micros = 1;</code>
   */
  boolean hasTargetOutrankShareMicros();
  /**
   * <pre>
   * The target fraction of auctions where the advertiser should outrank the
   * competitor.
   * The advertiser outranks the competitor in an auction if either the
   * advertiser appears above the competitor in the search results, or appears
   * in the search results when the competitor does not.
   * Value must be between 1 and 1000000, inclusive.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value target_outrank_share_micros = 1;</code>
   */
  com.google.protobuf.Int32Value getTargetOutrankShareMicros();
  /**
   * <pre>
   * The target fraction of auctions where the advertiser should outrank the
   * competitor.
   * The advertiser outranks the competitor in an auction if either the
   * advertiser appears above the competitor in the search results, or appears
   * in the search results when the competitor does not.
   * Value must be between 1 and 1000000, inclusive.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value target_outrank_share_micros = 1;</code>
   */
  com.google.protobuf.Int32ValueOrBuilder getTargetOutrankShareMicrosOrBuilder();

  /**
   * <pre>
   * Competitor's visible domain URL.
   * </pre>
   *
   * <code>.google.protobuf.StringValue competitor_domain = 2;</code>
   */
  boolean hasCompetitorDomain();
  /**
   * <pre>
   * Competitor's visible domain URL.
   * </pre>
   *
   * <code>.google.protobuf.StringValue competitor_domain = 2;</code>
   */
  com.google.protobuf.StringValue getCompetitorDomain();
  /**
   * <pre>
   * Competitor's visible domain URL.
   * </pre>
   *
   * <code>.google.protobuf.StringValue competitor_domain = 2;</code>
   */
  com.google.protobuf.StringValueOrBuilder getCompetitorDomainOrBuilder();

  /**
   * <pre>
   * Maximum bid limit that can be set by the bid strategy.
   * The limit applies to all keywords managed by the strategy.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value cpc_bid_ceiling_micros = 3;</code>
   */
  boolean hasCpcBidCeilingMicros();
  /**
   * <pre>
   * Maximum bid limit that can be set by the bid strategy.
   * The limit applies to all keywords managed by the strategy.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value cpc_bid_ceiling_micros = 3;</code>
   */
  com.google.protobuf.Int64Value getCpcBidCeilingMicros();
  /**
   * <pre>
   * Maximum bid limit that can be set by the bid strategy.
   * The limit applies to all keywords managed by the strategy.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value cpc_bid_ceiling_micros = 3;</code>
   */
  com.google.protobuf.Int64ValueOrBuilder getCpcBidCeilingMicrosOrBuilder();

  /**
   * <pre>
   * Whether the strategy should always follow bid estimate changes,
   * or only increase.
   * If false, always set a keyword's new bid to the current bid estimate.
   * If true, only updates a keyword's bid if the current bid estimate is
   * greater than the current bid.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue only_raise_cpc_bids = 4;</code>
   */
  boolean hasOnlyRaiseCpcBids();
  /**
   * <pre>
   * Whether the strategy should always follow bid estimate changes,
   * or only increase.
   * If false, always set a keyword's new bid to the current bid estimate.
   * If true, only updates a keyword's bid if the current bid estimate is
   * greater than the current bid.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue only_raise_cpc_bids = 4;</code>
   */
  com.google.protobuf.BoolValue getOnlyRaiseCpcBids();
  /**
   * <pre>
   * Whether the strategy should always follow bid estimate changes,
   * or only increase.
   * If false, always set a keyword's new bid to the current bid estimate.
   * If true, only updates a keyword's bid if the current bid estimate is
   * greater than the current bid.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue only_raise_cpc_bids = 4;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getOnlyRaiseCpcBidsOrBuilder();

  /**
   * <pre>
   * Whether the strategy is allowed to raise bids on keywords with
   * lower-range quality scores.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue raise_cpc_bid_when_quality_score_is_low = 5;</code>
   */
  boolean hasRaiseCpcBidWhenQualityScoreIsLow();
  /**
   * <pre>
   * Whether the strategy is allowed to raise bids on keywords with
   * lower-range quality scores.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue raise_cpc_bid_when_quality_score_is_low = 5;</code>
   */
  com.google.protobuf.BoolValue getRaiseCpcBidWhenQualityScoreIsLow();
  /**
   * <pre>
   * Whether the strategy is allowed to raise bids on keywords with
   * lower-range quality scores.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue raise_cpc_bid_when_quality_score_is_low = 5;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getRaiseCpcBidWhenQualityScoreIsLowOrBuilder();
}
